
build/debug/stm_hvbms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005790  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08005958  08005958  00006958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005994  08005994  000070c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005994  08005994  00006994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800599c  0800599c  000070c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800599c  0800599c  0000699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059a0  080059a0  000069a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  080059a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  200000c8  08005a6c  000070c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  08005a6c  00007690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  000070f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025763  00000000  00000000  00007131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041d0  00000000  00000000  0002c894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000e507  00000000  00000000  00030a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001438  00000000  00000000  0003ef70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fd3  00000000  00000000  000403a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001700c  00000000  00000000  0004137b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000097ce  00000000  00000000  00058387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003584  00000000  00000000  00061b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000194  00000000  00000000  000650dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b80c 	b.w	8000b70 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f004 fd72 	bl	8005648 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_idiv0>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__do_global_dtors_aux>:
 8000b74:	b510      	push	{r4, lr}
 8000b76:	4c05      	ldr	r4, [pc, #20]	@ (8000b8c <__do_global_dtors_aux+0x18>)
 8000b78:	7823      	ldrb	r3, [r4, #0]
 8000b7a:	b933      	cbnz	r3, 8000b8a <__do_global_dtors_aux+0x16>
 8000b7c:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <__do_global_dtors_aux+0x1c>)
 8000b7e:	b113      	cbz	r3, 8000b86 <__do_global_dtors_aux+0x12>
 8000b80:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <__do_global_dtors_aux+0x20>)
 8000b82:	f3af 8000 	nop.w
 8000b86:	2301      	movs	r3, #1
 8000b88:	7023      	strb	r3, [r4, #0]
 8000b8a:	bd10      	pop	{r4, pc}
 8000b8c:	200000c8 	.word	0x200000c8
 8000b90:	00000000 	.word	0x00000000
 8000b94:	08005940 	.word	0x08005940

08000b98 <frame_dummy>:
 8000b98:	b508      	push	{r3, lr}
 8000b9a:	4b03      	ldr	r3, [pc, #12]	@ (8000ba8 <frame_dummy+0x10>)
 8000b9c:	b11b      	cbz	r3, 8000ba6 <frame_dummy+0xe>
 8000b9e:	4903      	ldr	r1, [pc, #12]	@ (8000bac <frame_dummy+0x14>)
 8000ba0:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <frame_dummy+0x18>)
 8000ba2:	f3af 8000 	nop.w
 8000ba6:	bd08      	pop	{r3, pc}
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	200000cc 	.word	0x200000cc
 8000bb0:	08005940 	.word	0x08005940

08000bb4 <L9963E_init>:
#include "L9963E.h"

#include <memory.h>
#include <stddef.h>

L9963E_StatusTypeDef L9963E_init(L9963E_HandleTypeDef *handle, L9963E_IfTypeDef interface, uint8_t slave_n) {
 8000bb4:	b084      	sub	sp, #16
 8000bb6:	b500      	push	{lr}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	f10d 0c1c 	add.w	ip, sp, #28
 8000bbe:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8000bc2:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
#if L9963E_DEBUG
    if (handle == NULL) {
 8000bc6:	b1a0      	cbz	r0, 8000bf2 <L9963E_init+0x3e>
 8000bc8:	4684      	mov	ip, r0
        return L9963E_ERROR;
    }

    if (slave_n >= 32) {
 8000bca:	2b1f      	cmp	r3, #31
 8000bcc:	d905      	bls.n	8000bda <L9963E_init+0x26>
        return L9963E_ERROR;
 8000bce:	2001      	movs	r0, #1
#endif

    handle->slave_n = slave_n;

    return L9963E_DRV_init(&(handle->drv_handle), interface);
}
 8000bd0:	b005      	add	sp, #20
 8000bd2:	f85d eb04 	ldr.w	lr, [sp], #4
 8000bd6:	b004      	add	sp, #16
 8000bd8:	4770      	bx	lr
    handle->slave_n = slave_n;
 8000bda:	7603      	strb	r3, [r0, #24]
    return L9963E_DRV_init(&(handle->drv_handle), interface);
 8000bdc:	ab0a      	add	r3, sp, #40	@ 0x28
 8000bde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000be2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8000be6:	ab07      	add	r3, sp, #28
 8000be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bea:	4660      	mov	r0, ip
 8000bec:	f000 fb46 	bl	800127c <L9963E_DRV_init>
 8000bf0:	e7ee      	b.n	8000bd0 <L9963E_init+0x1c>
        return L9963E_ERROR;
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	e7ec      	b.n	8000bd0 <L9963E_init+0x1c>

08000bf6 <L9963E_addressing_procedure>:

L9963E_StatusTypeDef L9963E_addressing_procedure(L9963E_HandleTypeDef *handle,
                                                 uint8_t iso_freq_sel,
                                                 uint8_t is_dual_ring,
                                                 uint8_t out_res_tx_iso,
                                                 uint8_t lock_isofreq) {
 8000bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	4604      	mov	r4, r0
 8000bfe:	460f      	mov	r7, r1
 8000c00:	4698      	mov	r8, r3
    L9963E_RegisterUnionTypeDef write_reg;
    L9963E_RegisterUnionTypeDef read_reg;

    uint32_t tick = L9963E_DRV_GETTICK(&(handle->drv_handle));
 8000c02:	6903      	ldr	r3, [r0, #16]
 8000c04:	4798      	blx	r3
    uint8_t x     = 1;

#if L9963E_DEBUG
    if (handle == NULL) {
 8000c06:	2c00      	cmp	r4, #0
 8000c08:	f000 8098 	beq.w	8000d3c <L9963E_addressing_procedure+0x146>
 8000c0c:	4606      	mov	r6, r0
    uint8_t x     = 1;
 8000c0e:	2501      	movs	r5, #1
 8000c10:	e027      	b.n	8000c62 <L9963E_addressing_procedure+0x6c>
        if (L9963E_DRV_reg_read(&(handle->drv_handle), x, L9963E_DEV_GEN_CFG_ADDR, &read_reg, 1) == L9963E_OK &&
            read_reg.DEV_GEN_CFG.chip_ID == x) {
            ++x;
            tick = L9963E_DRV_GETTICK(&(handle->drv_handle));
        } else {
            if (L9963E_DRV_GETTICK(&(handle->drv_handle)) - tick >= 10) {
 8000c12:	6923      	ldr	r3, [r4, #16]
 8000c14:	4798      	blx	r3
 8000c16:	1b80      	subs	r0, r0, r6
 8000c18:	2809      	cmp	r0, #9
 8000c1a:	f200 8091 	bhi.w	8000d40 <L9963E_addressing_procedure+0x14a>
                return L9963E_TIMEOUT;
            }

            //wakeup the device
            L9963E_DRV_wakeup(&(handle->drv_handle));
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f000 fb6c 	bl	80012fc <L9963E_DRV_wakeup>
            // by default the wakeup procedure needs 2 ms of time (T_WAKEUP)
            L9963E_DRV_DELAY(&(handle->drv_handle), 2);
 8000c24:	6963      	ldr	r3, [r4, #20]
 8000c26:	2002      	movs	r0, #2
 8000c28:	4798      	blx	r3

            //send broadcast command setting the chip_idz
            write_reg.generic                  = L9963E_DEV_GEN_CFG_DEFAULT;
 8000c2a:	2240      	movs	r2, #64	@ 0x40
 8000c2c:	9203      	str	r2, [sp, #12]
            write_reg.DEV_GEN_CFG.chip_ID      = x;
 8000c2e:	f365 3251 	bfi	r2, r5, #13, #5
 8000c32:	9203      	str	r2, [sp, #12]
            write_reg.DEV_GEN_CFG.iso_freq_sel = 0b00;
            write_reg.DEV_GEN_CFG.FaultH_EN = 0b0;//adedd now
            write_reg.DEV_GEN_CFG.Farthest_Unit = (x != handle->slave_n ? 1 : 0);//added now
 8000c34:	7e22      	ldrb	r2, [r4, #24]
 8000c36:	1b52      	subs	r2, r2, r5
 8000c38:	bf18      	it	ne
 8000c3a:	2201      	movne	r2, #1
 8000c3c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000c40:	f362 0341 	bfi	r3, r2, #1, #1
 8000c44:	f88d 300c 	strb.w	r3, [sp, #12]
            write_reg.DEV_GEN_CFG.isotx_en_h = (x != handle->slave_n ? 1 : 0);
 8000c48:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8000c4c:	f362 1304 	bfi	r3, r2, #4, #1
 8000c50:	f88d 300d 	strb.w	r3, [sp, #13]

            L9963E_DRV_reg_write(
 8000c54:	2201      	movs	r2, #1
 8000c56:	9200      	str	r2, [sp, #0]
 8000c58:	ab03      	add	r3, sp, #12
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	f000 fc87 	bl	8001570 <L9963E_DRV_reg_write>
    while (x <= handle->slave_n) {
 8000c62:	7e23      	ldrb	r3, [r4, #24]
 8000c64:	42ab      	cmp	r3, r5
 8000c66:	d316      	bcc.n	8000c96 <L9963E_addressing_procedure+0xa0>
        write_reg.generic = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9303      	str	r3, [sp, #12]
        read_reg.generic  = 0;
 8000c6c:	9302      	str	r3, [sp, #8]
        if (L9963E_DRV_reg_read(&(handle->drv_handle), x, L9963E_DEV_GEN_CFG_ADDR, &read_reg, 1) == L9963E_OK &&
 8000c6e:	2201      	movs	r2, #1
 8000c70:	9200      	str	r2, [sp, #0]
 8000c72:	ab02      	add	r3, sp, #8
 8000c74:	4629      	mov	r1, r5
 8000c76:	4620      	mov	r0, r4
 8000c78:	f000 fc68 	bl	800154c <L9963E_DRV_reg_read>
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	d1c8      	bne.n	8000c12 <L9963E_addressing_procedure+0x1c>
            read_reg.DEV_GEN_CFG.chip_ID == x) {
 8000c80:	9b02      	ldr	r3, [sp, #8]
 8000c82:	f3c3 3344 	ubfx	r3, r3, #13, #5
        if (L9963E_DRV_reg_read(&(handle->drv_handle), x, L9963E_DEV_GEN_CFG_ADDR, &read_reg, 1) == L9963E_OK &&
 8000c86:	42ab      	cmp	r3, r5
 8000c88:	d1c3      	bne.n	8000c12 <L9963E_addressing_procedure+0x1c>
            ++x;
 8000c8a:	3501      	adds	r5, #1
 8000c8c:	b2ed      	uxtb	r5, r5
            tick = L9963E_DRV_GETTICK(&(handle->drv_handle));
 8000c8e:	6923      	ldr	r3, [r4, #16]
 8000c90:	4798      	blx	r3
 8000c92:	4606      	mov	r6, r0
 8000c94:	e7e5      	b.n	8000c62 <L9963E_addressing_procedure+0x6c>
                &(handle->drv_handle), L9963E_DEVICE_BROADCAST, L9963E_DEV_GEN_CFG_ADDR, &write_reg, 1);
        }
    }

    write_reg.generic                    = L9963E_DEV_GEN_CFG_DEFAULT;
 8000c96:	2340      	movs	r3, #64	@ 0x40
 8000c98:	9303      	str	r3, [sp, #12]
    write_reg.DEV_GEN_CFG.isotx_en_h     = 0b1;
 8000c9a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	f88d 300d 	strb.w	r3, [sp, #13]
    write_reg.DEV_GEN_CFG.out_res_tx_iso = out_res_tx_iso;
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f368 0383 	bfi	r3, r8, #2, #2
 8000cac:	f88d 300d 	strb.w	r3, [sp, #13]
    write_reg.DEV_GEN_CFG.iso_freq_sel   = iso_freq_sel;
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	f367 0301 	bfi	r3, r7, #0, #2
 8000cb6:	f88d 300d 	strb.w	r3, [sp, #13]

    if (iso_freq_sel == 0b11)
 8000cba:	2f03      	cmp	r7, #3
 8000cbc:	d027      	beq.n	8000d0e <L9963E_addressing_procedure+0x118>
        L9963E_DRV_ISOFREQ_HIGH(&(handle->drv_handle));
    else
        L9963E_DRV_ISOFREQ_LOW(&(handle->drv_handle));
 8000cbe:	6863      	ldr	r3, [r4, #4]
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	4798      	blx	r3

    L9963E_DRV_reg_write(&(handle->drv_handle), L9963E_DEVICE_BROADCAST, L9963E_DEV_GEN_CFG_ADDR, &write_reg, 1);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	9200      	str	r2, [sp, #0]
 8000cca:	ab03      	add	r3, sp, #12
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f000 fc4e 	bl	8001570 <L9963E_DRV_reg_write>

    write_reg.DEV_GEN_CFG.Farthest_Unit = 0b1;
 8000cd4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	f88d 300c 	strb.w	r3, [sp, #12]
    if (!handle->is_dual_ring) {
 8000ce0:	7e63      	ldrb	r3, [r4, #25]
 8000ce2:	b92b      	cbnz	r3, 8000cf0 <L9963E_addressing_procedure+0xfa>
        write_reg.DEV_GEN_CFG.isotx_en_h = 0;
 8000ce4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8000ce8:	f023 0310 	bic.w	r3, r3, #16
 8000cec:	f88d 300d 	strb.w	r3, [sp, #13]
    }

    L9963E_DRV_reg_write(&(handle->drv_handle), handle->slave_n, L9963E_DEV_GEN_CFG_ADDR, &write_reg, 1);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	9200      	str	r2, [sp, #0]
 8000cf4:	ab03      	add	r3, sp, #12
 8000cf6:	7e21      	ldrb	r1, [r4, #24]
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f000 fc39 	bl	8001570 <L9963E_DRV_reg_write>

    if (lock_isofreq == 1) {
 8000cfe:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d008      	beq.n	8000d18 <L9963E_addressing_procedure+0x122>
        write_reg.Bal_3.Lock_isoh_isofreq = 1;

        L9963E_DRV_reg_write(&(handle->drv_handle), L9963E_DEVICE_BROADCAST, L9963E_Bal_3_ADDR, &write_reg, 1);
    }

    return L9963E_OK;
 8000d06:	2000      	movs	r0, #0
}
 8000d08:	b004      	add	sp, #16
 8000d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        L9963E_DRV_ISOFREQ_HIGH(&(handle->drv_handle));
 8000d0e:	6863      	ldr	r3, [r4, #4]
 8000d10:	2101      	movs	r1, #1
 8000d12:	2003      	movs	r0, #3
 8000d14:	4798      	blx	r3
 8000d16:	e7d6      	b.n	8000cc6 <L9963E_addressing_procedure+0xd0>
        write_reg.generic                 = L9963E_BAL_3_DEFAULT;
 8000d18:	2500      	movs	r5, #0
 8000d1a:	9503      	str	r5, [sp, #12]
        write_reg.Bal_3.Lock_isoh_isofreq = 1;
 8000d1c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8000d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d24:	f88d 300d 	strb.w	r3, [sp, #13]
        L9963E_DRV_reg_write(&(handle->drv_handle), L9963E_DEVICE_BROADCAST, L9963E_Bal_3_ADDR, &write_reg, 1);
 8000d28:	2301      	movs	r3, #1
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	ab03      	add	r3, sp, #12
 8000d2e:	2205      	movs	r2, #5
 8000d30:	4629      	mov	r1, r5
 8000d32:	4620      	mov	r0, r4
 8000d34:	f000 fc1c 	bl	8001570 <L9963E_DRV_reg_write>
    return L9963E_OK;
 8000d38:	4628      	mov	r0, r5
 8000d3a:	e7e5      	b.n	8000d08 <L9963E_addressing_procedure+0x112>
        return L9963E_ERROR;
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	e7e3      	b.n	8000d08 <L9963E_addressing_procedure+0x112>
                return L9963E_TIMEOUT;
 8000d40:	2002      	movs	r0, #2
 8000d42:	e7e1      	b.n	8000d08 <L9963E_addressing_procedure+0x112>

08000d44 <L9963E_setCommTimeout>:
                                           uint8_t preserve_reg_value) {
    L9963E_StatusTypeDef errorcode = L9963E_OK;
    L9963E_RegisterUnionTypeDef fastch_baluv_reg;

#if L9963E_DEBUG
    if (handle == NULL) {
 8000d44:	b310      	cbz	r0, 8000d8c <L9963E_setCommTimeout+0x48>
                                           uint8_t preserve_reg_value) {
 8000d46:	b570      	push	{r4, r5, r6, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4614      	mov	r4, r2
 8000d4e:	4606      	mov	r6, r0
        return L9963E_ERROR;
    }
#endif

    if (preserve_reg_value && device != L9963E_DEVICE_BROADCAST) {
 8000d50:	b103      	cbz	r3, 8000d54 <L9963E_setCommTimeout+0x10>
 8000d52:	b98a      	cbnz	r2, 8000d78 <L9963E_setCommTimeout+0x34>

        if (errorcode != L9963E_OK) {
            return errorcode;
        }
    } else {
        fastch_baluv_reg.generic = L9963E_FASTCH_BALUV_DEFAULT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	9303      	str	r3, [sp, #12]
    }

    fastch_baluv_reg.fastch_baluv.CommTimeout = commTimeout;
 8000d58:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8000d5c:	f365 0301 	bfi	r3, r5, #0, #2
 8000d60:	f88d 300e 	strb.w	r3, [sp, #14]

    return L9963E_DRV_reg_write(
 8000d64:	230a      	movs	r3, #10
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	ab03      	add	r3, sp, #12
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	4621      	mov	r1, r4
 8000d6e:	4630      	mov	r0, r6
 8000d70:	f000 fbfe 	bl	8001570 <L9963E_DRV_reg_write>
        &(handle->drv_handle), device, L9963E_fastch_baluv_ADDR, &fastch_baluv_reg, 10);
}
 8000d74:	b004      	add	sp, #16
 8000d76:	bd70      	pop	{r4, r5, r6, pc}
        errorcode = L9963E_DRV_reg_read(&(handle->drv_handle), device, L9963E_fastch_baluv_ADDR, &fastch_baluv_reg, 10);
 8000d78:	230a      	movs	r3, #10
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	ab03      	add	r3, sp, #12
 8000d7e:	2202      	movs	r2, #2
 8000d80:	4621      	mov	r1, r4
 8000d82:	f000 fbe3 	bl	800154c <L9963E_DRV_reg_read>
        if (errorcode != L9963E_OK) {
 8000d86:	2800      	cmp	r0, #0
 8000d88:	d0e6      	beq.n	8000d58 <L9963E_setCommTimeout+0x14>
 8000d8a:	e7f3      	b.n	8000d74 <L9963E_setCommTimeout+0x30>
        return L9963E_ERROR;
 8000d8c:	2001      	movs	r0, #1
}
 8000d8e:	4770      	bx	lr

08000d90 <L9963E_set_enabled_cells>:

L9963E_StatusTypeDef L9963E_set_enabled_cells(L9963E_HandleTypeDef *handle, uint8_t device, uint16_t cells) {
 8000d90:	b500      	push	{lr}
 8000d92:	b085      	sub	sp, #20
    L9963E_RegisterUnionTypeDef vcells_en_reg = {0};
 8000d94:	2300      	movs	r3, #0
 8000d96:	9303      	str	r3, [sp, #12]

#if L9963E_DEBUG
    if (handle == NULL) {
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	f000 8092 	beq.w	8000ec2 <L9963E_set_enabled_cells+0x132>
 8000d9e:	4684      	mov	ip, r0
 8000da0:	e007      	b.n	8000db2 <L9963E_set_enabled_cells+0x22>
    for(uint8_t i=0; i<14; ++i) {
        //if(cells & (1<<i)) {
            switch (i+1)
            {
            case 1:
                vcells_en_reg.VCELLS_EN.VCELL1_EN = 1;
 8000da2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000da6:	f042 0201 	orr.w	r2, r2, #1
 8000daa:	f88d 200c 	strb.w	r2, [sp, #12]
    for(uint8_t i=0; i<14; ++i) {
 8000dae:	3301      	adds	r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b0d      	cmp	r3, #13
 8000db4:	d87b      	bhi.n	8000eae <L9963E_set_enabled_cells+0x11e>
            switch (i+1)
 8000db6:	2b0d      	cmp	r3, #13
 8000db8:	d8f9      	bhi.n	8000dae <L9963E_set_enabled_cells+0x1e>
 8000dba:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc0 <L9963E_set_enabled_cells+0x30>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000da3 	.word	0x08000da3
 8000dc4:	08000df9 	.word	0x08000df9
 8000dc8:	08000e07 	.word	0x08000e07
 8000dcc:	08000e15 	.word	0x08000e15
 8000dd0:	08000e23 	.word	0x08000e23
 8000dd4:	08000e31 	.word	0x08000e31
 8000dd8:	08000e3f 	.word	0x08000e3f
 8000ddc:	08000e4d 	.word	0x08000e4d
 8000de0:	08000e5b 	.word	0x08000e5b
 8000de4:	08000e69 	.word	0x08000e69
 8000de8:	08000e77 	.word	0x08000e77
 8000dec:	08000e85 	.word	0x08000e85
 8000df0:	08000e93 	.word	0x08000e93
 8000df4:	08000ea1 	.word	0x08000ea1
                break;
            case 2:
                vcells_en_reg.VCELLS_EN.VCELL2_EN = 1;
 8000df8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000dfc:	f042 0202 	orr.w	r2, r2, #2
 8000e00:	f88d 200c 	strb.w	r2, [sp, #12]
                break;
 8000e04:	e7d3      	b.n	8000dae <L9963E_set_enabled_cells+0x1e>
            case 3:
                vcells_en_reg.VCELLS_EN.VCELL3_EN = 1;
 8000e06:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000e0a:	f042 0204 	orr.w	r2, r2, #4
 8000e0e:	f88d 200c 	strb.w	r2, [sp, #12]
                break;
 8000e12:	e7cc      	b.n	8000dae <L9963E_set_enabled_cells+0x1e>
            case 4:
                vcells_en_reg.VCELLS_EN.VCELL4_EN = 1;
 8000e14:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000e18:	f042 0208 	orr.w	r2, r2, #8
 8000e1c:	f88d 200c 	strb.w	r2, [sp, #12]
                break;
 8000e20:	e7c5      	b.n	8000dae <L9963E_set_enabled_cells+0x1e>
            case 5:
                vcells_en_reg.VCELLS_EN.VCELL5_EN = 1;
 8000e22:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000e26:	f042 0210 	orr.w	r2, r2, #16
 8000e2a:	f88d 200c 	strb.w	r2, [sp, #12]
                break;
 8000e2e:	e7be      	b.n	8000dae <L9963E_set_enabled_cells+0x1e>
            case 6:
                vcells_en_reg.VCELLS_EN.VCELL6_EN = 1;
 8000e30:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000e34:	f042 0220 	orr.w	r2, r2, #32
 8000e38:	f88d 200c 	strb.w	r2, [sp, #12]
                break;
 8000e3c:	e7b7      	b.n	8000dae <L9963E_set_enabled_cells+0x1e>
            case 7:
                vcells_en_reg.VCELLS_EN.VCELL7_EN = 1;
 8000e3e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000e42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e46:	f88d 200c 	strb.w	r2, [sp, #12]
                break;
 8000e4a:	e7b0      	b.n	8000dae <L9963E_set_enabled_cells+0x1e>
            case 8:
                vcells_en_reg.VCELLS_EN.VCELL8_EN = 1;
 8000e4c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000e50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e54:	f88d 200c 	strb.w	r2, [sp, #12]
                break;
 8000e58:	e7a9      	b.n	8000dae <L9963E_set_enabled_cells+0x1e>
            case 9:
                vcells_en_reg.VCELLS_EN.VCELL9_EN = 1;
 8000e5a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8000e5e:	f042 0201 	orr.w	r2, r2, #1
 8000e62:	f88d 200d 	strb.w	r2, [sp, #13]
                break;
 8000e66:	e7a2      	b.n	8000dae <L9963E_set_enabled_cells+0x1e>
            case 10:
                vcells_en_reg.VCELLS_EN.VCELL10_EN = 1;
 8000e68:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8000e6c:	f042 0202 	orr.w	r2, r2, #2
 8000e70:	f88d 200d 	strb.w	r2, [sp, #13]
                break;
 8000e74:	e79b      	b.n	8000dae <L9963E_set_enabled_cells+0x1e>
            case 11:
                vcells_en_reg.VCELLS_EN.VCELL11_EN = 1;
 8000e76:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8000e7a:	f042 0204 	orr.w	r2, r2, #4
 8000e7e:	f88d 200d 	strb.w	r2, [sp, #13]
                break;
 8000e82:	e794      	b.n	8000dae <L9963E_set_enabled_cells+0x1e>
            case 12:
                vcells_en_reg.VCELLS_EN.VCELL12_EN = 1;
 8000e84:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8000e88:	f042 0208 	orr.w	r2, r2, #8
 8000e8c:	f88d 200d 	strb.w	r2, [sp, #13]
                break;
 8000e90:	e78d      	b.n	8000dae <L9963E_set_enabled_cells+0x1e>
            case 13:
                vcells_en_reg.VCELLS_EN.VCELL13_EN = 1;
 8000e92:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8000e96:	f042 0210 	orr.w	r2, r2, #16
 8000e9a:	f88d 200d 	strb.w	r2, [sp, #13]
                break;
 8000e9e:	e786      	b.n	8000dae <L9963E_set_enabled_cells+0x1e>
            case 14:
                vcells_en_reg.VCELLS_EN.VCELL14_EN = 1;
 8000ea0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8000ea4:	f042 0220 	orr.w	r2, r2, #32
 8000ea8:	f88d 200d 	strb.w	r2, [sp, #13]
                break;
 8000eac:	e77f      	b.n	8000dae <L9963E_set_enabled_cells+0x1e>
                break;
            }
        //}
    }

    return L9963E_DRV_reg_write(
 8000eae:	2314      	movs	r3, #20
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	ab03      	add	r3, sp, #12
 8000eb4:	221c      	movs	r2, #28
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	f000 fb5a 	bl	8001570 <L9963E_DRV_reg_write>
        &(handle->drv_handle), device, L9963E_VCELLS_EN_ADDR, &vcells_en_reg, 20);
}
 8000ebc:	b005      	add	sp, #20
 8000ebe:	f85d fb04 	ldr.w	pc, [sp], #4
        return L9963E_ERROR;
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	e7fa      	b.n	8000ebc <L9963E_set_enabled_cells+0x12c>
 8000ec6:	bf00      	nop

08000ec8 <L9963E_start_conversion>:

L9963E_StatusTypeDef L9963E_start_conversion(L9963E_HandleTypeDef *handle, uint8_t device, uint8_t adc_filter_soc, uint8_t options) {
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	b084      	sub	sp, #16
    L9963E_RegisterUnionTypeDef adcv_conv_reg = {0};
 8000ecc:	2400      	movs	r4, #0
 8000ece:	9403      	str	r4, [sp, #12]

#if L9963E_DEBUG
    if (handle == NULL) {
 8000ed0:	b378      	cbz	r0, 8000f32 <L9963E_start_conversion+0x6a>
 8000ed2:	4684      	mov	ip, r0
        return L9963E_ERROR;
    }
#endif

    adcv_conv_reg.ADCV_CONV.ADC_FILTER_SOC = adc_filter_soc;
 8000ed4:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8000ed8:	f362 0043 	bfi	r0, r2, #1, #3
 8000edc:	f88d 000d 	strb.w	r0, [sp, #13]

    adcv_conv_reg.ADCV_CONV.SOC = 1;
 8000ee0:	b2c2      	uxtb	r2, r0
 8000ee2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ee6:	f88d 200d 	strb.w	r2, [sp, #13]
    adcv_conv_reg.ADCV_CONV.GPIO_CONV = (options & L9963E_GPIO_CONV) != 0;
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	f363 0200 	bfi	r2, r3, #0, #1
 8000ef0:	f88d 200d 	strb.w	r2, [sp, #13]
    adcv_conv_reg.ADCV_CONV.GPIO_TERM_CONV = (options & L9963E_GPIO_TERM_CONV) != 0;
 8000ef4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
 8000ef8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000efc:	f360 12c7 	bfi	r2, r0, #7, #1
 8000f00:	f88d 200c 	strb.w	r2, [sp, #12]
    adcv_conv_reg.ADCV_CONV.BAL_TERM_CONV = (options & L9963E_BAL_TERM_CONV) != 0;
 8000f04:	f3c3 0040 	ubfx	r0, r3, #1, #1
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	f360 1245 	bfi	r2, r0, #5, #1
 8000f0e:	f88d 200c 	strb.w	r2, [sp, #12]
    adcv_conv_reg.ADCV_CONV.CELL_TERM_CONV = (options & L9963E_CELL_TERM_CONV) != 0;
 8000f12:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	f363 1286 	bfi	r2, r3, #6, #1
 8000f1c:	f88d 200c 	strb.w	r2, [sp, #12]

    return L9963E_DRV_reg_write(&(handle->drv_handle), device, L9963E_ADCV_CONV_ADDR, &adcv_conv_reg, 20);
 8000f20:	2314      	movs	r3, #20
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	ab03      	add	r3, sp, #12
 8000f26:	220d      	movs	r2, #13
 8000f28:	4660      	mov	r0, ip
 8000f2a:	f000 fb21 	bl	8001570 <L9963E_DRV_reg_write>
}
 8000f2e:	b004      	add	sp, #16
 8000f30:	bd10      	pop	{r4, pc}
        return L9963E_ERROR;
 8000f32:	2001      	movs	r0, #1
 8000f34:	e7fb      	b.n	8000f2e <L9963E_start_conversion+0x66>

08000f36 <L9963E_poll_conversion>:

L9963E_StatusTypeDef L9963E_poll_conversion(L9963E_HandleTypeDef *handle, uint8_t device, uint8_t *conversion_done) {
 8000f36:	b510      	push	{r4, lr}
 8000f38:	b084      	sub	sp, #16
    L9963E_StatusTypeDef errorcode = L9963E_OK;
    L9963E_RegisterUnionTypeDef adcv_conv_reg = {0};
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	9303      	str	r3, [sp, #12]

#if L9963E_DEBUG
    if (handle == NULL) {
 8000f3e:	b1a0      	cbz	r0, 8000f6a <L9963E_poll_conversion+0x34>
 8000f40:	4614      	mov	r4, r2
        return L9963E_ERROR;
    }
#endif

    if(device == L9963E_DEVICE_BROADCAST) {
 8000f42:	b919      	cbnz	r1, 8000f4c <L9963E_poll_conversion+0x16>
        *conversion_done = 0;
 8000f44:	7013      	strb	r3, [r2, #0]
        return L9963E_ERROR;
 8000f46:	2001      	movs	r0, #1
    if(errorcode != L9963E_OK)
        return errorcode;

    *conversion_done = !adcv_conv_reg.ADCV_CONV.SOC;
    return L9963E_OK;
}
 8000f48:	b004      	add	sp, #16
 8000f4a:	bd10      	pop	{r4, pc}
    errorcode = L9963E_DRV_reg_read(&(handle->drv_handle), device, L9963E_ADCV_CONV_ADDR, &adcv_conv_reg, 10);
 8000f4c:	230a      	movs	r3, #10
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	ab03      	add	r3, sp, #12
 8000f52:	220d      	movs	r2, #13
 8000f54:	f000 fafa 	bl	800154c <L9963E_DRV_reg_read>
    if(errorcode != L9963E_OK)
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	d1f5      	bne.n	8000f48 <L9963E_poll_conversion+0x12>
    *conversion_done = !adcv_conv_reg.ADCV_CONV.SOC;
 8000f5c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000f66:	7023      	strb	r3, [r4, #0]
    return L9963E_OK;
 8000f68:	e7ee      	b.n	8000f48 <L9963E_poll_conversion+0x12>
        return L9963E_ERROR;
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	e7ec      	b.n	8000f48 <L9963E_poll_conversion+0x12>

08000f6e <L9963E_read_cell_voltage>:

L9963E_StatusTypeDef L9963E_read_cell_voltage(L9963E_HandleTypeDef *handle, uint8_t device, L9963E_CellsTypeDef cell, uint16_t *vcell, uint8_t *data_ready) {
 8000f6e:	b530      	push	{r4, r5, lr}
 8000f70:	b085      	sub	sp, #20
    L9963E_StatusTypeDef errorcode = L9963E_OK;
    L9963E_RegisterUnionTypeDef vcell_meas_reg = {0};
 8000f72:	2400      	movs	r4, #0
 8000f74:	9403      	str	r4, [sp, #12]
    L9963E_RegistersAddrTypeDef addr;

#if L9963E_DEBUG
    if (handle == NULL) {
 8000f76:	2800      	cmp	r0, #0
 8000f78:	d06e      	beq.n	8001058 <L9963E_read_cell_voltage+0xea>
 8000f7a:	461d      	mov	r5, r3
 8000f7c:	4604      	mov	r4, r0
        return L9963E_ERROR;
    }
#endif

    if(device == L9963E_DEVICE_BROADCAST) {
 8000f7e:	b189      	cbz	r1, 8000fa4 <L9963E_read_cell_voltage+0x36>
        *vcell = 0;
        *data_ready = 0;
        return L9963E_ERROR;
    }

    switch (cell)
 8000f80:	2a80      	cmp	r2, #128	@ 0x80
 8000f82:	d055      	beq.n	8001030 <L9963E_read_cell_voltage+0xc2>
 8000f84:	d914      	bls.n	8000fb0 <L9963E_read_cell_voltage+0x42>
 8000f86:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8000f8a:	d059      	beq.n	8001040 <L9963E_read_cell_voltage+0xd2>
 8000f8c:	d840      	bhi.n	8001010 <L9963E_read_cell_voltage+0xa2>
 8000f8e:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8000f92:	d057      	beq.n	8001044 <L9963E_read_cell_voltage+0xd6>
 8000f94:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8000f98:	d056      	beq.n	8001048 <L9963E_read_cell_voltage+0xda>
 8000f9a:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8000f9e:	d155      	bne.n	800104c <L9963E_read_cell_voltage+0xde>
        break;
    case L9963E_CELL8:
        addr = L9963E_Vcell8_ADDR;
        break;
    case L9963E_CELL9:
        addr = L9963E_Vcell9_ADDR;
 8000fa0:	2229      	movs	r2, #41	@ 0x29
 8000fa2:	e01f      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
        *vcell = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	802b      	strh	r3, [r5, #0]
        *data_ready = 0;
 8000fa8:	9a08      	ldr	r2, [sp, #32]
 8000faa:	7013      	strb	r3, [r2, #0]
        return L9963E_ERROR;
 8000fac:	2001      	movs	r0, #1
 8000fae:	e029      	b.n	8001004 <L9963E_read_cell_voltage+0x96>
    switch (cell)
 8000fb0:	2a20      	cmp	r2, #32
 8000fb2:	d829      	bhi.n	8001008 <L9963E_read_cell_voltage+0x9a>
 8000fb4:	2a02      	cmp	r2, #2
 8000fb6:	d33d      	bcc.n	8001034 <L9963E_read_cell_voltage+0xc6>
 8000fb8:	3a02      	subs	r2, #2
 8000fba:	2a1e      	cmp	r2, #30
 8000fbc:	d811      	bhi.n	8000fe2 <L9963E_read_cell_voltage+0x74>
 8000fbe:	e8df f002 	tbb	[pc, r2]
 8000fc2:	103b      	.short	0x103b
 8000fc4:	1010102f 	.word	0x1010102f
 8000fc8:	10101031 	.word	0x10101031
 8000fcc:	10101010 	.word	0x10101010
 8000fd0:	10101033 	.word	0x10101033
 8000fd4:	10101010 	.word	0x10101010
 8000fd8:	10101010 	.word	0x10101010
 8000fdc:	10101010 	.word	0x10101010
 8000fe0:	35          	.byte	0x35
 8000fe1:	00          	.byte	0x00
 8000fe2:	2221      	movs	r2, #33	@ 0x21
    default:
        addr = L9963E_Vcell1_ADDR;
        break;
    }

    errorcode = L9963E_DRV_reg_read(&(handle->drv_handle), device, addr, &vcell_meas_reg, 30);
 8000fe4:	231e      	movs	r3, #30
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	ab03      	add	r3, sp, #12
 8000fea:	4620      	mov	r0, r4
 8000fec:	f000 faae 	bl	800154c <L9963E_DRV_reg_read>

    if(errorcode != L9963E_OK)
 8000ff0:	b940      	cbnz	r0, 8001004 <L9963E_read_cell_voltage+0x96>
        return errorcode;
    
    *vcell = vcell_meas_reg.Vcell1.VCell1;
 8000ff2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8000ff6:	802b      	strh	r3, [r5, #0]
    *data_ready = vcell_meas_reg.Vcell1.d_rdy_Vcell1;
 8000ff8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8000ffc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001000:	9a08      	ldr	r2, [sp, #32]
 8001002:	7013      	strb	r3, [r2, #0]

    return L9963E_OK;
}
 8001004:	b005      	add	sp, #20
 8001006:	bd30      	pop	{r4, r5, pc}
    switch (cell)
 8001008:	2a40      	cmp	r2, #64	@ 0x40
 800100a:	d117      	bne.n	800103c <L9963E_read_cell_voltage+0xce>
        addr = L9963E_Vcell7_ADDR;
 800100c:	2227      	movs	r2, #39	@ 0x27
 800100e:	e7e9      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
    switch (cell)
 8001010:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8001014:	d01c      	beq.n	8001050 <L9963E_read_cell_voltage+0xe2>
 8001016:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800101a:	d11b      	bne.n	8001054 <L9963E_read_cell_voltage+0xe6>
        addr = L9963E_Vcell14_ADDR;
 800101c:	222e      	movs	r2, #46	@ 0x2e
 800101e:	e7e1      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
        addr = L9963E_Vcell3_ADDR;
 8001020:	2223      	movs	r2, #35	@ 0x23
        break;
 8001022:	e7df      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
        addr = L9963E_Vcell4_ADDR;
 8001024:	2224      	movs	r2, #36	@ 0x24
        break;
 8001026:	e7dd      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
        addr = L9963E_Vcell5_ADDR;
 8001028:	2225      	movs	r2, #37	@ 0x25
        break;
 800102a:	e7db      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
        addr = L9963E_Vcell6_ADDR;
 800102c:	2226      	movs	r2, #38	@ 0x26
        break;
 800102e:	e7d9      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
        addr = L9963E_Vcell8_ADDR;
 8001030:	2228      	movs	r2, #40	@ 0x28
 8001032:	e7d7      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
    switch (cell)
 8001034:	2221      	movs	r2, #33	@ 0x21
 8001036:	e7d5      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
        addr = L9963E_Vcell2_ADDR;
 8001038:	2222      	movs	r2, #34	@ 0x22
 800103a:	e7d3      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
    switch (cell)
 800103c:	2221      	movs	r2, #33	@ 0x21
 800103e:	e7d1      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
        addr = L9963E_Vcell12_ADDR;
 8001040:	222c      	movs	r2, #44	@ 0x2c
 8001042:	e7cf      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
        addr = L9963E_Vcell10_ADDR;
 8001044:	222a      	movs	r2, #42	@ 0x2a
 8001046:	e7cd      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
        addr = L9963E_Vcell11_ADDR;
 8001048:	222b      	movs	r2, #43	@ 0x2b
 800104a:	e7cb      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
    switch (cell)
 800104c:	2221      	movs	r2, #33	@ 0x21
 800104e:	e7c9      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
        addr = L9963E_Vcell13_ADDR;
 8001050:	222d      	movs	r2, #45	@ 0x2d
 8001052:	e7c7      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
    switch (cell)
 8001054:	2221      	movs	r2, #33	@ 0x21
 8001056:	e7c5      	b.n	8000fe4 <L9963E_read_cell_voltage+0x76>
        return L9963E_ERROR;
 8001058:	2001      	movs	r0, #1
 800105a:	e7d3      	b.n	8001004 <L9963E_read_cell_voltage+0x96>

0800105c <L9963E_read_batt_voltage>:


L9963E_StatusTypeDef L9963E_read_batt_voltage(L9963E_HandleTypeDef *handle, uint8_t device, uint16_t *vbatt_monitor, uint32_t *vbatt_sum) {
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	b085      	sub	sp, #20
 8001060:	460c      	mov	r4, r1
    L9963E_StatusTypeDef errorcode = L9963E_OK;
    L9963E_RegisterUnionTypeDef vbattdiv_reg = {0};
 8001062:	2100      	movs	r1, #0
 8001064:	9103      	str	r1, [sp, #12]
    L9963E_RegisterUnionTypeDef vsumbatt_reg = {0};
 8001066:	9102      	str	r1, [sp, #8]

#if L9963E_DEBUG
    if (handle == NULL) {
 8001068:	b348      	cbz	r0, 80010be <L9963E_read_batt_voltage+0x62>
 800106a:	4616      	mov	r6, r2
 800106c:	461d      	mov	r5, r3
 800106e:	4607      	mov	r7, r0
        return L9963E_ERROR;
    }
#endif

    if(device == L9963E_DEVICE_BROADCAST) {
 8001070:	b924      	cbnz	r4, 800107c <L9963E_read_batt_voltage+0x20>
        *vbatt_monitor = 0;
 8001072:	8031      	strh	r1, [r6, #0]
        *vbatt_sum = 0;
 8001074:	6029      	str	r1, [r5, #0]
        return L9963E_ERROR;
 8001076:	2001      	movs	r0, #1
        return errorcode;

    *vbatt_sum = (vsumbatt_reg.VSUMBATT.vsum_batt19_2<<2) | vbattdiv_reg.VBATTDIV.vsum_batt1_0;

    return L9963E_OK;
}
 8001078:	b005      	add	sp, #20
 800107a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorcode = L9963E_DRV_reg_read(&(handle->drv_handle), device, L9963E_VBATTDIV_ADDR, &vbattdiv_reg, 10);
 800107c:	230a      	movs	r3, #10
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	ab03      	add	r3, sp, #12
 8001082:	2241      	movs	r2, #65	@ 0x41
 8001084:	4621      	mov	r1, r4
 8001086:	f000 fa61 	bl	800154c <L9963E_DRV_reg_read>
    if(errorcode != L9963E_OK)
 800108a:	2800      	cmp	r0, #0
 800108c:	d1f4      	bne.n	8001078 <L9963E_read_batt_voltage+0x1c>
    errorcode = L9963E_DRV_reg_read(&(handle->drv_handle), device, L9963E_VSUMBATT_ADDR, &vsumbatt_reg, 10);
 800108e:	230a      	movs	r3, #10
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	ab02      	add	r3, sp, #8
 8001094:	2240      	movs	r2, #64	@ 0x40
 8001096:	4621      	mov	r1, r4
 8001098:	4638      	mov	r0, r7
 800109a:	f000 fa57 	bl	800154c <L9963E_DRV_reg_read>
    *vbatt_monitor = vbattdiv_reg.VBATTDIV.VBATT_DIV;
 800109e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80010a2:	8032      	strh	r2, [r6, #0]
    if(errorcode != L9963E_OK)
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d1e7      	bne.n	8001078 <L9963E_read_batt_voltage+0x1c>
    *vbatt_sum = (vsumbatt_reg.VSUMBATT.vsum_batt19_2<<2) | vbattdiv_reg.VBATTDIV.vsum_batt1_0;
 80010a8:	9b02      	ldr	r3, [sp, #8]
 80010aa:	f3c3 0211 	ubfx	r2, r3, #0, #18
 80010ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80010ba:	602b      	str	r3, [r5, #0]
    return L9963E_OK;
 80010bc:	e7dc      	b.n	8001078 <L9963E_read_batt_voltage+0x1c>
        return L9963E_ERROR;
 80010be:	2001      	movs	r0, #1
 80010c0:	e7da      	b.n	8001078 <L9963E_read_batt_voltage+0x1c>

080010c2 <L9963E_read_gpio_voltage>:

L9963E_StatusTypeDef L9963E_read_gpio_voltage(L9963E_HandleTypeDef *handle, uint8_t device, L9963E_GpiosTypeDef gpio, uint16_t *vgpio, uint8_t *data_ready) {
 80010c2:	b530      	push	{r4, r5, lr}
 80010c4:	b085      	sub	sp, #20
    L9963E_StatusTypeDef errorcode = L9963E_OK;
    L9963E_RegisterUnionTypeDef vgpio_meas_reg = {0};
 80010c6:	2400      	movs	r4, #0
 80010c8:	9403      	str	r4, [sp, #12]
    L9963E_RegistersAddrTypeDef addr;

#if L9963E_DEBUG
    if (handle == NULL) {
 80010ca:	2800      	cmp	r0, #0
 80010cc:	d047      	beq.n	800115e <L9963E_read_gpio_voltage+0x9c>
 80010ce:	461d      	mov	r5, r3
 80010d0:	4604      	mov	r4, r0
        return L9963E_ERROR;
    }
#endif

    switch (gpio)
 80010d2:	2a20      	cmp	r2, #32
 80010d4:	d81f      	bhi.n	8001116 <L9963E_read_gpio_voltage+0x54>
 80010d6:	2a02      	cmp	r2, #2
 80010d8:	d329      	bcc.n	800112e <L9963E_read_gpio_voltage+0x6c>
 80010da:	3a02      	subs	r2, #2
 80010dc:	2a1e      	cmp	r2, #30
 80010de:	d811      	bhi.n	8001104 <L9963E_read_gpio_voltage+0x42>
 80010e0:	e8df f002 	tbb	[pc, r2]
 80010e4:	101d1027 	.word	0x101d1027
 80010e8:	101f1010 	.word	0x101f1010
 80010ec:	10101010 	.word	0x10101010
 80010f0:	10211010 	.word	0x10211010
 80010f4:	10101010 	.word	0x10101010
 80010f8:	10101010 	.word	0x10101010
 80010fc:	10101010 	.word	0x10101010
 8001100:	1010      	.short	0x1010
 8001102:	23          	.byte	0x23
 8001103:	00          	.byte	0x00
 8001104:	2234      	movs	r2, #52	@ 0x34
    default:
        addr = L9963E_GPIO3_MEAS_ADDR;
        break;
    }

    if(device == L9963E_DEVICE_BROADCAST) {
 8001106:	b9c1      	cbnz	r1, 800113a <L9963E_read_gpio_voltage+0x78>
        *vgpio = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	802b      	strh	r3, [r5, #0]
        *data_ready = 0;
 800110c:	9a08      	ldr	r2, [sp, #32]
 800110e:	7013      	strb	r3, [r2, #0]
        return L9963E_ERROR;
 8001110:	2001      	movs	r0, #1
    
    *vgpio = vgpio_meas_reg.GPIO3_MEAS.GPIO3_MEAS;
    *data_ready = vgpio_meas_reg.GPIO3_MEAS.d_rdy_gpio3;

    return L9963E_OK;
}
 8001112:	b005      	add	sp, #20
 8001114:	bd30      	pop	{r4, r5, pc}
    switch (gpio)
 8001116:	2a40      	cmp	r2, #64	@ 0x40
 8001118:	d10d      	bne.n	8001136 <L9963E_read_gpio_voltage+0x74>
        addr = L9963E_GPIO9_MEAS_ADDR;
 800111a:	223a      	movs	r2, #58	@ 0x3a
 800111c:	e7f3      	b.n	8001106 <L9963E_read_gpio_voltage+0x44>
        addr = L9963E_GPIO5_MEAS_ADDR;
 800111e:	2236      	movs	r2, #54	@ 0x36
        break;
 8001120:	e7f1      	b.n	8001106 <L9963E_read_gpio_voltage+0x44>
        addr = L9963E_GPIO6_MEAS_ADDR;
 8001122:	2237      	movs	r2, #55	@ 0x37
        break;
 8001124:	e7ef      	b.n	8001106 <L9963E_read_gpio_voltage+0x44>
        addr = L9963E_GPIO7_MEAS_ADDR;
 8001126:	2238      	movs	r2, #56	@ 0x38
        break;
 8001128:	e7ed      	b.n	8001106 <L9963E_read_gpio_voltage+0x44>
        addr = L9963E_GPIO8_MEAS_ADDR;
 800112a:	2239      	movs	r2, #57	@ 0x39
        break;
 800112c:	e7eb      	b.n	8001106 <L9963E_read_gpio_voltage+0x44>
    switch (gpio)
 800112e:	2234      	movs	r2, #52	@ 0x34
 8001130:	e7e9      	b.n	8001106 <L9963E_read_gpio_voltage+0x44>
        addr = L9963E_GPIO4_MEAS_ADDR;
 8001132:	2235      	movs	r2, #53	@ 0x35
 8001134:	e7e7      	b.n	8001106 <L9963E_read_gpio_voltage+0x44>
    switch (gpio)
 8001136:	2234      	movs	r2, #52	@ 0x34
 8001138:	e7e5      	b.n	8001106 <L9963E_read_gpio_voltage+0x44>
    errorcode = L9963E_DRV_reg_read(&(handle->drv_handle), device, addr, &vgpio_meas_reg, 10);
 800113a:	230a      	movs	r3, #10
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	ab03      	add	r3, sp, #12
 8001140:	4620      	mov	r0, r4
 8001142:	f000 fa03 	bl	800154c <L9963E_DRV_reg_read>
    if(errorcode != L9963E_OK)
 8001146:	2800      	cmp	r0, #0
 8001148:	d1e3      	bne.n	8001112 <L9963E_read_gpio_voltage+0x50>
    *vgpio = vgpio_meas_reg.GPIO3_MEAS.GPIO3_MEAS;
 800114a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800114e:	802b      	strh	r3, [r5, #0]
    *data_ready = vgpio_meas_reg.GPIO3_MEAS.d_rdy_gpio3;
 8001150:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001154:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001158:	9a08      	ldr	r2, [sp, #32]
 800115a:	7013      	strb	r3, [r2, #0]
    return L9963E_OK;
 800115c:	e7d9      	b.n	8001112 <L9963E_read_gpio_voltage+0x50>
        return L9963E_ERROR;
 800115e:	2001      	movs	r0, #1
 8001160:	e7d7      	b.n	8001112 <L9963E_read_gpio_voltage+0x50>

08001162 <L9963E_read_current_mA>:

L9963E_StatusTypeDef L9963E_read_current_mA(L9963E_HandleTypeDef *handle, uint8_t device, L9963E_RegistersAddrTypeDef addr, uint32_t *raw_current_mA){
 8001162:	b570      	push	{r4, r5, r6, lr}
 8001164:	b084      	sub	sp, #16
    L9963E_StatusTypeDef errorcode = L9963E_OK;
    L9963E_RegisterUnionTypeDef vcurrent_reg = {0};
 8001166:	2400      	movs	r4, #0
 8001168:	9403      	str	r4, [sp, #12]

#if L9963E_DEBUG
    if (handle == NULL) {
 800116a:	b1e0      	cbz	r0, 80011a6 <L9963E_read_current_mA+0x44>
 800116c:	4616      	mov	r6, r2
 800116e:	461d      	mov	r5, r3
        return L9963E_ERROR;
    }
#endif

    if(device == L9963E_DEVICE_BROADCAST) {
 8001170:	b921      	cbnz	r1, 800117c <L9963E_read_current_mA+0x1a>
        *raw_current_mA = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	602b      	str	r3, [r5, #0]
        return L9963E_ERROR;
 8001176:	2001      	movs	r0, #1
        default: //*used only for not create a warning on compile time
            break;
    }

    return L9963E_OK;
}
 8001178:	b004      	add	sp, #16
 800117a:	bd70      	pop	{r4, r5, r6, pc}
    errorcode = L9963E_DRV_reg_read(&(handle->drv_handle), device, addr, &vcurrent_reg, 10);
 800117c:	230a      	movs	r3, #10
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	ab03      	add	r3, sp, #12
 8001182:	f000 f9e3 	bl	800154c <L9963E_DRV_reg_read>
    if(errorcode != L9963E_OK)
 8001186:	2800      	cmp	r0, #0
 8001188:	d1f6      	bne.n	8001178 <L9963E_read_current_mA+0x16>
    switch(addr){
 800118a:	2e2f      	cmp	r6, #47	@ 0x2f
 800118c:	d006      	beq.n	800119c <L9963E_read_current_mA+0x3a>
 800118e:	2e30      	cmp	r6, #48	@ 0x30
 8001190:	d1f2      	bne.n	8001178 <L9963E_read_current_mA+0x16>
            *raw_current_mA = vcurrent_reg.Ibattery_calib.CUR_INST_calib;
 8001192:	9b03      	ldr	r3, [sp, #12]
 8001194:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001198:	602b      	str	r3, [r5, #0]
            break;
 800119a:	e7ed      	b.n	8001178 <L9963E_read_current_mA+0x16>
            *raw_current_mA = vcurrent_reg.Ibattery_synch.CUR_INST_Synch;
 800119c:	9b03      	ldr	r3, [sp, #12]
 800119e:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80011a2:	602b      	str	r3, [r5, #0]
            break;
 80011a4:	e7e8      	b.n	8001178 <L9963E_read_current_mA+0x16>
        return L9963E_ERROR;
 80011a6:	2001      	movs	r0, #1
 80011a8:	e7e6      	b.n	8001178 <L9963E_read_current_mA+0x16>

080011aa <L9963E_enable_vref>:
L9963E_StatusTypeDef L9963E_enable_vref(L9963E_HandleTypeDef *handle, uint8_t device, uint8_t preserve_reg_value) {
    L9963E_StatusTypeDef errorcode = L9963E_OK;
    L9963E_RegisterUnionTypeDef ncycle_prog2_reg;

#if L9963E_DEBUG
    if (handle == NULL) {
 80011aa:	b310      	cbz	r0, 80011f2 <L9963E_enable_vref+0x48>
L9963E_StatusTypeDef L9963E_enable_vref(L9963E_HandleTypeDef *handle, uint8_t device, uint8_t preserve_reg_value) {
 80011ac:	b530      	push	{r4, r5, lr}
 80011ae:	b085      	sub	sp, #20
 80011b0:	460c      	mov	r4, r1
 80011b2:	4605      	mov	r5, r0
        return L9963E_ERROR;
    }
#endif

    if (preserve_reg_value && device != L9963E_DEVICE_BROADCAST) {
 80011b4:	b102      	cbz	r2, 80011b8 <L9963E_enable_vref+0xe>
 80011b6:	b999      	cbnz	r1, 80011e0 <L9963E_enable_vref+0x36>

        if (errorcode != L9963E_OK) {
            return errorcode;
        }
    } else {
        ncycle_prog2_reg.generic = L9963E_FASTCH_BALUV_DEFAULT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	9303      	str	r3, [sp, #12]
    }

    ncycle_prog2_reg.generic = L9963E_NCYCLE_PROG_2_DEFAULT;
 80011bc:	2300      	movs	r3, #0
 80011be:	9303      	str	r3, [sp, #12]
    ncycle_prog2_reg.NCYCLE_PROG_2.VTREF_EN = 1;
 80011c0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	f88d 300e 	strb.w	r3, [sp, #14]
    return L9963E_DRV_reg_write(&(handle->drv_handle), device, L9963E_NCYCLE_PROG_2_ADDR, &ncycle_prog2_reg, 10);
 80011cc:	230a      	movs	r3, #10
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	ab03      	add	r3, sp, #12
 80011d2:	220f      	movs	r2, #15
 80011d4:	4621      	mov	r1, r4
 80011d6:	4628      	mov	r0, r5
 80011d8:	f000 f9ca 	bl	8001570 <L9963E_DRV_reg_write>
 80011dc:	b005      	add	sp, #20
 80011de:	bd30      	pop	{r4, r5, pc}
        errorcode = L9963E_DRV_reg_read(&(handle->drv_handle), device, L9963E_fastch_baluv_ADDR, &ncycle_prog2_reg, 10);
 80011e0:	230a      	movs	r3, #10
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	ab03      	add	r3, sp, #12
 80011e6:	2202      	movs	r2, #2
 80011e8:	f000 f9b0 	bl	800154c <L9963E_DRV_reg_read>
        if (errorcode != L9963E_OK) {
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d0e5      	beq.n	80011bc <L9963E_enable_vref+0x12>
 80011f0:	e7f4      	b.n	80011dc <L9963E_enable_vref+0x32>
        return L9963E_ERROR;
 80011f2:	2001      	movs	r0, #1
 80011f4:	4770      	bx	lr
	...

080011f8 <L9963E_DRV_crc_calc>:
uint8_t crc6_lut[64] = {0x0,  0x19, 0x32, 0x2b, 0x3d, 0x24, 0xf,  0x16, 0x23, 0x3a, 0x11, 0x8,  0x1e, 0x7,  0x2c, 0x35,
                        0x1f, 0x6,  0x2d, 0x34, 0x22, 0x3b, 0x10, 0x9,  0x3c, 0x25, 0xe,  0x17, 0x1,  0x18, 0x33, 0x2a,
                        0x3e, 0x27, 0xc,  0x15, 0x3,  0x1a, 0x31, 0x28, 0x1d, 0x4,  0x2f, 0x36, 0x20, 0x39, 0x12, 0xb,
                        0x21, 0x38, 0x13, 0xa,  0x1c, 0x5,  0x2e, 0x37, 0x2,  0x1b, 0x30, 0x29, 0x3f, 0x26, 0xd,  0x14};

uint8_t L9963E_DRV_crc_calc(uint64_t InputWord) {
 80011f8:	b570      	push	{r4, r5, r6, lr}
    uint64_t TestBitMask;
    uint64_t CRCMask;
    uint8_t BitCount;
    uint8_t crc = 0;

    InputWord = (InputWord & 0xFFFFFFFFC0) ^ CRC_INIT_SEED_MASK; /* Clear the CRC bit in the data frame*/
 80011fa:	b2c9      	uxtb	r1, r1
 80011fc:	f020 043f 	bic.w	r4, r0, #63	@ 0x3f
 8001200:	f081 01e0 	eor.w	r1, r1, #224	@ 0xe0

    // first 4 bit executed as standard crc (shift and xor)
    // in order to reach a multiple of CRC_LEN data length
    TestBitMask = FIRST_BIT_MASK;
    CRCMask     = CRC_INIT_MASK;  // 1111 <<
    BitCount    = WORD_LEN % CRC_LEN;
 8001204:	2004      	movs	r0, #4
    CRCMask     = CRC_INIT_MASK;  // 1111 <<
 8001206:	f04f 0c00 	mov.w	ip, #0
 800120a:	26b2      	movs	r6, #178	@ 0xb2
    TestBitMask = FIRST_BIT_MASK;
 800120c:	4663      	mov	r3, ip
 800120e:	2580      	movs	r5, #128	@ 0x80
    while (0 != BitCount--) {
 8001210:	e009      	b.n	8001226 <L9963E_DRV_crc_calc+0x2e>
        if (0 != (InputWord & TestBitMask)) {
            InputWord ^= CRCMask;
        } /* endif */
        CRCMask >>= 1;
 8001212:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8001216:	ea4c 7cc6 	orr.w	ip, ip, r6, lsl #31
 800121a:	0876      	lsrs	r6, r6, #1
        TestBitMask >>= 1;
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
 8001222:	086d      	lsrs	r5, r5, #1
    while (0 != BitCount--) {
 8001224:	4670      	mov	r0, lr
 8001226:	1e42      	subs	r2, r0, #1
 8001228:	fa5f fe82 	uxtb.w	lr, r2
 800122c:	b148      	cbz	r0, 8001242 <L9963E_DRV_crc_calc+0x4a>
        if (0 != (InputWord & TestBitMask)) {
 800122e:	ea04 0203 	and.w	r2, r4, r3
 8001232:	ea01 0005 	and.w	r0, r1, r5
 8001236:	4302      	orrs	r2, r0
 8001238:	d0eb      	beq.n	8001212 <L9963E_DRV_crc_calc+0x1a>
            InputWord ^= CRCMask;
 800123a:	ea84 040c 	eor.w	r4, r4, ip
 800123e:	4071      	eors	r1, r6
 8001240:	e7e7      	b.n	8001212 <L9963E_DRV_crc_calc+0x1a>
    } /* endwhile */

    // then proceed with a lut-based calculation
    for (int8_t i = WORD_LEN - (WORD_LEN % CRC_LEN) - CRC_LEN; i > 0; i -= CRC_LEN) {
 8001242:	221e      	movs	r2, #30
 8001244:	e014      	b.n	8001270 <L9963E_DRV_crc_calc+0x78>
        crc = crc6_lut[((InputWord >> i) & 0b111111) ^ crc];
 8001246:	f1c2 0e20 	rsb	lr, r2, #32
 800124a:	f1a2 0c20 	sub.w	ip, r2, #32
 800124e:	fa24 f302 	lsr.w	r3, r4, r2
 8001252:	fa01 fe0e 	lsl.w	lr, r1, lr
 8001256:	ea43 030e 	orr.w	r3, r3, lr
 800125a:	fa21 fc0c 	lsr.w	ip, r1, ip
 800125e:	ea43 030c 	orr.w	r3, r3, ip
 8001262:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001266:	4043      	eors	r3, r0
 8001268:	4803      	ldr	r0, [pc, #12]	@ (8001278 <L9963E_DRV_crc_calc+0x80>)
 800126a:	5cc0      	ldrb	r0, [r0, r3]
    for (int8_t i = WORD_LEN - (WORD_LEN % CRC_LEN) - CRC_LEN; i > 0; i -= CRC_LEN) {
 800126c:	3a06      	subs	r2, #6
 800126e:	b252      	sxtb	r2, r2
 8001270:	2a00      	cmp	r2, #0
 8001272:	dce8      	bgt.n	8001246 <L9963E_DRV_crc_calc+0x4e>
    }

    return crc;
}
 8001274:	bd70      	pop	{r4, r5, r6, pc}
 8001276:	bf00      	nop
 8001278:	20000000 	.word	0x20000000

0800127c <L9963E_DRV_init>:

L9963E_StatusTypeDef L9963E_DRV_init(L9963E_DRV_HandleTypeDef *handle, L9963E_IfTypeDef interface) {
 800127c:	b084      	sub	sp, #16
 800127e:	b538      	push	{r3, r4, r5, lr}
 8001280:	f10d 0c14 	add.w	ip, sp, #20
 8001284:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
#if L9963E_DEBUG
    if (handle == NULL) {
 8001288:	b350      	cbz	r0, 80012e0 <L9963E_DRV_init+0x64>
 800128a:	4604      	mov	r4, r0
        return L9963E_ERROR;
    }

    if (interface.L9963E_IF_GPIO_ReadPin == NULL) {
 800128c:	b351      	cbz	r1, 80012e4 <L9963E_DRV_init+0x68>
        return L9963E_ERROR;
    }

    if (interface.L9963E_IF_GPIO_WritePin == NULL) {
 800128e:	4615      	mov	r5, r2
 8001290:	b352      	cbz	r2, 80012e8 <L9963E_DRV_init+0x6c>
        return L9963E_ERROR;
    }

    if (interface.L9963E_IF_SPI_Receive == NULL) {
 8001292:	9b07      	ldr	r3, [sp, #28]
 8001294:	b353      	cbz	r3, 80012ec <L9963E_DRV_init+0x70>
        return L9963E_ERROR;
    }

    if (interface.L9963E_IF_SPI_Transmit == NULL) {
 8001296:	9b08      	ldr	r3, [sp, #32]
 8001298:	b353      	cbz	r3, 80012f0 <L9963E_DRV_init+0x74>
        return L9963E_ERROR;
    }

    if (interface.L9963E_IF_GetTickMs == NULL) {
 800129a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800129c:	b353      	cbz	r3, 80012f4 <L9963E_DRV_init+0x78>
        return L9963E_ERROR;
    }

    if (interface.L9963E_IF_DelayMs == NULL) {
 800129e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80012a0:	b353      	cbz	r3, 80012f8 <L9963E_DRV_init+0x7c>
        return L9963E_ERROR;
    }
#endif

    handle->interface = interface;
 80012a2:	4684      	mov	ip, r0
 80012a4:	f10d 0e14 	add.w	lr, sp, #20
 80012a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80012ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80012b0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80012b4:	e88c 0003 	stmia.w	ip, {r0, r1}

    L9963E_DRV_CS_HIGH(handle);
 80012b8:	2101      	movs	r1, #1
 80012ba:	2000      	movs	r0, #0
 80012bc:	47a8      	blx	r5
    L9963E_DRV_TXEN_HIGH(handle);
 80012be:	6863      	ldr	r3, [r4, #4]
 80012c0:	2101      	movs	r1, #1
 80012c2:	4608      	mov	r0, r1
 80012c4:	4798      	blx	r3
    L9963E_DRV_ISOFREQ_LOW(handle);
 80012c6:	6863      	ldr	r3, [r4, #4]
 80012c8:	2100      	movs	r1, #0
 80012ca:	2003      	movs	r0, #3
 80012cc:	4798      	blx	r3
    L9963E_DRV_DIS_LOW(handle);
 80012ce:	6863      	ldr	r3, [r4, #4]
 80012d0:	2100      	movs	r1, #0
 80012d2:	2004      	movs	r0, #4
 80012d4:	4798      	blx	r3

    return L9963E_OK;
 80012d6:	2000      	movs	r0, #0
}
 80012d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80012dc:	b004      	add	sp, #16
 80012de:	4770      	bx	lr
        return L9963E_ERROR;
 80012e0:	2001      	movs	r0, #1
 80012e2:	e7f9      	b.n	80012d8 <L9963E_DRV_init+0x5c>
        return L9963E_ERROR;
 80012e4:	2001      	movs	r0, #1
 80012e6:	e7f7      	b.n	80012d8 <L9963E_DRV_init+0x5c>
        return L9963E_ERROR;
 80012e8:	2001      	movs	r0, #1
 80012ea:	e7f5      	b.n	80012d8 <L9963E_DRV_init+0x5c>
        return L9963E_ERROR;
 80012ec:	2001      	movs	r0, #1
 80012ee:	e7f3      	b.n	80012d8 <L9963E_DRV_init+0x5c>
        return L9963E_ERROR;
 80012f0:	2001      	movs	r0, #1
 80012f2:	e7f1      	b.n	80012d8 <L9963E_DRV_init+0x5c>
        return L9963E_ERROR;
 80012f4:	2001      	movs	r0, #1
 80012f6:	e7ef      	b.n	80012d8 <L9963E_DRV_init+0x5c>
        return L9963E_ERROR;
 80012f8:	2001      	movs	r0, #1
 80012fa:	e7ed      	b.n	80012d8 <L9963E_DRV_init+0x5c>

080012fc <L9963E_DRV_wakeup>:

L9963E_StatusTypeDef L9963E_DRV_wakeup(L9963E_DRV_HandleTypeDef *handle) {
 80012fc:	b538      	push	{r3, r4, r5, lr}
    static const uint8_t dummy[5]  = {0x55, 0x55, 0x55, 0x55, 0x55};
    L9963E_StatusTypeDef errorcode = L9963E_OK;

#if L9963E_DEBUG
    if (handle == NULL) {
 80012fe:	b180      	cbz	r0, 8001322 <L9963E_DRV_wakeup+0x26>
 8001300:	4605      	mov	r5, r0
        return L9963E_ERROR;
    }
#endif

    L9963E_DRV_CS_LOW(handle);
 8001302:	6843      	ldr	r3, [r0, #4]
 8001304:	2100      	movs	r1, #0
 8001306:	4608      	mov	r0, r1
 8001308:	4798      	blx	r3
    errorcode = L9963E_DRV_SPI_RECEIVE(handle, (uint8_t *)dummy, sizeof(dummy), 10);
 800130a:	68ab      	ldr	r3, [r5, #8]
 800130c:	220a      	movs	r2, #10
 800130e:	2105      	movs	r1, #5
 8001310:	4805      	ldr	r0, [pc, #20]	@ (8001328 <L9963E_DRV_wakeup+0x2c>)
 8001312:	4798      	blx	r3
 8001314:	4604      	mov	r4, r0
    L9963E_DRV_CS_HIGH(handle);
 8001316:	686b      	ldr	r3, [r5, #4]
 8001318:	2101      	movs	r1, #1
 800131a:	2000      	movs	r0, #0
 800131c:	4798      	blx	r3

    return errorcode;
}
 800131e:	4620      	mov	r0, r4
 8001320:	bd38      	pop	{r3, r4, r5, pc}
        return L9963E_ERROR;
 8001322:	2401      	movs	r4, #1
 8001324:	e7fb      	b.n	800131e <L9963E_DRV_wakeup+0x22>
 8001326:	bf00      	nop
 8001328:	08005958 	.word	0x08005958

0800132c <_L9963E_DRV_switch_endianness>:

void _L9963E_DRV_switch_endianness(uint8_t *in, uint8_t *out) {
    out[0] = in[4];
 800132c:	7903      	ldrb	r3, [r0, #4]
 800132e:	700b      	strb	r3, [r1, #0]
    out[1] = in[3];
 8001330:	78c3      	ldrb	r3, [r0, #3]
 8001332:	704b      	strb	r3, [r1, #1]
    out[2] = in[2];
 8001334:	7883      	ldrb	r3, [r0, #2]
 8001336:	708b      	strb	r3, [r1, #2]
    out[3] = in[1];
 8001338:	7843      	ldrb	r3, [r0, #1]
 800133a:	70cb      	strb	r3, [r1, #3]
    out[4] = in[0];
 800133c:	7803      	ldrb	r3, [r0, #0]
 800133e:	710b      	strb	r3, [r1, #4]

    return;
}
 8001340:	4770      	bx	lr

08001342 <_L9963E_DRV_build_frame>:
L9963E_StatusTypeDef _L9963E_DRV_build_frame(uint8_t *out,
                                             uint8_t pa,
                                             uint8_t rw_burst,
                                             uint8_t devid,
                                             uint8_t addr_command,
                                             uint32_t data) {
 8001342:	b510      	push	{r4, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	4604      	mov	r4, r0
 8001348:	f89d c010 	ldrb.w	ip, [sp, #16]
    union L9963E_DRV_FrameUnion frame;
    frame.cmd.pa       = pa;
 800134c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001350:	f361 10c7 	bfi	r0, r1, #7, #1
 8001354:	f88d 0004 	strb.w	r0, [sp, #4]
    frame.cmd.rw_burst = rw_burst;
 8001358:	b2c1      	uxtb	r1, r0
 800135a:	f362 1186 	bfi	r1, r2, #6, #1
 800135e:	f88d 1004 	strb.w	r1, [sp, #4]
    frame.cmd.devid    = devid;
 8001362:	b2ca      	uxtb	r2, r1
 8001364:	f363 0245 	bfi	r2, r3, #1, #5
 8001368:	f88d 2004 	strb.w	r2, [sp, #4]
    frame.cmd.addr     = addr_command;
 800136c:	f00c 023f 	and.w	r2, ip, #63	@ 0x3f
 8001370:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800137c:	f88d 3003 	strb.w	r3, [sp, #3]
 8001380:	f3cc 1c80 	ubfx	ip, ip, #6, #1
 8001384:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	ea43 030c 	orr.w	r3, r3, ip
 8001390:	f88d 3004 	strb.w	r3, [sp, #4]
    frame.cmd.data     = data;
 8001394:	9b00      	ldr	r3, [sp, #0]
 8001396:	9a05      	ldr	r2, [sp, #20]
 8001398:	f362 1397 	bfi	r3, r2, #6, #18
 800139c:	9300      	str	r3, [sp, #0]
    frame.cmd.crc      = L9963E_DRV_crc_calc(frame.val);
 800139e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80013a2:	f7ff ff29 	bl	80011f8 <L9963E_DRV_crc_calc>
 80013a6:	f89d 3000 	ldrb.w	r3, [sp]
 80013aa:	f360 0305 	bfi	r3, r0, #0, #6
 80013ae:	f88d 3000 	strb.w	r3, [sp]

    _L9963E_DRV_switch_endianness((uint8_t *)&frame.val, out);
 80013b2:	4621      	mov	r1, r4
 80013b4:	4668      	mov	r0, sp
 80013b6:	f7ff ffb9 	bl	800132c <_L9963E_DRV_switch_endianness>

    return L9963E_OK;
}
 80013ba:	2000      	movs	r0, #0
 80013bc:	b002      	add	sp, #8
 80013be:	bd10      	pop	{r4, pc}

080013c0 <_L9963E_DRV_spi_transmit>:

L9963E_StatusTypeDef _L9963E_DRV_spi_transmit(L9963E_DRV_HandleTypeDef *handle,
                                              uint8_t *data,
                                              uint8_t len,
                                              uint8_t timeout) {
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	4604      	mov	r4, r0
 80013c4:	460d      	mov	r5, r1
 80013c6:	4616      	mov	r6, r2
 80013c8:	461f      	mov	r7, r3
    L9963E_StatusTypeDef errorcode = L9963E_OK;

    L9963E_DRV_TXEN_HIGH(handle);
 80013ca:	6843      	ldr	r3, [r0, #4]
 80013cc:	2101      	movs	r1, #1
 80013ce:	4608      	mov	r0, r1
 80013d0:	4798      	blx	r3
    L9963E_DRV_CS_LOW(handle);
 80013d2:	6863      	ldr	r3, [r4, #4]
 80013d4:	2100      	movs	r1, #0
 80013d6:	4608      	mov	r0, r1
 80013d8:	4798      	blx	r3
    errorcode = L9963E_DRV_SPI_TRANSMIT(handle, data, len, timeout);
 80013da:	68e3      	ldr	r3, [r4, #12]
 80013dc:	463a      	mov	r2, r7
 80013de:	4631      	mov	r1, r6
 80013e0:	4628      	mov	r0, r5
 80013e2:	4798      	blx	r3
 80013e4:	4605      	mov	r5, r0
    L9963E_DRV_TXEN_LOW(handle);
 80013e6:	6863      	ldr	r3, [r4, #4]
 80013e8:	2100      	movs	r1, #0
 80013ea:	2001      	movs	r0, #1
 80013ec:	4798      	blx	r3
    L9963E_DRV_CS_HIGH(handle);
 80013ee:	6863      	ldr	r3, [r4, #4]
 80013f0:	2101      	movs	r1, #1
 80013f2:	2000      	movs	r0, #0
 80013f4:	4798      	blx	r3

    return errorcode;
}
 80013f6:	4628      	mov	r0, r5
 80013f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080013fc <_L9963E_DRV_wait_and_receive>:

L9963E_StatusTypeDef _L9963E_DRV_wait_and_receive(union L9963E_DRV_FrameUnion *frame,
                                                  L9963E_DRV_HandleTypeDef *handle,
                                                  uint8_t device,
                                                  uint32_t current_tick,
                                                  uint8_t timeout) {
 80013fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001400:	b083      	sub	sp, #12
 8001402:	4607      	mov	r7, r0
 8001404:	460c      	mov	r4, r1
 8001406:	4690      	mov	r8, r2
 8001408:	461d      	mov	r5, r3
 800140a:	f89d 6028 	ldrb.w	r6, [sp, #40]	@ 0x28
    uint8_t raw[5];
    L9963E_StatusTypeDef errorcode = L9963E_OK;

    frame->cmd.addr  = -1;
 800140e:	78c3      	ldrb	r3, [r0, #3]
 8001410:	f063 0303 	orn	r3, r3, #3
 8001414:	70c3      	strb	r3, [r0, #3]
 8001416:	7903      	ldrb	r3, [r0, #4]
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	7103      	strb	r3, [r0, #4]
    frame->cmd.devid = -1;
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f043 033e 	orr.w	r3, r3, #62	@ 0x3e
 8001424:	7103      	strb	r3, [r0, #4]
    frame->cmd.data  = -1;
 8001426:	6803      	ldr	r3, [r0, #0]
 8001428:	4a24      	ldr	r2, [pc, #144]	@ (80014bc <_L9963E_DRV_wait_and_receive+0xc0>)
 800142a:	f362 1397 	bfi	r3, r2, #6, #18
 800142e:	6003      	str	r3, [r0, #0]

    L9963E_DRV_TXEN_LOW(handle);
 8001430:	684b      	ldr	r3, [r1, #4]
 8001432:	2100      	movs	r1, #0
 8001434:	2001      	movs	r0, #1
 8001436:	4798      	blx	r3
    while (frame->cmd.devid != device) {
 8001438:	793b      	ldrb	r3, [r7, #4]
 800143a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800143e:	4543      	cmp	r3, r8
 8001440:	d038      	beq.n	80014b4 <_L9963E_DRV_wait_and_receive+0xb8>
        while (L9963E_DRV_BNE_READ(handle) == L9963E_IF_GPIO_PIN_RESET) {
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	2002      	movs	r0, #2
 8001446:	4798      	blx	r3
 8001448:	b970      	cbnz	r0, 8001468 <_L9963E_DRV_wait_and_receive+0x6c>
            if (L9963E_DRV_GETTICK(handle) - current_tick >= timeout) {
 800144a:	6923      	ldr	r3, [r4, #16]
 800144c:	4798      	blx	r3
 800144e:	1b40      	subs	r0, r0, r5
 8001450:	42b0      	cmp	r0, r6
 8001452:	d3f6      	bcc.n	8001442 <_L9963E_DRV_wait_and_receive+0x46>
                L9963E_DRV_TXEN_HIGH(handle);
 8001454:	6863      	ldr	r3, [r4, #4]
 8001456:	2101      	movs	r1, #1
 8001458:	4608      	mov	r0, r1
 800145a:	4798      	blx	r3
                return L9963E_TIMEOUT;
 800145c:	f04f 0902 	mov.w	r9, #2
            return L9963E_CRC_ERROR;
        }
    }

    return L9963E_OK;
}
 8001460:	4648      	mov	r0, r9
 8001462:	b003      	add	sp, #12
 8001464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        L9963E_DRV_CS_LOW(handle);
 8001468:	6863      	ldr	r3, [r4, #4]
 800146a:	2100      	movs	r1, #0
 800146c:	4608      	mov	r0, r1
 800146e:	4798      	blx	r3
        errorcode = L9963E_DRV_SPI_RECEIVE(handle, raw, 5, 10);
 8001470:	68a3      	ldr	r3, [r4, #8]
 8001472:	220a      	movs	r2, #10
 8001474:	2105      	movs	r1, #5
 8001476:	4668      	mov	r0, sp
 8001478:	4798      	blx	r3
 800147a:	4681      	mov	r9, r0
        L9963E_DRV_CS_HIGH(handle);
 800147c:	6863      	ldr	r3, [r4, #4]
 800147e:	2101      	movs	r1, #1
 8001480:	2000      	movs	r0, #0
 8001482:	4798      	blx	r3
        L9963E_DRV_TXEN_HIGH(handle);
 8001484:	6863      	ldr	r3, [r4, #4]
 8001486:	2101      	movs	r1, #1
 8001488:	4608      	mov	r0, r1
 800148a:	4798      	blx	r3
        if (errorcode != L9963E_OK) {
 800148c:	f1b9 0f00 	cmp.w	r9, #0
 8001490:	d1e6      	bne.n	8001460 <_L9963E_DRV_wait_and_receive+0x64>
        _L9963E_DRV_switch_endianness(raw, (uint8_t *)&frame->val);
 8001492:	4639      	mov	r1, r7
 8001494:	4668      	mov	r0, sp
 8001496:	f7ff ff49 	bl	800132c <_L9963E_DRV_switch_endianness>
        if (frame->cmd.crc != L9963E_DRV_crc_calc(frame->val)) {
 800149a:	f897 9000 	ldrb.w	r9, [r7]
 800149e:	f009 093f 	and.w	r9, r9, #63	@ 0x3f
 80014a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014a6:	f7ff fea7 	bl	80011f8 <L9963E_DRV_crc_calc>
 80014aa:	4581      	cmp	r9, r0
 80014ac:	d0c4      	beq.n	8001438 <_L9963E_DRV_wait_and_receive+0x3c>
            return L9963E_CRC_ERROR;
 80014ae:	f04f 0903 	mov.w	r9, #3
 80014b2:	e7d5      	b.n	8001460 <_L9963E_DRV_wait_and_receive+0x64>
    return L9963E_OK;
 80014b4:	f04f 0900 	mov.w	r9, #0
 80014b8:	e7d2      	b.n	8001460 <_L9963E_DRV_wait_and_receive+0x64>
 80014ba:	bf00      	nop
 80014bc:	0003ffff 	.word	0x0003ffff

080014c0 <_L9963E_DRV_reg_cmd>:
L9963E_StatusTypeDef _L9963E_DRV_reg_cmd(L9963E_DRV_HandleTypeDef *handle,
                                         uint8_t is_write,
                                         uint8_t device,
                                         L9963E_RegistersAddrTypeDef address,
                                         L9963E_RegisterUnionTypeDef *data,
                                         uint8_t timeout) {
 80014c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
    union L9963E_DRV_FrameUnion frame;
    L9963E_StatusTypeDef errorcode = L9963E_OK;
    uint8_t raw[5];

#if L9963E_DEBUG
    if (handle == NULL) {
 80014c8:	2800      	cmp	r0, #0
 80014ca:	d039      	beq.n	8001540 <_L9963E_DRV_reg_cmd+0x80>
 80014cc:	460d      	mov	r5, r1
 80014ce:	4614      	mov	r4, r2
 80014d0:	4606      	mov	r6, r0
        return L9963E_ERROR;
    }

    if (data == NULL) {
 80014d2:	2f00      	cmp	r7, #0
 80014d4:	d036      	beq.n	8001544 <_L9963E_DRV_reg_cmd+0x84>
        return L9963E_ERROR;
    }
#endif

    _L9963E_DRV_build_frame(raw, 1, is_write ? 1 : 0, device, address, is_write ? data->generic : 0);
 80014d6:	2900      	cmp	r1, #0
 80014d8:	bf14      	ite	ne
 80014da:	2201      	movne	r2, #1
 80014dc:	2200      	moveq	r2, #0
 80014de:	d02d      	beq.n	800153c <_L9963E_DRV_reg_cmd+0x7c>
 80014e0:	6839      	ldr	r1, [r7, #0]
 80014e2:	f10d 0808 	add.w	r8, sp, #8
 80014e6:	9101      	str	r1, [sp, #4]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4623      	mov	r3, r4
 80014ec:	2101      	movs	r1, #1
 80014ee:	4640      	mov	r0, r8
 80014f0:	f7ff ff27 	bl	8001342 <_L9963E_DRV_build_frame>

    errorcode = _L9963E_DRV_spi_transmit(handle, raw, 5, 10);
 80014f4:	230a      	movs	r3, #10
 80014f6:	2205      	movs	r2, #5
 80014f8:	4641      	mov	r1, r8
 80014fa:	4630      	mov	r0, r6
 80014fc:	f7ff ff60 	bl	80013c0 <_L9963E_DRV_spi_transmit>

    if (errorcode != L9963E_OK) {
 8001500:	4603      	mov	r3, r0
 8001502:	b9b8      	cbnz	r0, 8001534 <_L9963E_DRV_reg_cmd+0x74>
        return errorcode;
    }

    errorcode = _L9963E_DRV_wait_and_receive(&frame, handle, device, L9963E_DRV_GETTICK(handle), timeout);
 8001504:	6933      	ldr	r3, [r6, #16]
 8001506:	4798      	blx	r3
 8001508:	4603      	mov	r3, r0
 800150a:	f89d 2034 	ldrb.w	r2, [sp, #52]	@ 0x34
 800150e:	9200      	str	r2, [sp, #0]
 8001510:	4622      	mov	r2, r4
 8001512:	4631      	mov	r1, r6
 8001514:	a804      	add	r0, sp, #16
 8001516:	f7ff ff71 	bl	80013fc <_L9963E_DRV_wait_and_receive>

    if (errorcode != L9963E_OK) {
 800151a:	4603      	mov	r3, r0
 800151c:	b950      	cbnz	r0, 8001534 <_L9963E_DRV_reg_cmd+0x74>
        return errorcode;
    }

    if (is_write && frame.cmd.data != data->generic) {
 800151e:	b12d      	cbz	r5, 800152c <_L9963E_DRV_reg_cmd+0x6c>
 8001520:	9a04      	ldr	r2, [sp, #16]
 8001522:	f3c2 1291 	ubfx	r2, r2, #6, #18
 8001526:	6839      	ldr	r1, [r7, #0]
 8001528:	428a      	cmp	r2, r1
 800152a:	d10d      	bne.n	8001548 <_L9963E_DRV_reg_cmd+0x88>
        return L9963E_READBACK_ERROR;
    }

    data->generic = frame.cmd.data;
 800152c:	9a04      	ldr	r2, [sp, #16]
 800152e:	f3c2 1291 	ubfx	r2, r2, #6, #18
 8001532:	603a      	str	r2, [r7, #0]

    return L9963E_OK;
}
 8001534:	4618      	mov	r0, r3
 8001536:	b006      	add	sp, #24
 8001538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _L9963E_DRV_build_frame(raw, 1, is_write ? 1 : 0, device, address, is_write ? data->generic : 0);
 800153c:	2100      	movs	r1, #0
 800153e:	e7d0      	b.n	80014e2 <_L9963E_DRV_reg_cmd+0x22>
        return L9963E_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e7f7      	b.n	8001534 <_L9963E_DRV_reg_cmd+0x74>
        return L9963E_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e7f5      	b.n	8001534 <_L9963E_DRV_reg_cmd+0x74>
        return L9963E_READBACK_ERROR;
 8001548:	2304      	movs	r3, #4
 800154a:	e7f3      	b.n	8001534 <_L9963E_DRV_reg_cmd+0x74>

0800154c <L9963E_DRV_reg_read>:
                                         uint8_t device,
                                         L9963E_RegistersAddrTypeDef address,
                                         L9963E_RegisterUnionTypeDef *data,
                                         uint8_t timeout) {
#if L9963E_DEBUG
    if (device == 0) {
 800154c:	b909      	cbnz	r1, 8001552 <L9963E_DRV_reg_read+0x6>
        return L9963E_ERROR;
 800154e:	2001      	movs	r0, #1
    }
#endif

    return _L9963E_DRV_reg_cmd(handle, 0, device, address, data, timeout);
}
 8001550:	4770      	bx	lr
                                         uint8_t timeout) {
 8001552:	b500      	push	{lr}
 8001554:	b083      	sub	sp, #12
 8001556:	468c      	mov	ip, r1
    return _L9963E_DRV_reg_cmd(handle, 0, device, address, data, timeout);
 8001558:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800155c:	9101      	str	r1, [sp, #4]
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	4613      	mov	r3, r2
 8001562:	4662      	mov	r2, ip
 8001564:	2100      	movs	r1, #0
 8001566:	f7ff ffab 	bl	80014c0 <_L9963E_DRV_reg_cmd>
}
 800156a:	b003      	add	sp, #12
 800156c:	f85d fb04 	ldr.w	pc, [sp], #4

08001570 <L9963E_DRV_reg_write>:

L9963E_StatusTypeDef L9963E_DRV_reg_write(L9963E_DRV_HandleTypeDef *handle,
                                          uint8_t device,
                                          L9963E_RegistersAddrTypeDef address,
                                          L9963E_RegisterUnionTypeDef *data,
                                          uint8_t timeout) {
 8001570:	b510      	push	{r4, lr}
 8001572:	b082      	sub	sp, #8
    return _L9963E_DRV_reg_cmd(handle, 1, device, address, data, timeout);
 8001574:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8001578:	9401      	str	r4, [sp, #4]
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	4613      	mov	r3, r2
 800157e:	460a      	mov	r2, r1
 8001580:	2101      	movs	r1, #1
 8001582:	f7ff ff9d 	bl	80014c0 <_L9963E_DRV_reg_cmd>
}
 8001586:	b002      	add	sp, #8
 8001588:	bd10      	pop	{r4, pc}
	...

0800158c <bms_routines_init>:
pack_information_t *pack_information;
battery_errors_t   *battery_errors;
hv_devices_states_requests_t *hv_devices_states_requests;

//* setup function for the bms routine
void bms_routines_init(pack_information_t *ptr1, battery_errors_t *ptr2, hv_devices_states_requests_t *ptr3){
 800158c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158e:	4607      	mov	r7, r0
 8001590:	460e      	mov	r6, r1
 8001592:	4615      	mov	r5, r2
    //avvio pwm per ventole
    TIMER_FAN_PWM->CCR1 = 0;
 8001594:	2400      	movs	r4, #0
 8001596:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <bms_routines_init+0x64>)
 8001598:	635c      	str	r4, [r3, #52]	@ 0x34
    HAL_TIM_PWM_Start_IT(&htim12,TIM_CHANNEL_1);
 800159a:	4621      	mov	r1, r4
 800159c:	4815      	ldr	r0, [pc, #84]	@ (80015f4 <bms_routines_init+0x68>)
 800159e:	f003 f9bf 	bl	8004920 <HAL_TIM_PWM_Start_IT>

    for(uint8_t i=0;i<L9963Es_TOTAL_CELLS_N;i++){
 80015a2:	4623      	mov	r3, r4
 80015a4:	e00d      	b.n	80015c2 <bms_routines_init+0x36>
        pack_information->cell_voltages_mV[i] = CELL_VOLTAGE_READ_ERROR;
 80015a6:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <bms_routines_init+0x6c>)
 80015a8:	6814      	ldr	r4, [r2, #0]
 80015aa:	1d1a      	adds	r2, r3, #4
 80015ac:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80015b0:	f641 3158 	movw	r1, #7000	@ 0x1b58
 80015b4:	8091      	strh	r1, [r2, #4]
        pack_information->cell_balancing[i] = CELL_BALANCING_OFF;
 80015b6:	441c      	add	r4, r3
 80015b8:	2200      	movs	r2, #0
 80015ba:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    for(uint8_t i=0;i<L9963Es_TOTAL_CELLS_N;i++){
 80015be:	3301      	adds	r3, #1
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b1b      	cmp	r3, #27
 80015c4:	d9ef      	bls.n	80015a6 <bms_routines_init+0x1a>
    }

    for(uint8_t i=0;i<L9963Es_TOTAL_GPIOS_N;i++){
 80015c6:	2300      	movs	r3, #0
 80015c8:	e009      	b.n	80015de <bms_routines_init+0x52>
        pack_information->cell_temperatures_centideg[i] = CELL_TEMPERATURE_READ_ERROR;
 80015ca:	4a0b      	ldr	r2, [pc, #44]	@ (80015f8 <bms_routines_init+0x6c>)
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80015d2:	f64f 7060 	movw	r0, #65376	@ 0xff60
 80015d6:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
    for(uint8_t i=0;i<L9963Es_TOTAL_GPIOS_N;i++){
 80015da:	3301      	adds	r3, #1
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b09      	cmp	r3, #9
 80015e0:	d9f3      	bls.n	80015ca <bms_routines_init+0x3e>
    }

    pack_information = ptr1;
 80015e2:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <bms_routines_init+0x6c>)
 80015e4:	601f      	str	r7, [r3, #0]
    battery_errors = ptr2;
 80015e6:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <bms_routines_init+0x70>)
 80015e8:	601e      	str	r6, [r3, #0]
    hv_devices_states_requests = ptr3;
 80015ea:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <bms_routines_init+0x74>)
 80015ec:	601d      	str	r5, [r3, #0]
}
 80015ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015f0:	40001800 	.word	0x40001800
 80015f4:	20000438 	.word	0x20000438
 80015f8:	200000f0 	.word	0x200000f0
 80015fc:	200000ec 	.word	0x200000ec
 8001600:	200000e8 	.word	0x200000e8

08001604 <balancing_procedure>:
    
    battery_fan_duty(newduty);
}

//controlla la tensione delle celle e imposta il balancing (deve controllare anche la corrente?)
void balancing_procedure(){
 8001604:	b508      	push	{r3, lr}
    if(pack_information->cell_max_voltage_mV > HARD_OVERVOLT){
 8001606:	4b38      	ldr	r3, [pc, #224]	@ (80016e8 <balancing_procedure+0xe4>)
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	f8b0 2046 	ldrh.w	r2, [r0, #70]	@ 0x46
 800160e:	f241 0368 	movw	r3, #4200	@ 0x1068
 8001612:	429a      	cmp	r2, r3
 8001614:	d82b      	bhi.n	800166e <balancing_procedure+0x6a>
                pack_information->cell_balancing[i] = CELL_BALANCING_OFF;
            }
        }
    }else{
        //* if at least one cell is above DEF_HIGH_V_START_mV the balancing procedure can start
        if(pack_information->battery_state.is_charging == 0){
 8001616:	f890 30a5 	ldrb.w	r3, [r0, #165]	@ 0xa5
 800161a:	2b00      	cmp	r3, #0
 800161c:	d063      	beq.n	80016e6 <balancing_procedure+0xe2>
            return; //* no balancing while not charging
        }

        //* the battery is charging, check if balancing conditions are met
        uint8_t any_above_high = 0;
        for (uint8_t i = 0; i < L9963Es_TOTAL_CELLS_N; i++) {
 800161e:	2300      	movs	r3, #0
 8001620:	2b1b      	cmp	r3, #27
 8001622:	d826      	bhi.n	8001672 <balancing_procedure+0x6e>
            if (pack_information->cell_voltages_mV[i] > DEF_HIGH_V_START_mV) {
 8001624:	1d1a      	adds	r2, r3, #4
 8001626:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800162a:	8891      	ldrh	r1, [r2, #4]
 800162c:	f241 0204 	movw	r2, #4100	@ 0x1004
 8001630:	4291      	cmp	r1, r2
 8001632:	d820      	bhi.n	8001676 <balancing_procedure+0x72>
        for (uint8_t i = 0; i < L9963Es_TOTAL_CELLS_N; i++) {
 8001634:	3301      	adds	r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	e7f2      	b.n	8001620 <balancing_procedure+0x1c>
                pack_information->cell_balancing[i] = CELL_BALANCING_OFF;
 800163a:	18c2      	adds	r2, r0, r3
 800163c:	2100      	movs	r1, #0
 800163e:	f882 104c 	strb.w	r1, [r2, #76]	@ 0x4c
        for(uint8_t i=0;i<L9963Es_TOTAL_CELLS_N;i++){
 8001642:	3301      	adds	r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b1b      	cmp	r3, #27
 8001648:	d845      	bhi.n	80016d6 <balancing_procedure+0xd2>
            if(pack_information->cell_voltages_mV[i] > HARD_OVERVOLT){
 800164a:	1d1a      	adds	r2, r3, #4
 800164c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001650:	8891      	ldrh	r1, [r2, #4]
 8001652:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001656:	4291      	cmp	r1, r2
 8001658:	d9ef      	bls.n	800163a <balancing_procedure+0x36>
                pack_information->cell_balancing[i] = CELL_BALANCING_ON;
 800165a:	18c2      	adds	r2, r0, r3
 800165c:	2102      	movs	r1, #2
 800165e:	f882 104c 	strb.w	r1, [r2, #76]	@ 0x4c
                pack_information->cell_balancing_number++;
 8001662:	f890 2098 	ldrb.w	r2, [r0, #152]	@ 0x98
 8001666:	3201      	adds	r2, #1
 8001668:	f880 2098 	strb.w	r2, [r0, #152]	@ 0x98
 800166c:	e7e9      	b.n	8001642 <balancing_procedure+0x3e>
        for(uint8_t i=0;i<L9963Es_TOTAL_CELLS_N;i++){
 800166e:	2300      	movs	r3, #0
 8001670:	e7e9      	b.n	8001646 <balancing_procedure+0x42>
        uint8_t any_above_high = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	e000      	b.n	8001678 <balancing_procedure+0x74>
                any_above_high = 1;
 8001676:	2301      	movs	r3, #1
                break;
            }
        }

        //* these balancing conditions needs to be true for balancing to start 
        if (!(any_above_high==1) &&
 8001678:	b91b      	cbnz	r3, 8001682 <balancing_procedure+0x7e>
            !(pack_information->pack_cell_delta_mV > DEF_DELTA_START_mV)    ){
 800167a:	f8b0 304a 	ldrh.w	r3, [r0, #74]	@ 0x4a
        if (!(any_above_high==1) &&
 800167e:	2b96      	cmp	r3, #150	@ 0x96
 8001680:	d931      	bls.n	80016e6 <balancing_procedure+0xe2>
            return; //* no balancing needed
        }

        //* start balancing procedure
        pack_information->cell_balancing_number = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
        for (uint8_t i = 0; i < L9963Es_TOTAL_CELLS_N; i++) {
 8001688:	e00a      	b.n	80016a0 <balancing_procedure+0x9c>
                //* the cell could be balanced
                if((int16_t)(pack_information->cell_voltages_mV[i] - (int16_t)(pack_information->cell_min_voltage_mV)) > DEF_BALANCE_BAND_mV){
                    pack_information->cell_balancing[i] = CELL_BALANCING_ON; /* è consentito bilanciare più celle contemporaneamente */
                    pack_information->cell_balancing_number++;
                }else{
                    pack_information->cell_balancing[i] = CELL_BALANCING_OFF;
 800168a:	4484      	add	ip, r0
 800168c:	2200      	movs	r2, #0
 800168e:	f88c 204c 	strb.w	r2, [ip, #76]	@ 0x4c
 8001692:	e003      	b.n	800169c <balancing_procedure+0x98>
                }
            }else{
                pack_information->cell_balancing[i] = CELL_BALANCING_OFF;
 8001694:	18c2      	adds	r2, r0, r3
 8001696:	2100      	movs	r1, #0
 8001698:	f882 104c 	strb.w	r1, [r2, #76]	@ 0x4c
        for (uint8_t i = 0; i < L9963Es_TOTAL_CELLS_N; i++) {
 800169c:	3301      	adds	r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b1b      	cmp	r3, #27
 80016a2:	d818      	bhi.n	80016d6 <balancing_procedure+0xd2>
            if (pack_information->cell_voltages_mV[i] >= DEF_HIGH_V_START_mV) {
 80016a4:	469c      	mov	ip, r3
 80016a6:	1d1a      	adds	r2, r3, #4
 80016a8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80016ac:	8892      	ldrh	r2, [r2, #4]
 80016ae:	f241 0103 	movw	r1, #4099	@ 0x1003
 80016b2:	428a      	cmp	r2, r1
 80016b4:	d9ee      	bls.n	8001694 <balancing_procedure+0x90>
                if((int16_t)(pack_information->cell_voltages_mV[i] - (int16_t)(pack_information->cell_min_voltage_mV)) > DEF_BALANCE_BAND_mV){
 80016b6:	f8b0 1044 	ldrh.w	r1, [r0, #68]	@ 0x44
 80016ba:	1a52      	subs	r2, r2, r1
 80016bc:	b212      	sxth	r2, r2
 80016be:	2a0a      	cmp	r2, #10
 80016c0:	dde3      	ble.n	800168a <balancing_procedure+0x86>
                    pack_information->cell_balancing[i] = CELL_BALANCING_ON; /* è consentito bilanciare più celle contemporaneamente */
 80016c2:	18c2      	adds	r2, r0, r3
 80016c4:	2102      	movs	r1, #2
 80016c6:	f882 104c 	strb.w	r1, [r2, #76]	@ 0x4c
                    pack_information->cell_balancing_number++;
 80016ca:	f890 2098 	ldrb.w	r2, [r0, #152]	@ 0x98
 80016ce:	3201      	adds	r2, #1
 80016d0:	f880 2098 	strb.w	r2, [r0, #152]	@ 0x98
 80016d4:	e7e2      	b.n	800169c <balancing_procedure+0x98>
            }
        }
    }
    //* function for setting the balancing on the L9963Es
    balancing_set(pack_information->cell_balancing, pack_information->cell_balancing_number > 0 ? 1 : 0);
 80016d6:	f890 1098 	ldrb.w	r1, [r0, #152]	@ 0x98
 80016da:	3900      	subs	r1, #0
 80016dc:	bf18      	it	ne
 80016de:	2101      	movne	r1, #1
 80016e0:	304c      	adds	r0, #76	@ 0x4c
 80016e2:	f000 ff21 	bl	8002528 <balancing_set>
}
 80016e6:	bd08      	pop	{r3, pc}
 80016e8:	200000f0 	.word	0x200000f0

080016ec <compute_max_deltas>:

/* compute max, min and delta of all cell voltages */
void compute_max_deltas(){
 80016ec:	b538      	push	{r3, r4, r5, lr}
    uint16_t min_out = max_search(pack_information->cell_voltages_mV, L9963Es_TOTAL_CELLS_N);
 80016ee:	4c1b      	ldr	r4, [pc, #108]	@ (800175c <compute_max_deltas+0x70>)
 80016f0:	6820      	ldr	r0, [r4, #0]
 80016f2:	211c      	movs	r1, #28
 80016f4:	300c      	adds	r0, #12
 80016f6:	f003 fc9b 	bl	8005030 <max_search>
 80016fa:	4605      	mov	r5, r0
    uint16_t max_out = min_search(pack_information->cell_voltages_mV, L9963Es_TOTAL_CELLS_N);
 80016fc:	6820      	ldr	r0, [r4, #0]
 80016fe:	211c      	movs	r1, #28
 8001700:	300c      	adds	r0, #12
 8001702:	f003 fcaa 	bl	800505a <min_search>
    pack_information->cell_min_voltage_mV = min_out;
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	f8a3 5044 	strh.w	r5, [r3, #68]	@ 0x44
    pack_information->cell_max_voltage_mV = max_out;
 800170c:	f8a3 0046 	strh.w	r0, [r3, #70]	@ 0x46
    pack_information->pack_cell_delta_mV = max_out - min_out;
 8001710:	1b40      	subs	r0, r0, r5
 8001712:	f8a3 004a 	strh.w	r0, [r3, #74]	@ 0x4a
    pack_information->cell_voltage_avg_mV = get_avg(pack_information->cell_voltages_mV, L9963Es_TOTAL_CELLS_N);
 8001716:	211c      	movs	r1, #28
 8001718:	f103 000c 	add.w	r0, r3, #12
 800171c:	f003 fcb2 	bl	8005084 <get_avg>
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	f8a3 0048 	strh.w	r0, [r3, #72]	@ 0x48

    int16_t min_out_signed = max_search_signed(pack_information->cell_temperatures_centideg, L9963Es_TOTAL_GPIOS_N);
 8001726:	210a      	movs	r1, #10
 8001728:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 800172c:	f003 fcbc 	bl	80050a8 <max_search_signed>
 8001730:	4605      	mov	r5, r0
    int16_t max_out_signed = min_search_signed(pack_information->cell_temperatures_centideg, L9963Es_TOTAL_GPIOS_N);
 8001732:	6820      	ldr	r0, [r4, #0]
 8001734:	210a      	movs	r1, #10
 8001736:	3068      	adds	r0, #104	@ 0x68
 8001738:	f003 fccc 	bl	80050d4 <min_search_signed>
    pack_information->cell_min_temperature_centideg = min_out_signed;
 800173c:	6824      	ldr	r4, [r4, #0]
 800173e:	f8a4 507c 	strh.w	r5, [r4, #124]	@ 0x7c
    pack_information->cell_max_temperature_centideg = max_out_signed;
 8001742:	f8a4 007e 	strh.w	r0, [r4, #126]	@ 0x7e
    pack_information->cell_delta_temperature_centideg = max_out_signed - min_out_signed;
 8001746:	1b40      	subs	r0, r0, r5
 8001748:	f8a4 0080 	strh.w	r0, [r4, #128]	@ 0x80
    pack_information->cell_temperature_avg_centideg = get_avg_signed(pack_information->cell_temperatures_centideg, L9963Es_TOTAL_GPIOS_N);
 800174c:	210a      	movs	r1, #10
 800174e:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001752:	f003 fcd5 	bl	8005100 <get_avg_signed>
 8001756:	f8a4 0082 	strh.w	r0, [r4, #130]	@ 0x82
}
 800175a:	bd38      	pop	{r3, r4, r5, pc}
 800175c:	200000f0 	.word	0x200000f0

08001760 <voltage_check>:
//* if 0 is returned the voltages are okay, if not the voltages are not okay
uint8_t voltage_check(){
    uint8_t status = 0;

    //* check if the voltage pack is okay
    if(pack_information->pack_voltage_mV > PACK_OVERVOLTAGE){
 8001760:	4b45      	ldr	r3, [pc, #276]	@ (8001878 <voltage_check+0x118>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6819      	ldr	r1, [r3, #0]
 8001766:	4a45      	ldr	r2, [pc, #276]	@ (800187c <voltage_check+0x11c>)
 8001768:	4291      	cmp	r1, r2
 800176a:	d909      	bls.n	8001780 <voltage_check+0x20>
        status++;
        battery_errors->pack_overvoltage = ERROR_PRESENT;
 800176c:	4b44      	ldr	r3, [pc, #272]	@ (8001880 <voltage_check+0x120>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2001      	movs	r0, #1
 8001772:	f883 0070 	strb.w	r0, [r3, #112]	@ 0x70
        status++;
 8001776:	2300      	movs	r3, #0
            battery_errors->pack_undervoltage = ERROR_NOT_PRESENT;
        }
    }

    //* check if the cell voltages are okay
    for(uint8_t i=0; i<L9963Es_TOTAL_CELLS_N; i++) {
 8001778:	2b1b      	cmp	r3, #27
 800177a:	d87b      	bhi.n	8001874 <voltage_check+0x114>
uint8_t voltage_check(){
 800177c:	b410      	push	{r4}
 800177e:	e057      	b.n	8001830 <voltage_check+0xd0>
        battery_errors->pack_overvoltage = ERROR_NOT_PRESENT;
 8001780:	4a3f      	ldr	r2, [pc, #252]	@ (8001880 <voltage_check+0x120>)
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	2100      	movs	r1, #0
 8001786:	f882 1070 	strb.w	r1, [r2, #112]	@ 0x70
        if(pack_information->pack_voltage_mV < PACK_UNDERVOLTAGE){
 800178a:	6819      	ldr	r1, [r3, #0]
 800178c:	4b3d      	ldr	r3, [pc, #244]	@ (8001884 <voltage_check+0x124>)
 800178e:	4299      	cmp	r1, r3
 8001790:	d803      	bhi.n	800179a <voltage_check+0x3a>
            battery_errors->pack_undervoltage = ERROR_PRESENT;
 8001792:	2001      	movs	r0, #1
 8001794:	f882 0071 	strb.w	r0, [r2, #113]	@ 0x71
 8001798:	e7ed      	b.n	8001776 <voltage_check+0x16>
            battery_errors->pack_undervoltage = ERROR_NOT_PRESENT;
 800179a:	2000      	movs	r0, #0
 800179c:	f882 0071 	strb.w	r0, [r2, #113]	@ 0x71
 80017a0:	e7e9      	b.n	8001776 <voltage_check+0x16>
            if(pack_information->cell_voltages_mV[i] > HARD_OVERVOLT){
                status++;
                battery_errors->cell_soft_overvoltage[i] = ERROR_NOT_PRESENT;
                battery_errors->cell_hard_overvoltage[i] = ERROR_PRESENT;
            }else{
                battery_errors->cell_soft_overvoltage[i] = ERROR_PRESENT;
 80017a2:	4a37      	ldr	r2, [pc, #220]	@ (8001880 <voltage_check+0x120>)
 80017a4:	f04f 0c01 	mov.w	ip, #1
 80017a8:	6814      	ldr	r4, [r2, #0]
 80017aa:	f804 c003 	strb.w	ip, [r4, r3]
                battery_errors->cell_hard_overvoltage[i] = ERROR_NOT_PRESENT;
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	441a      	add	r2, r3
 80017b2:	f04f 0c00 	mov.w	ip, #0
 80017b6:	f882 c01c 	strb.w	ip, [r2, #28]
 80017ba:	e009      	b.n	80017d0 <voltage_check+0x70>
            }
        }else{
            battery_errors->cell_soft_overvoltage[i] = ERROR_NOT_PRESENT;
 80017bc:	4a30      	ldr	r2, [pc, #192]	@ (8001880 <voltage_check+0x120>)
 80017be:	f04f 0c00 	mov.w	ip, #0
 80017c2:	6814      	ldr	r4, [r2, #0]
 80017c4:	f804 c003 	strb.w	ip, [r4, r3]
            battery_errors->cell_hard_overvoltage[i] = ERROR_NOT_PRESENT;
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	441a      	add	r2, r3
 80017cc:	f882 c01c 	strb.w	ip, [r2, #28]
        }

        if(pack_information->cell_voltages_mV[i] < SOFT_UNDERVOLT){
 80017d0:	4a29      	ldr	r2, [pc, #164]	@ (8001878 <voltage_check+0x118>)
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	f101 0c04 	add.w	ip, r1, #4
 80017d8:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 80017dc:	8892      	ldrh	r2, [r2, #4]
 80017de:	f640 3cb7 	movw	ip, #2999	@ 0xbb7
 80017e2:	4562      	cmp	r2, ip
 80017e4:	d818      	bhi.n	8001818 <voltage_check+0xb8>
            if(pack_information->cell_voltages_mV[i] < HARD_UNDERVOLT){
 80017e6:	f5b2 6f2f 	cmp.w	r2, #2800	@ 0xaf0
 80017ea:	d20b      	bcs.n	8001804 <voltage_check+0xa4>
                status++;
 80017ec:	3001      	adds	r0, #1
 80017ee:	b2c0      	uxtb	r0, r0
                battery_errors->cell_soft_undervoltage[i] = ERROR_NOT_PRESENT;
 80017f0:	4a23      	ldr	r2, [pc, #140]	@ (8001880 <voltage_check+0x120>)
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	440a      	add	r2, r1
 80017f6:	2100      	movs	r1, #0
 80017f8:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
                battery_errors->cell_hard_undervoltage[i] = ERROR_PRESENT;
 80017fc:	2101      	movs	r1, #1
 80017fe:	f882 1054 	strb.w	r1, [r2, #84]	@ 0x54
 8001802:	e011      	b.n	8001828 <voltage_check+0xc8>
            }else{
                battery_errors->cell_soft_undervoltage[i] = ERROR_PRESENT;
 8001804:	4a1e      	ldr	r2, [pc, #120]	@ (8001880 <voltage_check+0x120>)
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	440a      	add	r2, r1
 800180a:	2101      	movs	r1, #1
 800180c:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
                battery_errors->cell_hard_undervoltage[i] = ERROR_NOT_PRESENT;
 8001810:	2100      	movs	r1, #0
 8001812:	f882 1054 	strb.w	r1, [r2, #84]	@ 0x54
 8001816:	e007      	b.n	8001828 <voltage_check+0xc8>
            }
        }else{
            battery_errors->cell_soft_undervoltage[i] = ERROR_NOT_PRESENT;
 8001818:	4a19      	ldr	r2, [pc, #100]	@ (8001880 <voltage_check+0x120>)
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	440a      	add	r2, r1
 800181e:	2100      	movs	r1, #0
 8001820:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
            battery_errors->cell_hard_undervoltage[i] = ERROR_NOT_PRESENT;
 8001824:	f882 1054 	strb.w	r1, [r2, #84]	@ 0x54
    for(uint8_t i=0; i<L9963Es_TOTAL_CELLS_N; i++) {
 8001828:	3301      	adds	r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b1b      	cmp	r3, #27
 800182e:	d81e      	bhi.n	800186e <voltage_check+0x10e>
        if(pack_information->cell_voltages_mV[i] > SOFT_OVERVOLT){
 8001830:	4a11      	ldr	r2, [pc, #68]	@ (8001878 <voltage_check+0x118>)
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	f103 0c04 	add.w	ip, r3, #4
 800183a:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 800183e:	8892      	ldrh	r2, [r2, #4]
 8001840:	f241 0c54 	movw	ip, #4180	@ 0x1054
 8001844:	4562      	cmp	r2, ip
 8001846:	d9b9      	bls.n	80017bc <voltage_check+0x5c>
            if(pack_information->cell_voltages_mV[i] > HARD_OVERVOLT){
 8001848:	f241 0c68 	movw	ip, #4200	@ 0x1068
 800184c:	4562      	cmp	r2, ip
 800184e:	d9a8      	bls.n	80017a2 <voltage_check+0x42>
                status++;
 8001850:	3001      	adds	r0, #1
 8001852:	b2c0      	uxtb	r0, r0
                battery_errors->cell_soft_overvoltage[i] = ERROR_NOT_PRESENT;
 8001854:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <voltage_check+0x120>)
 8001856:	f04f 0c00 	mov.w	ip, #0
 800185a:	6814      	ldr	r4, [r2, #0]
 800185c:	f804 c003 	strb.w	ip, [r4, r3]
                battery_errors->cell_hard_overvoltage[i] = ERROR_PRESENT;
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	441a      	add	r2, r3
 8001864:	f04f 0c01 	mov.w	ip, #1
 8001868:	f882 c01c 	strb.w	ip, [r2, #28]
 800186c:	e7b0      	b.n	80017d0 <voltage_check+0x70>
        }
    }
    return status;
}
 800186e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	200000f0 	.word	0x200000f0
 800187c:	0001cb60 	.word	0x0001cb60
 8001880:	200000ec 	.word	0x200000ec
 8001884:	000132a3 	.word	0x000132a3

08001888 <temperature_check>:

//le funzioni richiamate per set e reset non sono ancora state scritte (nemmeno i prototipi)
uint8_t temperature_check(){
    uint8_t status = 0;
    for(uint8_t i=0; i<L9963Es_TOTAL_CELLS_N; i++) {
 8001888:	2300      	movs	r3, #0
    uint8_t status = 0;
 800188a:	4618      	mov	r0, r3
    for(uint8_t i=0; i<L9963Es_TOTAL_CELLS_N; i++) {
 800188c:	2b1b      	cmp	r3, #27
 800188e:	d861      	bhi.n	8001954 <temperature_check+0xcc>
uint8_t temperature_check(){
 8001890:	b410      	push	{r4}
 8001892:	e040      	b.n	8001916 <temperature_check+0x8e>
            if(pack_information->cell_temperatures_centideg[i] > HARD_OVERTEMP){
                status++;
                battery_errors->cell_soft_overtemp[i] = ERROR_NOT_PRESENT;
                battery_errors->cell_hard_overtemp[i] = ERROR_PRESENT;
            }else{
                battery_errors->cell_soft_overtemp[i] = ERROR_PRESENT;
 8001894:	4c30      	ldr	r4, [pc, #192]	@ (8001958 <temperature_check+0xd0>)
 8001896:	6824      	ldr	r4, [r4, #0]
 8001898:	441c      	add	r4, r3
 800189a:	f04f 0c01 	mov.w	ip, #1
 800189e:	f884 c074 	strb.w	ip, [r4, #116]	@ 0x74
                battery_errors->cell_hard_overtemp[i] = ERROR_NOT_PRESENT;
 80018a2:	f04f 0c00 	mov.w	ip, #0
 80018a6:	f884 c07e 	strb.w	ip, [r4, #126]	@ 0x7e
 80018aa:	e008      	b.n	80018be <temperature_check+0x36>
            }
        }else{
            battery_errors->cell_soft_overtemp[i] = ERROR_NOT_PRESENT;
 80018ac:	4c2a      	ldr	r4, [pc, #168]	@ (8001958 <temperature_check+0xd0>)
 80018ae:	6824      	ldr	r4, [r4, #0]
 80018b0:	eb04 0c03 	add.w	ip, r4, r3
 80018b4:	2400      	movs	r4, #0
 80018b6:	f88c 4074 	strb.w	r4, [ip, #116]	@ 0x74
            battery_errors->cell_hard_overtemp[i] = ERROR_NOT_PRESENT;
 80018ba:	f88c 407e 	strb.w	r4, [ip, #126]	@ 0x7e
        }

        if(pack_information->cell_temperatures_centideg[i] < SOFT_UNDERTEMP){
 80018be:	f102 0434 	add.w	r4, r2, #52	@ 0x34
 80018c2:	f931 1014 	ldrsh.w	r1, [r1, r4, lsl #1]
 80018c6:	f5b1 7ffa 	cmp.w	r1, #500	@ 0x1f4
 80018ca:	da18      	bge.n	80018fe <temperature_check+0x76>
            if(pack_information->cell_temperatures_centideg[i] < HARD_UNDERTEMP){
 80018cc:	f111 0f64 	cmn.w	r1, #100	@ 0x64
 80018d0:	da0b      	bge.n	80018ea <temperature_check+0x62>
                status++;
 80018d2:	3001      	adds	r0, #1
 80018d4:	b2c0      	uxtb	r0, r0
                battery_errors->cell_soft_undertemp[i] = ERROR_NOT_PRESENT;
 80018d6:	4920      	ldr	r1, [pc, #128]	@ (8001958 <temperature_check+0xd0>)
 80018d8:	6809      	ldr	r1, [r1, #0]
 80018da:	440a      	add	r2, r1
 80018dc:	2100      	movs	r1, #0
 80018de:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
                battery_errors->cell_hard_undertemp[i] = ERROR_PRESENT;
 80018e2:	2101      	movs	r1, #1
 80018e4:	f882 1092 	strb.w	r1, [r2, #146]	@ 0x92
 80018e8:	e011      	b.n	800190e <temperature_check+0x86>
            }else{
                battery_errors->cell_soft_undertemp[i] = ERROR_PRESENT;
 80018ea:	491b      	ldr	r1, [pc, #108]	@ (8001958 <temperature_check+0xd0>)
 80018ec:	6809      	ldr	r1, [r1, #0]
 80018ee:	440a      	add	r2, r1
 80018f0:	2101      	movs	r1, #1
 80018f2:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
                battery_errors->cell_hard_undertemp[i] = ERROR_NOT_PRESENT;
 80018f6:	2100      	movs	r1, #0
 80018f8:	f882 1092 	strb.w	r1, [r2, #146]	@ 0x92
 80018fc:	e007      	b.n	800190e <temperature_check+0x86>
            }
        }else{
            battery_errors->cell_soft_undertemp[i] = ERROR_NOT_PRESENT;
 80018fe:	4916      	ldr	r1, [pc, #88]	@ (8001958 <temperature_check+0xd0>)
 8001900:	6809      	ldr	r1, [r1, #0]
 8001902:	440a      	add	r2, r1
 8001904:	2100      	movs	r1, #0
 8001906:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
            battery_errors->cell_hard_undertemp[i] = ERROR_NOT_PRESENT;
 800190a:	f882 1092 	strb.w	r1, [r2, #146]	@ 0x92
    for(uint8_t i=0; i<L9963Es_TOTAL_CELLS_N; i++) {
 800190e:	3301      	adds	r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b1b      	cmp	r3, #27
 8001914:	d81b      	bhi.n	800194e <temperature_check+0xc6>
        if(pack_information->cell_temperatures_centideg[i] > SOFT_OVERTEMP){
 8001916:	4a11      	ldr	r2, [pc, #68]	@ (800195c <temperature_check+0xd4>)
 8001918:	6811      	ldr	r1, [r2, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	f103 0434 	add.w	r4, r3, #52	@ 0x34
 8001920:	f931 c014 	ldrsh.w	ip, [r1, r4, lsl #1]
 8001924:	f5bc 6f7a 	cmp.w	ip, #4000	@ 0xfa0
 8001928:	ddc0      	ble.n	80018ac <temperature_check+0x24>
            if(pack_information->cell_temperatures_centideg[i] > HARD_OVERTEMP){
 800192a:	f241 547c 	movw	r4, #5500	@ 0x157c
 800192e:	45a4      	cmp	ip, r4
 8001930:	ddb0      	ble.n	8001894 <temperature_check+0xc>
                status++;
 8001932:	3001      	adds	r0, #1
 8001934:	b2c0      	uxtb	r0, r0
                battery_errors->cell_soft_overtemp[i] = ERROR_NOT_PRESENT;
 8001936:	4c08      	ldr	r4, [pc, #32]	@ (8001958 <temperature_check+0xd0>)
 8001938:	6824      	ldr	r4, [r4, #0]
 800193a:	441c      	add	r4, r3
 800193c:	f04f 0c00 	mov.w	ip, #0
 8001940:	f884 c074 	strb.w	ip, [r4, #116]	@ 0x74
                battery_errors->cell_hard_overtemp[i] = ERROR_PRESENT;
 8001944:	f04f 0c01 	mov.w	ip, #1
 8001948:	f884 c07e 	strb.w	ip, [r4, #126]	@ 0x7e
 800194c:	e7b7      	b.n	80018be <temperature_check+0x36>
        }
    }
    return status;
}
 800194e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	200000ec 	.word	0x200000ec
 800195c:	200000f0 	.word	0x200000f0

08001960 <current_check>:

uint8_t current_check(){
    if(pack_information->current_mA > MIN_CURRENT_FOR_CHARGING_STATE_mA){
 8001960:	4b22      	ldr	r3, [pc, #136]	@ (80019ec <current_check+0x8c>)
 8001962:	6819      	ldr	r1, [r3, #0]
 8001964:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8001968:	f8d1 308c 	ldr.w	r3, [r1, #140]	@ 0x8c
 800196c:	f240 30e9 	movw	r0, #1001	@ 0x3e9
 8001970:	4282      	cmp	r2, r0
 8001972:	f173 0000 	sbcs.w	r0, r3, #0
 8001976:	db15      	blt.n	80019a4 <current_check+0x44>
        pack_information->battery_state.is_charging = 1;
 8001978:	2001      	movs	r0, #1
 800197a:	f881 00a5 	strb.w	r0, [r1, #165]	@ 0xa5
        pack_information->battery_state.is_discharging = 0;
 800197e:	2000      	movs	r0, #0
 8001980:	f881 00a6 	strb.w	r0, [r1, #166]	@ 0xa6
        pack_information->battery_state.is_charging = 0;
        pack_information->battery_state.is_discharging = 1;
    }

    uint8_t status = 0;
    if(pack_information->current_mA > 0){
 8001984:	2a01      	cmp	r2, #1
 8001986:	f173 0100 	sbcs.w	r1, r3, #0
 800198a:	db1d      	blt.n	80019c8 <current_check+0x68>
        if((pack_information->current_mA) > MAX_CHARGE_CURRENT){
 800198c:	f241 41b5 	movw	r1, #5301	@ 0x14b5
 8001990:	428a      	cmp	r2, r1
 8001992:	f173 0300 	sbcs.w	r3, r3, #0
 8001996:	db11      	blt.n	80019bc <current_check+0x5c>
            status++;
            battery_errors->battery_overcurrent_charge = ERROR_PRESENT;
 8001998:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <current_check+0x90>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2001      	movs	r0, #1
 800199e:	f883 0072 	strb.w	r0, [r3, #114]	@ 0x72
 80019a2:	4770      	bx	lr
    else if((-pack_information->current_mA) > MIN_CURRENT_FOR_DISCHARGING_STATE_mA){
 80019a4:	f512 7f7a 	cmn.w	r2, #1000	@ 0x3e8
 80019a8:	f173 30ff 	sbcs.w	r0, r3, #4294967295
 80019ac:	daea      	bge.n	8001984 <current_check+0x24>
        pack_information->battery_state.is_charging = 0;
 80019ae:	2000      	movs	r0, #0
 80019b0:	f881 00a5 	strb.w	r0, [r1, #165]	@ 0xa5
        pack_information->battery_state.is_discharging = 1;
 80019b4:	2001      	movs	r0, #1
 80019b6:	f881 00a6 	strb.w	r0, [r1, #166]	@ 0xa6
 80019ba:	e7e3      	b.n	8001984 <current_check+0x24>
        }else{
            battery_errors->battery_overcurrent_charge = ERROR_NOT_PRESENT;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <current_check+0x90>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2000      	movs	r0, #0
 80019c2:	f883 0072 	strb.w	r0, [r3, #114]	@ 0x72
 80019c6:	4770      	bx	lr
        }
    }else{
        if(-(pack_information->current_mA) > MAX_DISCHARGE_CURRENT){
 80019c8:	490a      	ldr	r1, [pc, #40]	@ (80019f4 <current_check+0x94>)
 80019ca:	428a      	cmp	r2, r1
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	4193      	sbcs	r3, r2
 80019d2:	da05      	bge.n	80019e0 <current_check+0x80>
            status++;
            battery_errors->battery_overcurrent_discharge = ERROR_PRESENT;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <current_check+0x90>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2001      	movs	r0, #1
 80019da:	f883 0073 	strb.w	r0, [r3, #115]	@ 0x73
 80019de:	4770      	bx	lr
        }else{
            battery_errors->battery_overcurrent_discharge = ERROR_NOT_PRESENT;
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <current_check+0x90>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2000      	movs	r0, #0
 80019e6:	f883 0073 	strb.w	r0, [r3, #115]	@ 0x73
        }
    }

    return status;
}
 80019ea:	4770      	bx	lr
 80019ec:	200000f0 	.word	0x200000f0
 80019f0:	200000ec 	.word	0x200000ec
 80019f4:	ffffd698 	.word	0xffffd698

080019f8 <battery_operability>:
uint8_t battery_operability(){
 80019f8:	b510      	push	{r4, lr}
    error_counter += voltage_check();
 80019fa:	f7ff feb1 	bl	8001760 <voltage_check>
 80019fe:	4604      	mov	r4, r0
    error_counter += current_check();
 8001a00:	f7ff ffae 	bl	8001960 <current_check>
 8001a04:	4404      	add	r4, r0
 8001a06:	b2e4      	uxtb	r4, r4
    error_counter += temperature_check();
 8001a08:	f7ff ff3e 	bl	8001888 <temperature_check>
 8001a0c:	4420      	add	r0, r4
 8001a0e:	b2c0      	uxtb	r0, r0
}
 8001a10:	fab0 f080 	clz	r0, r0
 8001a14:	0940      	lsrs	r0, r0, #5
 8001a16:	bd10      	pop	{r4, pc}

08001a18 <battery_fan_duty>:

}

//funzione per aggiustare facilmente il duty cycle delle ventole per il raffreddamento
void battery_fan_duty(uint8_t duty){
    if(duty>FAN_MAX_DUTY){
 8001a18:	2864      	cmp	r0, #100	@ 0x64
 8001a1a:	d804      	bhi.n	8001a26 <battery_fan_duty+0xe>
        TIMER_FAN_PWM->CCR1=FAN_MAX_DUTY;
        return;
    }
    
    if(duty<FAN_MIN_DUTY){
 8001a1c:	2813      	cmp	r0, #19
 8001a1e:	d906      	bls.n	8001a2e <battery_fan_duty+0x16>
        TIMER_FAN_PWM->CCR1 = FAN_MIN_DUTY;
        return;  
    }

    TIMER_FAN_PWM->CCR1=duty;
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <battery_fan_duty+0x20>)
 8001a22:	6358      	str	r0, [r3, #52]	@ 0x34
}
 8001a24:	4770      	bx	lr
        TIMER_FAN_PWM->CCR1=FAN_MAX_DUTY;
 8001a26:	4b04      	ldr	r3, [pc, #16]	@ (8001a38 <battery_fan_duty+0x20>)
 8001a28:	2264      	movs	r2, #100	@ 0x64
 8001a2a:	635a      	str	r2, [r3, #52]	@ 0x34
        return;
 8001a2c:	4770      	bx	lr
        TIMER_FAN_PWM->CCR1 = FAN_MIN_DUTY;
 8001a2e:	4b02      	ldr	r3, [pc, #8]	@ (8001a38 <battery_fan_duty+0x20>)
 8001a30:	2214      	movs	r2, #20
 8001a32:	635a      	str	r2, [r3, #52]	@ 0x34
        return;  
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40001800 	.word	0x40001800

08001a3c <temperature_control>:
void temperature_control(){
 8001a3c:	b508      	push	{r3, lr}
    if(pack_information->cell_delta_temperature_centideg > IGNORE_AVG_TEMPERATURE_DELTA_THRESHOLD){
 8001a3e:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <temperature_control+0x54>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8001a46:	f5b2 7ffa 	cmp.w	r2, #500	@ 0x1f4
 8001a4a:	dd13      	ble.n	8001a74 <temperature_control+0x38>
        temperature_for_fan_control = pack_information->cell_max_temperature_centideg;
 8001a4c:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	@ 0x7e
    if(temperature_for_fan_control < T_LOW){
 8001a50:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001a54:	4293      	cmp	r3, r2
 8001a56:	dd10      	ble.n	8001a7a <temperature_control+0x3e>
    }else if(temperature_for_fan_control < T_MEDIUM){
 8001a58:	f241 1293 	movw	r2, #4499	@ 0x1193
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	dd10      	ble.n	8001a82 <temperature_control+0x46>
    }else if(temperature_for_fan_control < T_HIGH){
 8001a60:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001a64:	4293      	cmp	r3, r2
 8001a66:	dd0e      	ble.n	8001a86 <temperature_control+0x4a>
    }else if(temperature_for_fan_control < T_MAX){
 8001a68:	f241 527b 	movw	r2, #5499	@ 0x157b
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	dc0c      	bgt.n	8001a8a <temperature_control+0x4e>
        newduty = FAN_HIGH;
 8001a70:	2050      	movs	r0, #80	@ 0x50
 8001a72:	e003      	b.n	8001a7c <temperature_control+0x40>
        temperature_for_fan_control = pack_information->cell_temperature_avg_centideg;
 8001a74:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 8001a78:	e7ea      	b.n	8001a50 <temperature_control+0x14>
        newduty = FAN_OFF;
 8001a7a:	2000      	movs	r0, #0
    battery_fan_duty(newduty);
 8001a7c:	f7ff ffcc 	bl	8001a18 <battery_fan_duty>
}
 8001a80:	bd08      	pop	{r3, pc}
        newduty = FAN_LOW;
 8001a82:	201e      	movs	r0, #30
 8001a84:	e7fa      	b.n	8001a7c <temperature_control+0x40>
        newduty = FAN_MEDIUM;
 8001a86:	203c      	movs	r0, #60	@ 0x3c
 8001a88:	e7f8      	b.n	8001a7c <temperature_control+0x40>
        newduty = FAN_MAX;
 8001a8a:	2064      	movs	r0, #100	@ 0x64
 8001a8c:	e7f6      	b.n	8001a7c <temperature_control+0x40>
 8001a8e:	bf00      	nop
 8001a90:	200000f0 	.word	0x200000f0

08001a94 <vac_charging_procedure>:

uint32_t charger_millis;
uint8_t charging_first_time = 0;
void vac_charging_procedure(uint8_t command_request){
    if(VAC_CHARGING_STOP){
        charging_first_time = 1;
 8001a94:	2201      	movs	r2, #1
 8001a96:	4b04      	ldr	r3, [pc, #16]	@ (8001aa8 <vac_charging_procedure+0x14>)
 8001a98:	701a      	strb	r2, [r3, #0]
        hv_devices_states_requests->obc.charging_voltage = 0;
 8001a9a:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <vac_charging_procedure+0x18>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	6059      	str	r1, [r3, #4]
        hv_devices_states_requests->obc.charging_current = 0;
 8001aa2:	6099      	str	r1, [r3, #8]
        hv_devices_states_requests->obc.charging_current_state = CHARGING_STATE_A;
 8001aa4:	705a      	strb	r2, [r3, #1]
                    }
                }//else we are in CC charging phase
            }
        }
    }
}
 8001aa6:	4770      	bx	lr
 8001aa8:	200000e4 	.word	0x200000e4
 8001aac:	200000e8 	.word	0x200000e8

08001ab0 <bms_routine>:
void bms_routine(){
 8001ab0:	b538      	push	{r3, r4, r5, lr}
    for(uint8_t n_modules=1;n_modules<=L9963E_SLAVES_N;n_modules++)
 8001ab2:	2401      	movs	r4, #1
 8001ab4:	e005      	b.n	8001ac2 <bms_routine+0x12>
        L9963E_utils_read_cells(n_modules,1);
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f000 fc2b 	bl	8002314 <L9963E_utils_read_cells>
    for(uint8_t n_modules=1;n_modules<=L9963E_SLAVES_N;n_modules++)
 8001abe:	3401      	adds	r4, #1
 8001ac0:	b2e4      	uxtb	r4, r4
 8001ac2:	2c02      	cmp	r4, #2
 8001ac4:	d9f7      	bls.n	8001ab6 <bms_routine+0x6>
    pack_information->pack_voltage_mV = L9963E_utils_get_batt_mv();
 8001ac6:	4c23      	ldr	r4, [pc, #140]	@ (8001b54 <bms_routine+0xa4>)
 8001ac8:	6825      	ldr	r5, [r4, #0]
 8001aca:	f000 fd0b 	bl	80024e4 <L9963E_utils_get_batt_mv>
 8001ace:	6028      	str	r0, [r5, #0]
    L9963E_utils_get_cells(pack_information->cell_voltages_mV);
 8001ad0:	6820      	ldr	r0, [r4, #0]
 8001ad2:	300c      	adds	r0, #12
 8001ad4:	f000 fce6 	bl	80024a4 <L9963E_utils_get_cells>
    L9963E_utils_get_gpios(pack_information->cell_temperatures_centideg);
 8001ad8:	6820      	ldr	r0, [r4, #0]
 8001ada:	3068      	adds	r0, #104	@ 0x68
 8001adc:	f000 fcb2 	bl	8002444 <L9963E_utils_get_gpios>
    pack_information->current_mA = L9963E_utils_get_batt_mA();
 8001ae0:	f000 fd1c 	bl	800251c <L9963E_utils_get_batt_mA>
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	17c2      	asrs	r2, r0, #31
 8001ae8:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
 8001aec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    battery_is_safe = battery_operability();
 8001af0:	f7ff ff82 	bl	80019f8 <battery_operability>
 8001af4:	4c18      	ldr	r4, [pc, #96]	@ (8001b58 <bms_routine+0xa8>)
 8001af6:	7020      	strb	r0, [r4, #0]
    compute_max_deltas();
 8001af8:	f7ff fdf8 	bl	80016ec <compute_max_deltas>
    if(!battery_is_safe){
 8001afc:	7823      	ldrb	r3, [r4, #0]
 8001afe:	b913      	cbnz	r3, 8001b06 <bms_routine+0x56>
        currentstate=HV_BRUTAL_OFF;
 8001b00:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <bms_routine+0xac>)
 8001b02:	2204      	movs	r2, #4
 8001b04:	701a      	strb	r2, [r3, #0]
    switch(currentstate){
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <bms_routine+0xac>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	d814      	bhi.n	8001b38 <bms_routine+0x88>
 8001b0e:	e8df f003 	tbb	[pc, r3]
 8001b12:	0318      	.short	0x0318
 8001b14:	1c13130d 	.word	0x1c13130d
            vac_charging_procedure(VAC_CHARGING_STOP);
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f7ff ffbb 	bl	8001a94 <vac_charging_procedure>
            if(battery_is_safe){
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <bms_routine+0xa8>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b14b      	cbz	r3, 8001b38 <bms_routine+0x88>
                currentstate = HV_ON;
 8001b24:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <bms_routine+0xac>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	e005      	b.n	8001b38 <bms_routine+0x88>
            vac_charging_procedure(VAC_CHARGING_STOP);
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f7ff ffb1 	bl	8001a94 <vac_charging_procedure>
            currentstate = HV_ON;
 8001b32:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <bms_routine+0xac>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
    balancing_procedure();
 8001b38:	f7ff fd64 	bl	8001604 <balancing_procedure>
    temperature_control();
 8001b3c:	f7ff ff7e 	bl	8001a3c <temperature_control>
}
 8001b40:	bd38      	pop	{r3, r4, r5, pc}
            vac_charging_procedure(VAC_CHARGING_STOP);
 8001b42:	2001      	movs	r0, #1
 8001b44:	f7ff ffa6 	bl	8001a94 <vac_charging_procedure>
            break;
 8001b48:	e7f6      	b.n	8001b38 <bms_routine+0x88>
            vac_charging_procedure(VAC_CHARGING_START);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff ffa2 	bl	8001a94 <vac_charging_procedure>
            break;
 8001b50:	e7f2      	b.n	8001b38 <bms_routine+0x88>
 8001b52:	bf00      	nop
 8001b54:	200000f0 	.word	0x200000f0
 8001b58:	200000f4 	.word	0x200000f4
 8001b5c:	20000040 	.word	0x20000040

08001b60 <get_pack_information>:
    //!REDACTED
}

pack_information_t* get_pack_information(){
    return pack_information;
 8001b60:	4b01      	ldr	r3, [pc, #4]	@ (8001b68 <get_pack_information+0x8>)
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	200000f0 	.word	0x200000f0

08001b6c <CAN_wait>:
                               CAN_IT_ERROR | CAN_IT_BUSOFF | CAN_IT_ERROR_PASSIVE | CAN_IT_ERROR_WARNING |
                                   CAN_IT_RX_FIFO0_MSG_PENDING);
  HAL_CAN_Start(&hcan1);
}

static HAL_StatusTypeDef CAN_wait(CAN_HandleTypeDef *hcan, uint8_t timeout) {
 8001b6c:	b570      	push	{r4, r5, r6, lr}
 8001b6e:	4604      	mov	r4, r0
 8001b70:	460e      	mov	r6, r1
  uint32_t tick = HAL_GetTick();
 8001b72:	f001 f859 	bl	8002c28 <HAL_GetTick>
 8001b76:	4605      	mov	r5, r0
  while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f001 f98a 	bl	8002e92 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b7e:	b930      	cbnz	r0, 8001b8e <CAN_wait+0x22>
      if (HAL_GetTick() - tick > timeout)
 8001b80:	f001 f852 	bl	8002c28 <HAL_GetTick>
 8001b84:	1b43      	subs	r3, r0, r5
 8001b86:	42b3      	cmp	r3, r6
 8001b88:	d9f6      	bls.n	8001b78 <CAN_wait+0xc>
          return HAL_TIMEOUT;
 8001b8a:	2003      	movs	r0, #3
 8001b8c:	e000      	b.n	8001b90 <CAN_wait+0x24>
  }
  return HAL_OK;
 8001b8e:	2000      	movs	r0, #0
}
 8001b90:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b94 <MX_CAN1_Init>:
{
 8001b94:	b508      	push	{r3, lr}
  hcan1.Instance = CAN1;
 8001b96:	480e      	ldr	r0, [pc, #56]	@ (8001bd0 <MX_CAN1_Init+0x3c>)
 8001b98:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd4 <MX_CAN1_Init+0x40>)
 8001b9a:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 36;
 8001b9c:	2324      	movs	r3, #36	@ 0x24
 8001b9e:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ba4:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001ba6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001baa:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001bac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001bb0:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bb2:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	7642      	strb	r2, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bb8:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001bba:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001bbc:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001bbe:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001bc0:	f001 f84c 	bl	8002c5c <HAL_CAN_Init>
 8001bc4:	b900      	cbnz	r0, 8001bc8 <MX_CAN1_Init+0x34>
}
 8001bc6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001bc8:	f000 fd68 	bl	800269c <Error_Handler>
}
 8001bcc:	e7fb      	b.n	8001bc6 <MX_CAN1_Init+0x32>
 8001bce:	bf00      	nop
 8001bd0:	20000124 	.word	0x20000124
 8001bd4:	40006400 	.word	0x40006400

08001bd8 <MX_CAN2_Init>:
{
 8001bd8:	b508      	push	{r3, lr}
  hcan2.Instance = CAN2;
 8001bda:	480d      	ldr	r0, [pc, #52]	@ (8001c10 <MX_CAN2_Init+0x38>)
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <MX_CAN2_Init+0x3c>)
 8001bde:	6003      	str	r3, [r0, #0]
  hcan2.Init.Prescaler = 36;
 8001be0:	2324      	movs	r3, #36	@ 0x24
 8001be2:	6043      	str	r3, [r0, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	6083      	str	r3, [r0, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001be8:	60c3      	str	r3, [r0, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001bea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bee:	6102      	str	r2, [r0, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001bf0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001bf4:	6142      	str	r2, [r0, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001bf6:	7603      	strb	r3, [r0, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001bf8:	7643      	strb	r3, [r0, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001bfa:	7683      	strb	r3, [r0, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001bfc:	76c3      	strb	r3, [r0, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001bfe:	7703      	strb	r3, [r0, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001c00:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001c02:	f001 f82b 	bl	8002c5c <HAL_CAN_Init>
 8001c06:	b900      	cbnz	r0, 8001c0a <MX_CAN2_Init+0x32>
}
 8001c08:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001c0a:	f000 fd47 	bl	800269c <Error_Handler>
}
 8001c0e:	e7fb      	b.n	8001c08 <MX_CAN2_Init+0x30>
 8001c10:	200000fc 	.word	0x200000fc
 8001c14:	40006800 	.word	0x40006800

08001c18 <HAL_CAN_MspInit>:
{
 8001c18:	b500      	push	{lr}
 8001c1a:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9305      	str	r3, [sp, #20]
 8001c20:	9306      	str	r3, [sp, #24]
 8001c22:	9307      	str	r3, [sp, #28]
 8001c24:	9308      	str	r3, [sp, #32]
 8001c26:	9309      	str	r3, [sp, #36]	@ 0x24
  if(canHandle->Instance==CAN1)
 8001c28:	6803      	ldr	r3, [r0, #0]
 8001c2a:	4a37      	ldr	r2, [pc, #220]	@ (8001d08 <HAL_CAN_MspInit+0xf0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d005      	beq.n	8001c3c <HAL_CAN_MspInit+0x24>
  else if(canHandle->Instance==CAN2)
 8001c30:	4a36      	ldr	r2, [pc, #216]	@ (8001d0c <HAL_CAN_MspInit+0xf4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d02f      	beq.n	8001c96 <HAL_CAN_MspInit+0x7e>
}
 8001c36:	b00b      	add	sp, #44	@ 0x2c
 8001c38:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c3c:	4a34      	ldr	r2, [pc, #208]	@ (8001d10 <HAL_CAN_MspInit+0xf8>)
 8001c3e:	6813      	ldr	r3, [r2, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d019      	beq.n	8001c7c <HAL_CAN_MspInit+0x64>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	4b31      	ldr	r3, [pc, #196]	@ (8001d14 <HAL_CAN_MspInit+0xfc>)
 8001c4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c50:	f042 0201 	orr.w	r2, r2, #1
 8001c54:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c60:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c64:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c6e:	2309      	movs	r3, #9
 8001c70:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	a905      	add	r1, sp, #20
 8001c74:	4828      	ldr	r0, [pc, #160]	@ (8001d18 <HAL_CAN_MspInit+0x100>)
 8001c76:	f001 f9a1 	bl	8002fbc <HAL_GPIO_Init>
 8001c7a:	e7dc      	b.n	8001c36 <HAL_CAN_MspInit+0x1e>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	4b24      	ldr	r3, [pc, #144]	@ (8001d14 <HAL_CAN_MspInit+0xfc>)
 8001c82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c84:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8001c88:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	9b00      	ldr	r3, [sp, #0]
 8001c94:	e7d8      	b.n	8001c48 <HAL_CAN_MspInit+0x30>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	9302      	str	r3, [sp, #8]
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <HAL_CAN_MspInit+0xfc>)
 8001c9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c9e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001ca2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	9b02      	ldr	r3, [sp, #8]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001cae:	4a18      	ldr	r2, [pc, #96]	@ (8001d10 <HAL_CAN_MspInit+0xf8>)
 8001cb0:	6813      	ldr	r3, [r2, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d019      	beq.n	8001cee <HAL_CAN_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	9304      	str	r3, [sp, #16]
 8001cbe:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <HAL_CAN_MspInit+0xfc>)
 8001cc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cc2:	f042 0202 	orr.w	r2, r2, #2
 8001cc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	9304      	str	r3, [sp, #16]
 8001cd0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001cd2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001cd6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001ce0:	2309      	movs	r3, #9
 8001ce2:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce4:	a905      	add	r1, sp, #20
 8001ce6:	480d      	ldr	r0, [pc, #52]	@ (8001d1c <HAL_CAN_MspInit+0x104>)
 8001ce8:	f001 f968 	bl	8002fbc <HAL_GPIO_Init>
}
 8001cec:	e7a3      	b.n	8001c36 <HAL_CAN_MspInit+0x1e>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	9303      	str	r3, [sp, #12]
 8001cf2:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <HAL_CAN_MspInit+0xfc>)
 8001cf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cf6:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8001cfa:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d02:	9303      	str	r3, [sp, #12]
 8001d04:	9b03      	ldr	r3, [sp, #12]
 8001d06:	e7d8      	b.n	8001cba <HAL_CAN_MspInit+0xa2>
 8001d08:	40006400 	.word	0x40006400
 8001d0c:	40006800 	.word	0x40006800
 8001d10:	200000f8 	.word	0x200000f8
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400

08001d20 <CAN_send>:

HAL_StatusTypeDef CAN_send(CAN_HandleTypeDef *hcan, uint8_t *buffer, CAN_TxHeaderTypeDef *header) {
 8001d20:	b570      	push	{r4, r5, r6, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	4604      	mov	r4, r0
 8001d26:	460e      	mov	r6, r1
 8001d28:	4615      	mov	r5, r2
  if (CAN_wait(hcan, 1) != HAL_OK)
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	f7ff ff1e 	bl	8001b6c <CAN_wait>
 8001d30:	b960      	cbnz	r0, 8001d4c <CAN_send+0x2c>
      return HAL_TIMEOUT;
  uint32_t mailbox;

  volatile HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(hcan, header, buffer, &mailbox);
 8001d32:	ab01      	add	r3, sp, #4
 8001d34:	4632      	mov	r2, r6
 8001d36:	4629      	mov	r1, r5
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f001 f835 	bl	8002da8 <HAL_CAN_AddTxMessage>
 8001d3e:	f88d 0003 	strb.w	r0, [sp, #3]

  return status;
 8001d42:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001d46:	b2c0      	uxtb	r0, r0
}
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	e7fb      	b.n	8001d48 <CAN_send+0x28>

08001d50 <can_routines_init>:
#include "can_utils.h"

uint8_t send_buffer[8];
pack_information_t *pack_information_pointer = NULL;
void can_routines_init(pack_information_t *ptr){
    pack_information_pointer = ptr;
 8001d50:	4b01      	ldr	r3, [pc, #4]	@ (8001d58 <can_routines_init+0x8>)
 8001d52:	6018      	str	r0, [r3, #0]
}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	2000014c 	.word	0x2000014c

08001d5c <can_receive_routine>:
    can_send_msg(0x106,buffer);
}

void can_receive_routine(){
    
}
 8001d5c:	4770      	bx	lr
	...

08001d60 <can_send_msg>:

void can_send_msg(uint32_t id, uint8_t * buffer){
 8001d60:	b500      	push	{lr}
 8001d62:	b087      	sub	sp, #28
    CAN_TxHeaderTypeDef tx_header;
    //uint8_t buffer[8] = {0};
    tx_header.ExtId = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	9301      	str	r3, [sp, #4]
    tx_header.IDE   = CAN_ID_STD;
 8001d68:	9302      	str	r3, [sp, #8]
    tx_header.RTR   = CAN_RTR_DATA;
 8001d6a:	9303      	str	r3, [sp, #12]
    tx_header.StdId = id;
 8001d6c:	9000      	str	r0, [sp, #0]
    CAN_send(&hcan1, buffer, &tx_header);
 8001d6e:	466a      	mov	r2, sp
 8001d70:	4802      	ldr	r0, [pc, #8]	@ (8001d7c <can_send_msg+0x1c>)
 8001d72:	f7ff ffd5 	bl	8001d20 <CAN_send>
}
 8001d76:	b007      	add	sp, #28
 8001d78:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d7c:	20000124 	.word	0x20000124

08001d80 <can_send_routine>:
void can_send_routine(){
 8001d80:	b510      	push	{r4, lr}
 8001d82:	b090      	sub	sp, #64	@ 0x40
    buffer[0]=(cells[0]&0xFF00)>8;
 8001d84:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8001d88:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	bf94      	ite	ls
 8001d90:	2300      	movls	r3, #0
 8001d92:	2301      	movhi	r3, #1
 8001d94:	f88d 3000 	strb.w	r3, [sp]
    buffer[1]=cells[0]&0xFF;
 8001d98:	f88d 2001 	strb.w	r2, [sp, #1]
    buffer[2]=(cells[1]&0xFF00)>8;
 8001d9c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8001da0:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	bf94      	ite	ls
 8001da8:	2300      	movls	r3, #0
 8001daa:	2301      	movhi	r3, #1
 8001dac:	f88d 3002 	strb.w	r3, [sp, #2]
    buffer[3]=cells[1]&0xFF;
 8001db0:	f88d 2003 	strb.w	r2, [sp, #3]
    buffer[4]=(cells[2]&0xFF00)>8;
 8001db4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8001db8:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	bf94      	ite	ls
 8001dc0:	2300      	movls	r3, #0
 8001dc2:	2301      	movhi	r3, #1
 8001dc4:	f88d 3004 	strb.w	r3, [sp, #4]
    buffer[5]=cells[2]&0xFF;
 8001dc8:	f88d 2005 	strb.w	r2, [sp, #5]
    buffer[6]=(cells[3]&0xFF00)>8;
 8001dcc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8001dd0:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	bf94      	ite	ls
 8001dd8:	2300      	movls	r3, #0
 8001dda:	2301      	movhi	r3, #1
 8001ddc:	f88d 3006 	strb.w	r3, [sp, #6]
    buffer[7]=cells[3]&0xFF;
 8001de0:	f88d 2007 	strb.w	r2, [sp, #7]
    can_send_msg(0x100,buffer);
 8001de4:	4669      	mov	r1, sp
 8001de6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001dea:	f7ff ffb9 	bl	8001d60 <can_send_msg>
    buffer[0]=(cells[4]&0xFF00)>8;
 8001dee:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8001df2:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	bf94      	ite	ls
 8001dfa:	2300      	movls	r3, #0
 8001dfc:	2301      	movhi	r3, #1
 8001dfe:	f88d 3000 	strb.w	r3, [sp]
    buffer[1]=cells[4]&0xFF;
 8001e02:	f88d 2001 	strb.w	r2, [sp, #1]
    buffer[2]=(cells[5]&0xFF00)>8;
 8001e06:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8001e0a:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	bf94      	ite	ls
 8001e12:	2300      	movls	r3, #0
 8001e14:	2301      	movhi	r3, #1
 8001e16:	f88d 3002 	strb.w	r3, [sp, #2]
    buffer[3]=cells[5]&0xFF;
 8001e1a:	f88d 2003 	strb.w	r2, [sp, #3]
    buffer[4]=(cells[6]&0xFF00)>8;
 8001e1e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8001e22:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	bf94      	ite	ls
 8001e2a:	2300      	movls	r3, #0
 8001e2c:	2301      	movhi	r3, #1
 8001e2e:	f88d 3004 	strb.w	r3, [sp, #4]
    buffer[5]=cells[6]&0xFF;
 8001e32:	f88d 2005 	strb.w	r2, [sp, #5]
    buffer[6]=(cells[7]&0xFF00)>8;
 8001e36:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8001e3a:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	bf94      	ite	ls
 8001e42:	2300      	movls	r3, #0
 8001e44:	2301      	movhi	r3, #1
 8001e46:	f88d 3006 	strb.w	r3, [sp, #6]
    buffer[7]=cells[7]&0xFF;
 8001e4a:	f88d 2007 	strb.w	r2, [sp, #7]
    can_send_msg(0x101,buffer);
 8001e4e:	4669      	mov	r1, sp
 8001e50:	f240 1001 	movw	r0, #257	@ 0x101
 8001e54:	f7ff ff84 	bl	8001d60 <can_send_msg>
    buffer[0]=(cells[8]&0xFF00)>8;
 8001e58:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8001e5c:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	bf94      	ite	ls
 8001e64:	2300      	movls	r3, #0
 8001e66:	2301      	movhi	r3, #1
 8001e68:	f88d 3000 	strb.w	r3, [sp]
    buffer[1]=cells[8]&0xFF;
 8001e6c:	f88d 2001 	strb.w	r2, [sp, #1]
    buffer[2]=(cells[9]&0xFF00)>8;
 8001e70:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8001e74:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	bf94      	ite	ls
 8001e7c:	2300      	movls	r3, #0
 8001e7e:	2301      	movhi	r3, #1
 8001e80:	f88d 3002 	strb.w	r3, [sp, #2]
    buffer[3]=cells[9]&0xFF;
 8001e84:	f88d 2003 	strb.w	r2, [sp, #3]
    buffer[4]=(cells[10]&0xFF00)>8;
 8001e88:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8001e8c:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	bf94      	ite	ls
 8001e94:	2300      	movls	r3, #0
 8001e96:	2301      	movhi	r3, #1
 8001e98:	f88d 3004 	strb.w	r3, [sp, #4]
    buffer[5]=cells[10]&0xFF;
 8001e9c:	f88d 2005 	strb.w	r2, [sp, #5]
    buffer[6]=(cells[11]&0xFF00)>8;
 8001ea0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8001ea4:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	bf94      	ite	ls
 8001eac:	2300      	movls	r3, #0
 8001eae:	2301      	movhi	r3, #1
 8001eb0:	f88d 3006 	strb.w	r3, [sp, #6]
    buffer[7]=cells[11]&0xFF;
 8001eb4:	f88d 2007 	strb.w	r2, [sp, #7]
    can_send_msg(0x102,buffer);
 8001eb8:	4669      	mov	r1, sp
 8001eba:	f44f 7081 	mov.w	r0, #258	@ 0x102
 8001ebe:	f7ff ff4f 	bl	8001d60 <can_send_msg>
    buffer[0]=(cells[12]&0xFF00)>8;
 8001ec2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8001ec6:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	bf94      	ite	ls
 8001ece:	2300      	movls	r3, #0
 8001ed0:	2301      	movhi	r3, #1
 8001ed2:	f88d 3000 	strb.w	r3, [sp]
    buffer[1]=cells[12]&0xFF;
 8001ed6:	f88d 2001 	strb.w	r2, [sp, #1]
    buffer[2]=(cells[13]&0xFF00)>8;
 8001eda:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8001ede:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	bf94      	ite	ls
 8001ee6:	2300      	movls	r3, #0
 8001ee8:	2301      	movhi	r3, #1
 8001eea:	f88d 3002 	strb.w	r3, [sp, #2]
    buffer[3]=cells[13]&0xFF;
 8001eee:	f88d 2003 	strb.w	r2, [sp, #3]
    buffer[4]=(cells[14]&0xFF00)>8;
 8001ef2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8001ef6:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	bf94      	ite	ls
 8001efe:	2300      	movls	r3, #0
 8001f00:	2301      	movhi	r3, #1
 8001f02:	f88d 3004 	strb.w	r3, [sp, #4]
    buffer[5]=cells[14]&0xFF;
 8001f06:	f88d 2005 	strb.w	r2, [sp, #5]
    buffer[6]=(cells[15]&0xFF00)>8;
 8001f0a:	f8bd 2026 	ldrh.w	r2, [sp, #38]	@ 0x26
 8001f0e:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	bf94      	ite	ls
 8001f16:	2300      	movls	r3, #0
 8001f18:	2301      	movhi	r3, #1
 8001f1a:	f88d 3006 	strb.w	r3, [sp, #6]
    buffer[7]=cells[15]&0xFF;
 8001f1e:	f88d 2007 	strb.w	r2, [sp, #7]
    can_send_msg(0x103,buffer);
 8001f22:	4669      	mov	r1, sp
 8001f24:	f240 1003 	movw	r0, #259	@ 0x103
 8001f28:	f7ff ff1a 	bl	8001d60 <can_send_msg>
    buffer[0]=(cells[16]&0xFF00)>8;
 8001f2c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8001f30:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	bf94      	ite	ls
 8001f38:	2300      	movls	r3, #0
 8001f3a:	2301      	movhi	r3, #1
 8001f3c:	f88d 3000 	strb.w	r3, [sp]
    buffer[1]=cells[16]&0xFF;
 8001f40:	f88d 2001 	strb.w	r2, [sp, #1]
    buffer[2]=(cells[17]&0xFF00)>8;
 8001f44:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8001f48:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	bf94      	ite	ls
 8001f50:	2300      	movls	r3, #0
 8001f52:	2301      	movhi	r3, #1
 8001f54:	f88d 3002 	strb.w	r3, [sp, #2]
    buffer[3]=cells[17]&0xFF;
 8001f58:	f88d 2003 	strb.w	r2, [sp, #3]
    buffer[4]=(cells[18]&0xFF00)>8;
 8001f5c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8001f60:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	bf94      	ite	ls
 8001f68:	2300      	movls	r3, #0
 8001f6a:	2301      	movhi	r3, #1
 8001f6c:	f88d 3004 	strb.w	r3, [sp, #4]
    buffer[5]=cells[18]&0xFF;
 8001f70:	f88d 2005 	strb.w	r2, [sp, #5]
    buffer[6]=(cells[19]&0xFF00)>8;
 8001f74:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 8001f78:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	bf94      	ite	ls
 8001f80:	2300      	movls	r3, #0
 8001f82:	2301      	movhi	r3, #1
 8001f84:	f88d 3006 	strb.w	r3, [sp, #6]
    buffer[7]=cells[19]&0xFF;
 8001f88:	f88d 2007 	strb.w	r2, [sp, #7]
    can_send_msg(0x104,buffer);
 8001f8c:	4669      	mov	r1, sp
 8001f8e:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8001f92:	f7ff fee5 	bl	8001d60 <can_send_msg>
    buffer[0]=(cells[20]&0xFF00)>8;
 8001f96:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8001f9a:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	bf94      	ite	ls
 8001fa2:	2300      	movls	r3, #0
 8001fa4:	2301      	movhi	r3, #1
 8001fa6:	f88d 3000 	strb.w	r3, [sp]
    buffer[1]=cells[20]&0xFF;
 8001faa:	f88d 2001 	strb.w	r2, [sp, #1]
    buffer[2]=(cells[21]&0xFF00)>8;
 8001fae:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8001fb2:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	bf94      	ite	ls
 8001fba:	2300      	movls	r3, #0
 8001fbc:	2301      	movhi	r3, #1
 8001fbe:	f88d 3002 	strb.w	r3, [sp, #2]
    buffer[3]=cells[21]&0xFF;
 8001fc2:	f88d 2003 	strb.w	r2, [sp, #3]
    buffer[4]=(cells[22]&0xFF00)>8;
 8001fc6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8001fca:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	bf94      	ite	ls
 8001fd2:	2300      	movls	r3, #0
 8001fd4:	2301      	movhi	r3, #1
 8001fd6:	f88d 3004 	strb.w	r3, [sp, #4]
    buffer[5]=cells[22]&0xFF;
 8001fda:	f88d 2005 	strb.w	r2, [sp, #5]
    buffer[6]=(cells[23]&0xFF00)>8;
 8001fde:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8001fe2:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	bf94      	ite	ls
 8001fea:	2300      	movls	r3, #0
 8001fec:	2301      	movhi	r3, #1
 8001fee:	f88d 3006 	strb.w	r3, [sp, #6]
    buffer[7]=cells[23]&0xFF;
 8001ff2:	f88d 2007 	strb.w	r2, [sp, #7]
    can_send_msg(0x105,buffer);
 8001ff6:	4669      	mov	r1, sp
 8001ff8:	f240 1005 	movw	r0, #261	@ 0x105
 8001ffc:	f7ff feb0 	bl	8001d60 <can_send_msg>
    buffer[0]=(cells[24]&0xFF00)>8;
 8002000:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8002004:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8002008:	2b08      	cmp	r3, #8
 800200a:	bf94      	ite	ls
 800200c:	2300      	movls	r3, #0
 800200e:	2301      	movhi	r3, #1
 8002010:	f88d 3000 	strb.w	r3, [sp]
    buffer[1]=cells[24]&0xFF;
 8002014:	f88d 2001 	strb.w	r2, [sp, #1]
    buffer[2]=(cells[25]&0xFF00)>8;
 8002018:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 800201c:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8002020:	2b08      	cmp	r3, #8
 8002022:	bf94      	ite	ls
 8002024:	2300      	movls	r3, #0
 8002026:	2301      	movhi	r3, #1
 8002028:	f88d 3002 	strb.w	r3, [sp, #2]
    buffer[3]=cells[25]&0xFF;
 800202c:	f88d 2003 	strb.w	r2, [sp, #3]
    buffer[4]=(cells[26]&0xFF00)>8;
 8002030:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8002034:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8002038:	2b08      	cmp	r3, #8
 800203a:	bf94      	ite	ls
 800203c:	2300      	movls	r3, #0
 800203e:	2301      	movhi	r3, #1
 8002040:	f88d 3004 	strb.w	r3, [sp, #4]
    buffer[5]=cells[26]&0xFF;
 8002044:	f88d 2005 	strb.w	r2, [sp, #5]
    buffer[6]=(cells[27]&0xFF00)>8;
 8002048:	f8bd 203e 	ldrh.w	r2, [sp, #62]	@ 0x3e
 800204c:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8002050:	2b08      	cmp	r3, #8
 8002052:	bf94      	ite	ls
 8002054:	2300      	movls	r3, #0
 8002056:	2301      	movhi	r3, #1
 8002058:	f88d 3006 	strb.w	r3, [sp, #6]
    buffer[7]=cells[27]&0xFF;
 800205c:	f88d 2007 	strb.w	r2, [sp, #7]
    can_send_msg(0x106,buffer);
 8002060:	4669      	mov	r1, sp
 8002062:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8002066:	f7ff fe7b 	bl	8001d60 <can_send_msg>
}
 800206a:	b010      	add	sp, #64	@ 0x40
 800206c:	bd10      	pop	{r4, pc}
	...

08002070 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002074:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002076:	ad05      	add	r5, sp, #20
 8002078:	2400      	movs	r4, #0
 800207a:	9405      	str	r4, [sp, #20]
 800207c:	9406      	str	r4, [sp, #24]
 800207e:	9407      	str	r4, [sp, #28]
 8002080:	9408      	str	r4, [sp, #32]
 8002082:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002084:	9400      	str	r4, [sp, #0]
 8002086:	4b4a      	ldr	r3, [pc, #296]	@ (80021b0 <MX_GPIO_Init+0x140>)
 8002088:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800208a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800208e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002092:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8002096:	9200      	str	r2, [sp, #0]
 8002098:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800209a:	9401      	str	r4, [sp, #4]
 800209c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800209e:	f042 0204 	orr.w	r2, r2, #4
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80020a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020a6:	f002 0204 	and.w	r2, r2, #4
 80020aa:	9201      	str	r2, [sp, #4]
 80020ac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	9402      	str	r4, [sp, #8]
 80020b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80020b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020ba:	f002 0201 	and.w	r2, r2, #1
 80020be:	9202      	str	r2, [sp, #8]
 80020c0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c2:	9403      	str	r4, [sp, #12]
 80020c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020c6:	f042 0202 	orr.w	r2, r2, #2
 80020ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80020cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020ce:	f002 0202 	and.w	r2, r2, #2
 80020d2:	9203      	str	r2, [sp, #12]
 80020d4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d6:	9404      	str	r4, [sp, #16]
 80020d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020da:	f042 0208 	orr.w	r2, r2, #8
 80020de:	631a      	str	r2, [r3, #48]	@ 0x30
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	9304      	str	r3, [sp, #16]
 80020e8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L9963T_H_NCS_GPIO_OUT_Pin|L9963T_L_NCS_GPIO_OUT_Pin|L9963T_L_DIS_GPIO_INOUT_Pin|L9963T_H_BNE_GPIO_IN_Pin
 80020ea:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 80021b8 <MX_GPIO_Init+0x148>
 80020ee:	4622      	mov	r2, r4
 80020f0:	f641 2171 	movw	r1, #6769	@ 0x1a71
 80020f4:	4640      	mov	r0, r8
 80020f6:	f001 f858 	bl	80031aa <HAL_GPIO_WritePin>
                          |L9963T_H_DIS_GPIO_INOUT_Pin|OBC_HV_POSITIVE_CONTACTOR_Pin|DCDC_HV_POSITIVE_RELE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L9963T_L_ISOFREQ_GPIO_OUT_Pin|L9963T_L_TXEN_GPIO_OUT_Pin|BATTERY_HV_POSITIVE_CONTACTOR_Pin|BATTERY_HV_NEGATIVE_CONTACTOR_Pin
 80020fa:	f8df 90c0 	ldr.w	r9, [pc, #192]	@ 80021bc <MX_GPIO_Init+0x14c>
 80020fe:	4622      	mov	r2, r4
 8002100:	f240 117d 	movw	r1, #381	@ 0x17d
 8002104:	4648      	mov	r0, r9
 8002106:	f001 f850 	bl	80031aa <HAL_GPIO_WritePin>
                          |BATTERY_HV_PRECHARGE_CONTACTOR_Pin|BATTERY_HV_DISCHARGE_CONTACTOR_Pin|L9963T_H_ISOFREQ_GPIO_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPPT_HV_PRECHARGE_RELE_GPIO_Port, MPPT_HV_PRECHARGE_RELE_Pin, GPIO_PIN_RESET);
 800210a:	4f2a      	ldr	r7, [pc, #168]	@ (80021b4 <MX_GPIO_Init+0x144>)
 800210c:	4622      	mov	r2, r4
 800210e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002112:	4638      	mov	r0, r7
 8002114:	f001 f849 	bl	80031aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPPT_HV_POSITIVE_CONTACTOR_GPIO_Port, MPPT_HV_POSITIVE_CONTACTOR_Pin, GPIO_PIN_RESET);
 8002118:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 80021c0 <MX_GPIO_Init+0x150>
 800211c:	4622      	mov	r2, r4
 800211e:	2104      	movs	r1, #4
 8002120:	4650      	mov	r0, sl
 8002122:	f001 f842 	bl	80031aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L9963T_H_NCS_GPIO_OUT_Pin L9963T_L_NCS_GPIO_OUT_Pin L9963T_L_DIS_GPIO_INOUT_Pin L9963T_H_BNE_GPIO_IN_Pin
                           L9963T_H_DIS_GPIO_INOUT_Pin OBC_HV_POSITIVE_CONTACTOR_Pin DCDC_HV_POSITIVE_RELE_Pin */
  GPIO_InitStruct.Pin = L9963T_H_NCS_GPIO_OUT_Pin|L9963T_L_NCS_GPIO_OUT_Pin|L9963T_L_DIS_GPIO_INOUT_Pin|L9963T_H_BNE_GPIO_IN_Pin
 8002126:	f641 2371 	movw	r3, #6769	@ 0x1a71
 800212a:	9305      	str	r3, [sp, #20]
                          |L9963T_H_DIS_GPIO_INOUT_Pin|OBC_HV_POSITIVE_CONTACTOR_Pin|DCDC_HV_POSITIVE_RELE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212c:	2601      	movs	r6, #1
 800212e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002134:	4629      	mov	r1, r5
 8002136:	4640      	mov	r0, r8
 8002138:	f000 ff40 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : L9963T_L_ISOFREQ_GPIO_OUT_Pin L9963T_L_TXEN_GPIO_OUT_Pin BATTERY_HV_POSITIVE_CONTACTOR_Pin BATTERY_HV_NEGATIVE_CONTACTOR_Pin
                           BATTERY_HV_PRECHARGE_CONTACTOR_Pin BATTERY_HV_DISCHARGE_CONTACTOR_Pin L9963T_H_ISOFREQ_GPIO_OUT_Pin */
  GPIO_InitStruct.Pin = L9963T_L_ISOFREQ_GPIO_OUT_Pin|L9963T_L_TXEN_GPIO_OUT_Pin|BATTERY_HV_POSITIVE_CONTACTOR_Pin|BATTERY_HV_NEGATIVE_CONTACTOR_Pin
 800213c:	f240 137d 	movw	r3, #381	@ 0x17d
 8002140:	9305      	str	r3, [sp, #20]
                          |BATTERY_HV_PRECHARGE_CONTACTOR_Pin|BATTERY_HV_DISCHARGE_CONTACTOR_Pin|L9963T_H_ISOFREQ_GPIO_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002142:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	4629      	mov	r1, r5
 800214a:	4648      	mov	r0, r9
 800214c:	f000 ff36 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : L9963T_L_BNE_GPIO_IN_Pin */
  GPIO_InitStruct.Pin = L9963T_L_BNE_GPIO_IN_Pin;
 8002150:	2302      	movs	r3, #2
 8002152:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002154:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(L9963T_L_BNE_GPIO_IN_GPIO_Port, &GPIO_InitStruct);
 8002158:	4629      	mov	r1, r5
 800215a:	4648      	mov	r0, r9
 800215c:	f000 ff2e 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : L9963T_H_TXEN_GPIO_OUT_Pin */
  GPIO_InitStruct.Pin = L9963T_H_TXEN_GPIO_OUT_Pin;
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002164:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(L9963T_H_TXEN_GPIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8002168:	4629      	mov	r1, r5
 800216a:	4640      	mov	r0, r8
 800216c:	f000 ff26 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : FAULT_L9963E_H_Pin FAULT_L9963E_L_Pin */
  GPIO_InitStruct.Pin = FAULT_L9963E_H_Pin|FAULT_L9963E_L_Pin;
 8002170:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002174:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002176:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	4629      	mov	r1, r5
 800217c:	4638      	mov	r0, r7
 800217e:	f000 ff1d 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MPPT_HV_PRECHARGE_RELE_Pin */
  GPIO_InitStruct.Pin = MPPT_HV_PRECHARGE_RELE_Pin;
 8002182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002186:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002188:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(MPPT_HV_PRECHARGE_RELE_GPIO_Port, &GPIO_InitStruct);
 800218e:	4629      	mov	r1, r5
 8002190:	4638      	mov	r0, r7
 8002192:	f000 ff13 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MPPT_HV_POSITIVE_CONTACTOR_Pin */
  GPIO_InitStruct.Pin = MPPT_HV_POSITIVE_CONTACTOR_Pin;
 8002196:	2304      	movs	r3, #4
 8002198:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(MPPT_HV_POSITIVE_CONTACTOR_GPIO_Port, &GPIO_InitStruct);
 80021a0:	4629      	mov	r1, r5
 80021a2:	4650      	mov	r0, sl
 80021a4:	f000 ff0a 	bl	8002fbc <HAL_GPIO_Init>

}
 80021a8:	b00a      	add	sp, #40	@ 0x28
 80021aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020000 	.word	0x40020000
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020400 	.word	0x40020400
 80021c0:	40020c00 	.word	0x40020c00

080021c4 <L9963E_utils_init>:
    .L9963E_IF_GPIO_WritePin = GPIO_WritePinL,
    .L9963E_IF_SPI_Receive = SPI_ReceiveL,
    .L9963E_IF_SPI_Transmit = SPI_TransmitL
};

void L9963E_utils_init(void) {
 80021c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021c8:	b091      	sub	sp, #68	@ 0x44
  L9963E_init(&h9l, interfaceL, L9963E_SLAVES_N);
 80021ca:	4b50      	ldr	r3, [pc, #320]	@ (800230c <L9963E_utils_init+0x148>)
 80021cc:	4d50      	ldr	r5, [pc, #320]	@ (8002310 <L9963E_utils_init+0x14c>)
 80021ce:	f04f 0802 	mov.w	r8, #2
 80021d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80021d6:	f103 020c 	add.w	r2, r3, #12
 80021da:	ca07      	ldmia	r2, {r0, r1, r2}
 80021dc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80021e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021e2:	4628      	mov	r0, r5
 80021e4:	f7fe fce6 	bl	8000bb4 <L9963E_init>
  //L9963E_init(&h9l, interfaceH, L9963E_SLAVES_N);
  //L9963E_addressing_procedure(&h9l, 0b11, 0, 0, 1);
  L9963E_addressing_procedure(&h9l, 0b00, 1, 0, 1);
 80021e8:	2701      	movs	r7, #1
 80021ea:	9700      	str	r7, [sp, #0]
 80021ec:	2300      	movs	r3, #0
 80021ee:	463a      	mov	r2, r7
 80021f0:	4619      	mov	r1, r3
 80021f2:	4628      	mov	r0, r5
 80021f4:	f7fe fcff 	bl	8000bf6 <L9963E_addressing_procedure>

    //configurazione dei gpio sulle board slaves
    L9963E_RegisterUnionTypeDef gpio9_3_conf_reg = {.generic = L9963E_GPIO9_3_CONF_DEFAULT};
 80021f8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80021fc:	930f      	str	r3, [sp, #60]	@ 0x3c
    gpio9_3_conf_reg.GPIO9_3_CONF.GPIO3_CONFIG = 0b00;
    gpio9_3_conf_reg.GPIO9_3_CONF.GPIO4_CONFIG = 00;
    gpio9_3_conf_reg.GPIO9_3_CONF.GPIO5_CONFIG = 00;
    gpio9_3_conf_reg.GPIO9_3_CONF.GPIO6_CONFIG = 00;
    gpio9_3_conf_reg.GPIO9_3_CONF.GPIO7_CONFIG = 01;
 80021fe:	f89d 303d 	ldrb.w	r3, [sp, #61]	@ 0x3d
 8002202:	f367 1305 	bfi	r3, r7, #4, #2
 8002206:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
    gpio9_3_conf_reg.GPIO9_3_CONF.GPIO8_CONFIG = 00;
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002210:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
    gpio9_3_conf_reg.GPIO9_3_CONF.GPIO9_CONFIG = 00;
    gpio9_3_conf_reg.GPIO9_3_CONF.GPIO7_WUP_EN = 00;
    L9963E_DRV_reg_write(&(h9l.drv_handle), L9963E_DEVICE_BROADCAST, L9963E_GPIO9_3_CONF_ADDR, &gpio9_3_conf_reg, 10);
 8002214:	260a      	movs	r6, #10
 8002216:	9600      	str	r6, [sp, #0]
 8002218:	ab0f      	add	r3, sp, #60	@ 0x3c
 800221a:	2214      	movs	r2, #20
 800221c:	2100      	movs	r1, #0
 800221e:	4628      	mov	r0, r5
 8002220:	f7ff f9a6 	bl	8001570 <L9963E_DRV_reg_write>

    // Configuring cells overvoltage/undervoltage thresholds
    L9963E_RegisterUnionTypeDef vcell_thresh_uv_ov_reg      = {.generic = L9963E_VCELL_THRESH_UV_OV_DEFAULT};
 8002224:	2400      	movs	r4, #0
 8002226:	940e      	str	r4, [sp, #56]	@ 0x38
    vcell_thresh_uv_ov_reg.VCELL_THRESH_UV_OV.threshVcellOV = 0xff;
 8002228:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800222c:	f88d 9039 	strb.w	r9, [sp, #57]	@ 0x39
    L9963E_DRV_reg_write(
 8002230:	9600      	str	r6, [sp, #0]
 8002232:	ab0e      	add	r3, sp, #56	@ 0x38
 8002234:	220b      	movs	r2, #11
 8002236:	4621      	mov	r1, r4
 8002238:	4628      	mov	r0, r5
 800223a:	f7ff f999 	bl	8001570 <L9963E_DRV_reg_write>
        &(h9l.drv_handle), L9963E_DEVICE_BROADCAST, L9963E_VCELL_THRESH_UV_OV_ADDR, &vcell_thresh_uv_ov_reg, 10);

    // Configuring total voltage tresholds
    L9963E_RegisterUnionTypeDef vbat_sum_th_reg  = {.generic = L9963E_VBATT_SUM_TH_DEFAULT};
 800223e:	940d      	str	r4, [sp, #52]	@ 0x34
    vbat_sum_th_reg.VBATT_SUM_TH.VBATT_SUM_OV_TH = 0xff;
 8002240:	f88d 9035 	strb.w	r9, [sp, #53]	@ 0x35
    L9963E_DRV_reg_write(
 8002244:	9600      	str	r6, [sp, #0]
 8002246:	ab0d      	add	r3, sp, #52	@ 0x34
 8002248:	220c      	movs	r2, #12
 800224a:	4621      	mov	r1, r4
 800224c:	4628      	mov	r0, r5
 800224e:	f7ff f98f 	bl	8001570 <L9963E_DRV_reg_write>
        &(h9l.drv_handle), L9963E_DEVICE_BROADCAST, L9963E_VBATT_SUM_TH_ADDR, &vbat_sum_th_reg, 10);

    //* BALANCING REGISTER SETTINGS
    L9963E_RegisterUnionTypeDef bal1_reg = {.generic = L9963E_BAL_1_DEFAULT};
 8002252:	940c      	str	r4, [sp, #48]	@ 0x30
    bal1_reg.Bal_1.bal_stop = 1;
 8002254:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8002258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800225c:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
    L9963E_DRV_reg_write(
 8002260:	9600      	str	r6, [sp, #0]
 8002262:	ab0c      	add	r3, sp, #48	@ 0x30
 8002264:	2203      	movs	r2, #3
 8002266:	4621      	mov	r1, r4
 8002268:	4628      	mov	r0, r5
 800226a:	f7ff f981 	bl	8001570 <L9963E_DRV_reg_write>
        &(h9l.drv_handle), L9963E_DEVICE_BROADCAST, L9963E_Bal_1_ADDR, &bal1_reg, 10);
    
    L9963E_RegisterUnionTypeDef bal2_reg = {.generic = L9963E_BAL_2_DEFAULT};
 800226e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002272:	930b      	str	r3, [sp, #44]	@ 0x2c
    bal2_reg.Bal_2.Balmode = 1;
    L9963E_DRV_reg_write(
 8002274:	9600      	str	r6, [sp, #0]
 8002276:	ab0b      	add	r3, sp, #44	@ 0x2c
 8002278:	2204      	movs	r2, #4
 800227a:	4621      	mov	r1, r4
 800227c:	4628      	mov	r0, r5
 800227e:	f7ff f977 	bl	8001570 <L9963E_DRV_reg_write>
        &(h9l.drv_handle), L9963E_DEVICE_BROADCAST, L9963E_Bal_2_ADDR, &bal2_reg, 10);
    
    L9963E_RegisterUnionTypeDef bal3_reg = {.generic = L9963E_BAL_3_DEFAULT};
 8002282:	940a      	str	r4, [sp, #40]	@ 0x28
    L9963E_DRV_reg_write(
 8002284:	9600      	str	r6, [sp, #0]
 8002286:	ab0a      	add	r3, sp, #40	@ 0x28
 8002288:	2205      	movs	r2, #5
 800228a:	4621      	mov	r1, r4
 800228c:	4628      	mov	r0, r5
 800228e:	f7ff f96f 	bl	8001570 <L9963E_DRV_reg_write>
        &(h9l.drv_handle), L9963E_DEVICE_BROADCAST, L9963E_Bal_3_ADDR, &bal3_reg, 10);
    
    L9963E_RegisterUnionTypeDef bal4_reg = {.generic = L9963E_BAL_4_DEFAULT};
 8002292:	9409      	str	r4, [sp, #36]	@ 0x24
    L9963E_DRV_reg_write(
 8002294:	9600      	str	r6, [sp, #0]
 8002296:	ab09      	add	r3, sp, #36	@ 0x24
 8002298:	2206      	movs	r2, #6
 800229a:	4621      	mov	r1, r4
 800229c:	4628      	mov	r0, r5
 800229e:	f7ff f967 	bl	8001570 <L9963E_DRV_reg_write>
        &(h9l.drv_handle), L9963E_DEVICE_BROADCAST, L9963E_Bal_4_ADDR, &bal4_reg, 10);
    
    L9963E_RegisterUnionTypeDef bal5_reg = {.generic = L9963E_BAL_5_DEFAULT};
 80022a2:	9408      	str	r4, [sp, #32]
    L9963E_DRV_reg_write(
 80022a4:	9600      	str	r6, [sp, #0]
 80022a6:	ab08      	add	r3, sp, #32
 80022a8:	2207      	movs	r2, #7
 80022aa:	4621      	mov	r1, r4
 80022ac:	4628      	mov	r0, r5
 80022ae:	f7ff f95f 	bl	8001570 <L9963E_DRV_reg_write>
        &(h9l.drv_handle), L9963E_DEVICE_BROADCAST, L9963E_Bal_5_ADDR, &bal5_reg, 10);
    
    L9963E_RegisterUnionTypeDef bal6_reg = {.generic = L9963E_BAL_6_DEFAULT};
 80022b2:	9407      	str	r4, [sp, #28]
    L9963E_DRV_reg_write(
 80022b4:	9600      	str	r6, [sp, #0]
 80022b6:	ab07      	add	r3, sp, #28
 80022b8:	2208      	movs	r2, #8
 80022ba:	4621      	mov	r1, r4
 80022bc:	4628      	mov	r0, r5
 80022be:	f7ff f957 	bl	8001570 <L9963E_DRV_reg_write>
        &(h9l.drv_handle), L9963E_DEVICE_BROADCAST, L9963E_Bal_6_ADDR, &bal6_reg, 10);
    
    L9963E_RegisterUnionTypeDef bal7_reg = {.generic = L9963E_BAL_7_DEFAULT};
 80022c2:	9406      	str	r4, [sp, #24]
    L9963E_DRV_reg_write(
 80022c4:	9600      	str	r6, [sp, #0]
 80022c6:	ab06      	add	r3, sp, #24
 80022c8:	2209      	movs	r2, #9
 80022ca:	4621      	mov	r1, r4
 80022cc:	4628      	mov	r0, r5
 80022ce:	f7ff f94f 	bl	8001570 <L9963E_DRV_reg_write>
        &(h9l.drv_handle), L9963E_DEVICE_BROADCAST, L9963E_Bal_7_ADDR, &bal7_reg, 10);
    
    L9963E_RegisterUnionTypeDef bal8_reg = {.generic = L9963E_BAL_8_DEFAULT};
 80022d2:	9405      	str	r4, [sp, #20]
    L9963E_DRV_reg_write(
 80022d4:	9600      	str	r6, [sp, #0]
 80022d6:	ab05      	add	r3, sp, #20
 80022d8:	4632      	mov	r2, r6
 80022da:	4621      	mov	r1, r4
 80022dc:	4628      	mov	r0, r5
 80022de:	f7ff f947 	bl	8001570 <L9963E_DRV_reg_write>
        &(h9l.drv_handle), L9963E_DEVICE_BROADCAST, L9963E_Bal_8_ADDR, &bal8_reg, 10);
    
    //abilitazione del regolatore VTREF
    L9963E_enable_vref(&h9l, L9963E_DEVICE_BROADCAST, 1);
 80022e2:	463a      	mov	r2, r7
 80022e4:	4621      	mov	r1, r4
 80022e6:	4628      	mov	r0, r5
 80022e8:	f7fe ff5f 	bl	80011aa <L9963E_enable_vref>
    
    //impostazione timeout comunicazione ISOSPI per errori
    L9963E_setCommTimeout(&h9l, _1024MS, L9963E_DEVICE_BROADCAST, 0);
 80022ec:	4623      	mov	r3, r4
 80022ee:	4622      	mov	r2, r4
 80022f0:	4641      	mov	r1, r8
 80022f2:	4628      	mov	r0, r5
 80022f4:	f7fe fd26 	bl	8000d44 <L9963E_setCommTimeout>
 
    //comunicazione alle board slaves quali celle sono attive
    L9963E_set_enabled_cells(&h9l, L9963E_DEVICE_BROADCAST, ENABLED_CELLS);
 80022f8:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 80022fc:	4621      	mov	r1, r4
 80022fe:	4628      	mov	r0, r5
 8002300:	f7fe fd46 	bl	8000d90 <L9963E_set_enabled_cells>
}
 8002304:	b011      	add	sp, #68	@ 0x44
 8002306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800230a:	bf00      	nop
 800230c:	08005960 	.word	0x08005960
 8002310:	200001ac 	.word	0x200001ac

08002314 <L9963E_utils_read_cells>:

//* first parameter: module_id in the chain (1 to L9963E_SLAVES_N)
//* second parameter: 1 for read gpsios, 0 for not
void L9963E_utils_read_cells(uint8_t module_id, uint8_t read_gpio) {
 8002314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002318:	b087      	sub	sp, #28
 800231a:	4605      	mov	r5, r0
 800231c:	4689      	mov	r9, r1
  L9963E_StatusTypeDef e;
  uint8_t c_done;
  uint8_t reading_retry_counter = 0;
  do {
    L9963E_poll_conversion(&h9l, module_id, &c_done);
 800231e:	f10d 0217 	add.w	r2, sp, #23
 8002322:	4629      	mov	r1, r5
 8002324:	483f      	ldr	r0, [pc, #252]	@ (8002424 <L9963E_utils_read_cells+0x110>)
 8002326:	f7fe fe06 	bl	8000f36 <L9963E_poll_conversion>
  } while (!c_done);
 800232a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f5      	beq.n	800231e <L9963E_utils_read_cells+0xa>
  L9963E_start_conversion(&h9l, module_id, 0b000, read_gpio ? L9963E_GPIO_CONV : 0);
 8002332:	f1b9 0300 	subs.w	r3, r9, #0
 8002336:	bf18      	it	ne
 8002338:	2301      	movne	r3, #1
 800233a:	2200      	movs	r2, #0
 800233c:	4629      	mov	r1, r5
 800233e:	4839      	ldr	r0, [pc, #228]	@ (8002424 <L9963E_utils_read_cells+0x110>)
 8002340:	f7fe fdc2 	bl	8000ec8 <L9963E_start_conversion>
  
  uint16_t voltage = 0;
 8002344:	2400      	movs	r4, #0
 8002346:	f8ad 4014 	strh.w	r4, [sp, #20]
  uint32_t voltage32 = 0;
 800234a:	9404      	str	r4, [sp, #16]
  uint8_t d_rdy = 0;
 800234c:	f88d 400f 	strb.w	r4, [sp, #15]
  uint8_t i = module_id-1;
 8002350:	f105 38ff 	add.w	r8, r5, #4294967295
 8002354:	fa5f f888 	uxtb.w	r8, r8
  for(uint8_t cells_addresses_index = 0; cells_addresses_index < L9963E_CELLS_N; cells_addresses_index++){
 8002358:	e020      	b.n	800239c <L9963E_utils_read_cells+0x88>
    reading_retry_counter = 0;
    do {
      e = L9963E_read_cell_voltage(&h9l, module_id, cells_addresses[cells_addresses_index], &voltage, &d_rdy);
    } while(e != L9963E_OK || !d_rdy || reading_retry_counter++ < MAX_READING_RETRY_L9963E_CELLS);
 800235a:	461f      	mov	r7, r3
      e = L9963E_read_cell_voltage(&h9l, module_id, cells_addresses[cells_addresses_index], &voltage, &d_rdy);
 800235c:	4b32      	ldr	r3, [pc, #200]	@ (8002428 <L9963E_utils_read_cells+0x114>)
 800235e:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 8002362:	f10d 030f 	add.w	r3, sp, #15
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	ab05      	add	r3, sp, #20
 800236a:	4629      	mov	r1, r5
 800236c:	482d      	ldr	r0, [pc, #180]	@ (8002424 <L9963E_utils_read_cells+0x110>)
 800236e:	f7fe fdfe 	bl	8000f6e <L9963E_read_cell_voltage>
    } while(e != L9963E_OK || !d_rdy || reading_retry_counter++ < MAX_READING_RETRY_L9963E_CELLS);
 8002372:	2800      	cmp	r0, #0
 8002374:	d1f2      	bne.n	800235c <L9963E_utils_read_cells+0x48>
 8002376:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0ee      	beq.n	800235c <L9963E_utils_read_cells+0x48>
 800237e:	1c7b      	adds	r3, r7, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2f09      	cmp	r7, #9
 8002384:	d9e9      	bls.n	800235a <L9963E_utils_read_cells+0x46>
    if(e == L9963E_OK)
      vcellsm[i][cells_addresses_index] = voltage;
 8002386:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
 800238a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 800238e:	4b27      	ldr	r3, [pc, #156]	@ (800242c <L9963E_utils_read_cells+0x118>)
 8002390:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8002394:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
  for(uint8_t cells_addresses_index = 0; cells_addresses_index < L9963E_CELLS_N; cells_addresses_index++){
 8002398:	3401      	adds	r4, #1
 800239a:	b2e4      	uxtb	r4, r4
 800239c:	2c0d      	cmp	r4, #13
 800239e:	d801      	bhi.n	80023a4 <L9963E_utils_read_cells+0x90>
    reading_retry_counter = 0;
 80023a0:	2700      	movs	r7, #0
 80023a2:	e7db      	b.n	800235c <L9963E_utils_read_cells+0x48>
  }

    /******* READING TOTAL BATTERY VOLTAGES *******/
    //* for each node, read from two registers: one is the sum of all cell voltages, the other is the direct measurement of the total voltage of the single node
    do {
        e = L9963E_read_batt_voltage(&h9l, module_id, ((uint16_t *)&(vtot[module_id-1])), ((uint32_t *)&(vsumbatt[module_id-1])));
 80023a4:	1e6a      	subs	r2, r5, #1
 80023a6:	4b22      	ldr	r3, [pc, #136]	@ (8002430 <L9963E_utils_read_cells+0x11c>)
 80023a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80023ac:	4921      	ldr	r1, [pc, #132]	@ (8002434 <L9963E_utils_read_cells+0x120>)
 80023ae:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80023b2:	4629      	mov	r1, r5
 80023b4:	481b      	ldr	r0, [pc, #108]	@ (8002424 <L9963E_utils_read_cells+0x110>)
 80023b6:	f7fe fe51 	bl	800105c <L9963E_read_batt_voltage>
    } while (e != L9963E_OK);
 80023ba:	4604      	mov	r4, r0
 80023bc:	2800      	cmp	r0, #0
 80023be:	d1f1      	bne.n	80023a4 <L9963E_utils_read_cells+0x90>
  
  /******* READING BATTERY CURRENT *******/
  //? this because the shunt is only on the first node
  if(module_id == 1){
 80023c0:	2d01      	cmp	r5, #1
 80023c2:	d003      	beq.n	80023cc <L9963E_utils_read_cells+0xb8>
    }
  }
  
    /******* READING GPIO VOLTAGES *******/
    
    if (!read_gpio)
 80023c4:	f1b9 0f00 	cmp.w	r9, #0
 80023c8:	d127      	bne.n	800241a <L9963E_utils_read_cells+0x106>
 80023ca:	e028      	b.n	800241e <L9963E_utils_read_cells+0x10a>
      e = L9963E_read_current_mA(&h9l, module_id, L9963E_Ibattery_calib_ADDR, &voltage32);
 80023cc:	ab04      	add	r3, sp, #16
 80023ce:	2230      	movs	r2, #48	@ 0x30
 80023d0:	4629      	mov	r1, r5
 80023d2:	4814      	ldr	r0, [pc, #80]	@ (8002424 <L9963E_utils_read_cells+0x110>)
 80023d4:	f7fe fec5 	bl	8001162 <L9963E_read_current_mA>
    } while (e != L9963E_OK ||  reading_retry_counter++ > MAX_READING_RETRY_L9963E_GPIO);
 80023d8:	2800      	cmp	r0, #0
 80023da:	d1f7      	bne.n	80023cc <L9963E_utils_read_cells+0xb8>
      vbattery_current = voltage32;
 80023dc:	4b16      	ldr	r3, [pc, #88]	@ (8002438 <L9963E_utils_read_cells+0x124>)
 80023de:	9a04      	ldr	r2, [sp, #16]
 80023e0:	801a      	strh	r2, [r3, #0]
 80023e2:	e7ef      	b.n	80023c4 <L9963E_utils_read_cells+0xb0>
        return;

    for(uint8_t cell_address_index=0; cell_address_index<L9963E_CELLS_N; cell_address_index++){
      reading_retry_counter = 0;
      do {
        e = L9963E_read_gpio_voltage(&h9l, module_id, gpio_addresses[cell_address_index], &voltage, &d_rdy);
 80023e4:	4b15      	ldr	r3, [pc, #84]	@ (800243c <L9963E_utils_read_cells+0x128>)
 80023e6:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
 80023ea:	f10d 030f 	add.w	r3, sp, #15
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	ab05      	add	r3, sp, #20
 80023f2:	4629      	mov	r1, r5
 80023f4:	480b      	ldr	r0, [pc, #44]	@ (8002424 <L9963E_utils_read_cells+0x110>)
 80023f6:	f7fe fe64 	bl	80010c2 <L9963E_read_gpio_voltage>
      } while (e != L9963E_OK || !d_rdy || reading_retry_counter++ > MAX_READING_RETRY_L9963E_GPIO);
 80023fa:	2800      	cmp	r0, #0
 80023fc:	d1f2      	bne.n	80023e4 <L9963E_utils_read_cells+0xd0>
 80023fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0ee      	beq.n	80023e4 <L9963E_utils_read_cells+0xd0>

      if(e== L9963E_OK)
        vgpio[i][cell_address_index] = voltage;
 8002406:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 800240a:	4423      	add	r3, r4
 800240c:	4a0c      	ldr	r2, [pc, #48]	@ (8002440 <L9963E_utils_read_cells+0x12c>)
 800240e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8002412:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t cell_address_index=0; cell_address_index<L9963E_CELLS_N; cell_address_index++){
 8002416:	3401      	adds	r4, #1
 8002418:	b2e4      	uxtb	r4, r4
 800241a:	2c0d      	cmp	r4, #13
 800241c:	d9e2      	bls.n	80023e4 <L9963E_utils_read_cells+0xd0>
      else
        vgpio[i][cell_address_index] = CELL_TEMPERATURE_READ_ERROR;
    }
}
 800241e:	b007      	add	sp, #28
 8002420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002424:	200001ac 	.word	0x200001ac
 8002428:	20000050 	.word	0x20000050
 800242c:	20000174 	.word	0x20000174
 8002430:	20000154 	.word	0x20000154
 8002434:	2000015c 	.word	0x2000015c
 8002438:	20000150 	.word	0x20000150
 800243c:	20000044 	.word	0x20000044
 8002440:	20000160 	.word	0x20000160

08002444 <L9963E_utils_get_gpios>:

void L9963E_utils_get_gpios(int16_t* desired_array){
 8002444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002446:	4607      	mov	r7, r0
  uint8_t k=0;
  for(uint8_t i=0;i<L9963E_SLAVES_N;i++){
 8002448:	2600      	movs	r6, #0
  uint8_t k=0;
 800244a:	4635      	mov	r5, r6
  for(uint8_t i=0;i<L9963E_SLAVES_N;i++){
 800244c:	e012      	b.n	8002474 <L9963E_utils_get_gpios+0x30>
    for(uint8_t j=0;j<L9963E_GPIOS_N;j++){
      desired_array[k]=ntc_get_centideg_from_raw(vcellsm[i][j]);
 800244e:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 8002452:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002456:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <L9963E_utils_get_gpios+0x3c>)
 8002458:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800245c:	f000 f9d4 	bl	8002808 <ntc_get_centideg_from_raw>
 8002460:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
      ++k;
 8002464:	3501      	adds	r5, #1
 8002466:	b2ed      	uxtb	r5, r5
    for(uint8_t j=0;j<L9963E_GPIOS_N;j++){
 8002468:	3401      	adds	r4, #1
 800246a:	b2e4      	uxtb	r4, r4
 800246c:	2c04      	cmp	r4, #4
 800246e:	d9ee      	bls.n	800244e <L9963E_utils_get_gpios+0xa>
  for(uint8_t i=0;i<L9963E_SLAVES_N;i++){
 8002470:	3601      	adds	r6, #1
 8002472:	b2f6      	uxtb	r6, r6
 8002474:	2e01      	cmp	r6, #1
 8002476:	d801      	bhi.n	800247c <L9963E_utils_get_gpios+0x38>
    for(uint8_t j=0;j<L9963E_GPIOS_N;j++){
 8002478:	2400      	movs	r4, #0
 800247a:	e7f7      	b.n	800246c <L9963E_utils_get_gpios+0x28>
    }
  }
}
 800247c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800247e:	bf00      	nop
 8002480:	20000174 	.word	0x20000174

08002484 <L9963E_utils_get_cell_mv>:
      ++k;
    }
  }
}

uint16_t L9963E_utils_get_cell_mv(uint16_t raw_cell_voltage) {
 8002484:	ee07 0a90 	vmov	s15, r0
  return (uint16_t)((float)raw_cell_voltage * 89e-3f);
 8002488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800248c:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 80024a0 <L9963E_utils_get_cell_mv+0x1c>
 8002490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
}
 8002498:	ee17 3a90 	vmov	r3, s15
 800249c:	b298      	uxth	r0, r3
 800249e:	4770      	bx	lr
 80024a0:	3db645a2 	.word	0x3db645a2

080024a4 <L9963E_utils_get_cells>:
void L9963E_utils_get_cells(uint16_t* desired_array){
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a6:	4607      	mov	r7, r0
  for(uint8_t i=0;i<L9963E_SLAVES_N;i++){
 80024a8:	2600      	movs	r6, #0
  uint8_t k=0;
 80024aa:	4635      	mov	r5, r6
  for(uint8_t i=0;i<L9963E_SLAVES_N;i++){
 80024ac:	e001      	b.n	80024b2 <L9963E_utils_get_cells+0xe>
 80024ae:	3601      	adds	r6, #1
 80024b0:	b2f6      	uxtb	r6, r6
 80024b2:	2e01      	cmp	r6, #1
 80024b4:	d812      	bhi.n	80024dc <L9963E_utils_get_cells+0x38>
    for(uint8_t j=0;j<L9963E_CELLS_N;j++){
 80024b6:	2400      	movs	r4, #0
 80024b8:	2c0d      	cmp	r4, #13
 80024ba:	d8f8      	bhi.n	80024ae <L9963E_utils_get_cells+0xa>
      desired_array[k]=L9963E_utils_get_cell_mv(vcellsm[i][j]);
 80024bc:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 80024c0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80024c4:	4a06      	ldr	r2, [pc, #24]	@ (80024e0 <L9963E_utils_get_cells+0x3c>)
 80024c6:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80024ca:	f7ff ffdb 	bl	8002484 <L9963E_utils_get_cell_mv>
 80024ce:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
      ++k;
 80024d2:	3501      	adds	r5, #1
 80024d4:	b2ed      	uxtb	r5, r5
    for(uint8_t j=0;j<L9963E_CELLS_N;j++){
 80024d6:	3401      	adds	r4, #1
 80024d8:	b2e4      	uxtb	r4, r4
 80024da:	e7ed      	b.n	80024b8 <L9963E_utils_get_cells+0x14>
}
 80024dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000174 	.word	0x20000174

080024e4 <L9963E_utils_get_batt_mv>:

uint32_t L9963E_utils_get_batt_mv() {
  uint32_t vtot_temp = 0;
  //uint32_t vsum_temp = 0;
  for(uint8_t i=0;i<L9963E_SLAVES_N;i++){
 80024e4:	2300      	movs	r3, #0
  uint32_t vtot_temp = 0;
 80024e6:	461a      	mov	r2, r3
  for(uint8_t i=0;i<L9963E_SLAVES_N;i++){
 80024e8:	e005      	b.n	80024f6 <L9963E_utils_get_batt_mv+0x12>
    vtot_temp += vtot[i];
 80024ea:	490a      	ldr	r1, [pc, #40]	@ (8002514 <L9963E_utils_get_batt_mv+0x30>)
 80024ec:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80024f0:	440a      	add	r2, r1
  for(uint8_t i=0;i<L9963E_SLAVES_N;i++){
 80024f2:	3301      	adds	r3, #1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d9f7      	bls.n	80024ea <L9963E_utils_get_batt_mv+0x6>
    //vsum_temp += vsumbatt[i];
  }
  vtot_temp = (uint32_t)((float)vtot_temp * 1.33f);
 80024fa:	ee07 2a90 	vmov	s15, r2
 80024fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002502:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002518 <L9963E_utils_get_batt_mv+0x34>
 8002506:	ee67 7a87 	vmul.f32	s15, s15, s14
  //vsum_temp = (uint32_t)((float)vtot_temp * 89e-3f);
  return vtot_temp;
}
 800250a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800250e:	ee17 0a90 	vmov	r0, s15
 8002512:	4770      	bx	lr
 8002514:	2000015c 	.word	0x2000015c
 8002518:	3faa3d71 	.word	0x3faa3d71

0800251c <L9963E_utils_get_batt_mA>:

int32_t L9963E_utils_get_batt_mA(){
  return (int32_t)vbattery_current;
}
 800251c:	4b01      	ldr	r3, [pc, #4]	@ (8002524 <L9963E_utils_get_batt_mA+0x8>)
 800251e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002522:	4770      	bx	lr
 8002524:	20000150 	.word	0x20000150

08002528 <balancing_set>:

void balancing_set(uint8_t* cell_to_balance, uint8_t enable){
 8002528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800252c:	b085      	sub	sp, #20
  L9963E_RegisterUnionTypeDef bal1_conf_reg = {.generic = L9963E_BAL_1_DEFAULT};
 800252e:	2300      	movs	r3, #0
 8002530:	9303      	str	r3, [sp, #12]
  
  if(enable == 0){
 8002532:	b111      	cbz	r1, 800253a <balancing_set+0x12>
 8002534:	4606      	mov	r6, r0
    bal1_conf_reg.Bal_1.bal_stop  = 1;
    L9963E_DRV_reg_write(&(h9l.drv_handle), L9963E_DEVICE_BROADCAST, L9963E_Bal_1_ADDR, &bal1_conf_reg, 10);
    return;
  }
  L9963E_RegisterUnionTypeDef activate_balancing;
  for(uint8_t i=0;i<L9963E_SLAVES_N;i++){
 8002536:	2500      	movs	r5, #0
 8002538:	e081      	b.n	800263e <balancing_set+0x116>
    bal1_conf_reg.Bal_1.bal_stop  = 1;
 800253a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800253e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002542:	f88d 300d 	strb.w	r3, [sp, #13]
    L9963E_DRV_reg_write(&(h9l.drv_handle), L9963E_DEVICE_BROADCAST, L9963E_Bal_1_ADDR, &bal1_conf_reg, 10);
 8002546:	230a      	movs	r3, #10
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	ab03      	add	r3, sp, #12
 800254c:	2203      	movs	r2, #3
 800254e:	4852      	ldr	r0, [pc, #328]	@ (8002698 <balancing_set+0x170>)
 8002550:	f7ff f80e 	bl	8001570 <L9963E_DRV_reg_write>
    return;
 8002554:	e09c      	b.n	8002690 <balancing_set+0x168>
      activate_balancing.BalCell6_1act.BAL1 = cell_to_balance[(14*i)];
 8002556:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 800255a:	f816 2014 	ldrb.w	r2, [r6, r4, lsl #1]
 800255e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002562:	f362 1305 	bfi	r3, r2, #4, #2
 8002566:	f88d 3008 	strb.w	r3, [sp, #8]
      activate_balancing.BalCell6_1act.BAL2 = cell_to_balance[(14*i + 1)];
 800256a:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 800256e:	7862      	ldrb	r2, [r4, #1]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f362 1387 	bfi	r3, r2, #6, #2
 8002576:	f88d 3008 	strb.w	r3, [sp, #8]
      activate_balancing.BalCell6_1act.BAL3 = cell_to_balance[(14*i + 2)];
 800257a:	78a2      	ldrb	r2, [r4, #2]
 800257c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002580:	f362 0301 	bfi	r3, r2, #0, #2
 8002584:	f88d 3009 	strb.w	r3, [sp, #9]
      activate_balancing.BalCell6_1act.BAL4 = cell_to_balance[(14*i + 3)];
 8002588:	78e2      	ldrb	r2, [r4, #3]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f362 0383 	bfi	r3, r2, #2, #2
 8002590:	f88d 3009 	strb.w	r3, [sp, #9]
      activate_balancing.BalCell6_1act.BAL5 = cell_to_balance[(14*i + 4)];
 8002594:	7922      	ldrb	r2, [r4, #4]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f362 1305 	bfi	r3, r2, #4, #2
 800259c:	f88d 3009 	strb.w	r3, [sp, #9]
      activate_balancing.BalCell6_1act.BAL6 = cell_to_balance[(14*i + 5)];
 80025a0:	7962      	ldrb	r2, [r4, #5]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f362 1387 	bfi	r3, r2, #6, #2
 80025a8:	f88d 3009 	strb.w	r3, [sp, #9]
      L9963E_DRV_reg_write(
 80025ac:	3501      	adds	r5, #1
 80025ae:	b2ed      	uxtb	r5, r5
 80025b0:	f10d 0808 	add.w	r8, sp, #8
 80025b4:	4f38      	ldr	r7, [pc, #224]	@ (8002698 <balancing_set+0x170>)
 80025b6:	f04f 090a 	mov.w	r9, #10
 80025ba:	f8cd 9000 	str.w	r9, [sp]
 80025be:	4643      	mov	r3, r8
 80025c0:	2211      	movs	r2, #17
 80025c2:	4629      	mov	r1, r5
 80025c4:	4638      	mov	r0, r7
 80025c6:	f7fe ffd3 	bl	8001570 <L9963E_DRV_reg_write>
        &(h9l.drv_handle), (i+1), L9963E_BalCell6_1act_ADDR, &activate_balancing, 10
      );

      activate_balancing.BalCell14_7act.BAL7 = cell_to_balance[(14*i + 6)];
 80025ca:	79a2      	ldrb	r2, [r4, #6]
 80025cc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80025d0:	f362 0301 	bfi	r3, r2, #0, #2
 80025d4:	f88d 3008 	strb.w	r3, [sp, #8]
      activate_balancing.BalCell14_7act.BAL8 = cell_to_balance[(14*i + 7)];
 80025d8:	79e2      	ldrb	r2, [r4, #7]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f362 0383 	bfi	r3, r2, #2, #2
 80025e0:	f88d 3008 	strb.w	r3, [sp, #8]
      activate_balancing.BalCell14_7act.BAL9 = cell_to_balance[(14*i + 8)];
 80025e4:	7a22      	ldrb	r2, [r4, #8]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f362 1305 	bfi	r3, r2, #4, #2
 80025ec:	f88d 3008 	strb.w	r3, [sp, #8]
      activate_balancing.BalCell14_7act.BAL10 = cell_to_balance[(14*i + 9)];
 80025f0:	7a62      	ldrb	r2, [r4, #9]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f362 1387 	bfi	r3, r2, #6, #2
 80025f8:	f88d 3008 	strb.w	r3, [sp, #8]
      activate_balancing.BalCell14_7act.BAL11 = cell_to_balance[(14*i + 10)];
 80025fc:	7aa2      	ldrb	r2, [r4, #10]
 80025fe:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002602:	f362 0301 	bfi	r3, r2, #0, #2
 8002606:	f88d 3009 	strb.w	r3, [sp, #9]
      activate_balancing.BalCell14_7act.BAL12 = cell_to_balance[(14*i + 11)];
 800260a:	7ae2      	ldrb	r2, [r4, #11]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f362 0383 	bfi	r3, r2, #2, #2
 8002612:	f88d 3009 	strb.w	r3, [sp, #9]
      activate_balancing.BalCell14_7act.BAL13 = cell_to_balance[(14*i + 12)];
 8002616:	7b22      	ldrb	r2, [r4, #12]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f362 1305 	bfi	r3, r2, #4, #2
 800261e:	f88d 3009 	strb.w	r3, [sp, #9]
      activate_balancing.BalCell14_7act.BAL14 = cell_to_balance[(14*i + 13)];
 8002622:	7b62      	ldrb	r2, [r4, #13]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f362 1387 	bfi	r3, r2, #6, #2
 800262a:	f88d 3009 	strb.w	r3, [sp, #9]
      L9963E_DRV_reg_write(
 800262e:	f8cd 9000 	str.w	r9, [sp]
 8002632:	4643      	mov	r3, r8
 8002634:	2210      	movs	r2, #16
 8002636:	4629      	mov	r1, r5
 8002638:	4638      	mov	r0, r7
 800263a:	f7fe ff99 	bl	8001570 <L9963E_DRV_reg_write>
  for(uint8_t i=0;i<L9963E_SLAVES_N;i++){
 800263e:	2d01      	cmp	r5, #1
 8002640:	d989      	bls.n	8002556 <balancing_set+0x2e>
        &(h9l.drv_handle), (i+1), L9963E_BalCell14_7act_ADDR, &activate_balancing, 10
      );
    }

    //stop and restart balancing
    bal1_conf_reg.Bal_1.bal_start = 0;
 8002642:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002646:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800264a:	f88d 300d 	strb.w	r3, [sp, #13]
    bal1_conf_reg.Bal_1.bal_stop  = 1;
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002654:	f88d 300d 	strb.w	r3, [sp, #13]
    L9963E_DRV_reg_write(&(h9l.drv_handle), L9963E_DEVICE_BROADCAST, L9963E_Bal_1_ADDR, &bal1_conf_reg, 10);
 8002658:	ad03      	add	r5, sp, #12
 800265a:	4c0f      	ldr	r4, [pc, #60]	@ (8002698 <balancing_set+0x170>)
 800265c:	260a      	movs	r6, #10
 800265e:	9600      	str	r6, [sp, #0]
 8002660:	462b      	mov	r3, r5
 8002662:	2203      	movs	r2, #3
 8002664:	2100      	movs	r1, #0
 8002666:	4620      	mov	r0, r4
 8002668:	f7fe ff82 	bl	8001570 <L9963E_DRV_reg_write>

    bal1_conf_reg.Bal_1.bal_start = 1;
 800266c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002674:	f88d 300d 	strb.w	r3, [sp, #13]
    bal1_conf_reg.Bal_1.bal_stop  = 0;
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800267e:	f88d 300d 	strb.w	r3, [sp, #13]
    L9963E_DRV_reg_write(&(h9l.drv_handle), L9963E_DEVICE_BROADCAST, L9963E_Bal_1_ADDR, &bal1_conf_reg, 10);
 8002682:	9600      	str	r6, [sp, #0]
 8002684:	462b      	mov	r3, r5
 8002686:	2203      	movs	r2, #3
 8002688:	2100      	movs	r1, #0
 800268a:	4620      	mov	r0, r4
 800268c:	f7fe ff70 	bl	8001570 <L9963E_DRV_reg_write>
 8002690:	b005      	add	sp, #20
 8002692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002696:	bf00      	nop
 8002698:	200001ac 	.word	0x200001ac

0800269c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800269c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800269e:	e7fe      	b.n	800269e <Error_Handler+0x2>

080026a0 <SystemClock_Config>:
{
 80026a0:	b510      	push	{r4, lr}
 80026a2:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026a4:	ac07      	add	r4, sp, #28
 80026a6:	2234      	movs	r2, #52	@ 0x34
 80026a8:	2100      	movs	r1, #0
 80026aa:	4620      	mov	r0, r4
 80026ac:	f002 fd6f 	bl	800518e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b0:	2300      	movs	r3, #0
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	9303      	str	r3, [sp, #12]
 80026b6:	9304      	str	r3, [sp, #16]
 80026b8:	9305      	str	r3, [sp, #20]
 80026ba:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	4a23      	ldr	r2, [pc, #140]	@ (800274c <SystemClock_Config+0xac>)
 80026c0:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80026c2:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80026c6:	6411      	str	r1, [r2, #64]	@ 0x40
 80026c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026ca:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80026ce:	9200      	str	r2, [sp, #0]
 80026d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002750 <SystemClock_Config+0xb0>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026e8:	2301      	movs	r3, #1
 80026ea:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026f0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026f2:	2302      	movs	r3, #2
 80026f4:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026f6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80026fa:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026fc:	2204      	movs	r2, #4
 80026fe:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002700:	22b4      	movs	r2, #180	@ 0xb4
 8002702:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002704:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002706:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002708:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800270a:	4620      	mov	r0, r4
 800270c:	f000 ff4c 	bl	80035a8 <HAL_RCC_OscConfig>
 8002710:	b9a8      	cbnz	r0, 800273e <SystemClock_Config+0x9e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002712:	f000 fd6d 	bl	80031f0 <HAL_PWREx_EnableOverDrive>
 8002716:	b9a0      	cbnz	r0, 8002742 <SystemClock_Config+0xa2>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002718:	230f      	movs	r3, #15
 800271a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 800271c:	2303      	movs	r3, #3
 800271e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002720:	2300      	movs	r3, #0
 8002722:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002724:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002728:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800272a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800272e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002730:	2105      	movs	r1, #5
 8002732:	a802      	add	r0, sp, #8
 8002734:	f000 fd9a 	bl	800326c <HAL_RCC_ClockConfig>
 8002738:	b928      	cbnz	r0, 8002746 <SystemClock_Config+0xa6>
}
 800273a:	b014      	add	sp, #80	@ 0x50
 800273c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800273e:	f7ff ffad 	bl	800269c <Error_Handler>
    Error_Handler();
 8002742:	f7ff ffab 	bl	800269c <Error_Handler>
    Error_Handler();
 8002746:	f7ff ffa9 	bl	800269c <Error_Handler>
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	40007000 	.word	0x40007000

08002754 <main>:
{
 8002754:	b508      	push	{r3, lr}
  HAL_Init();
 8002756:	f000 fa41 	bl	8002bdc <HAL_Init>
  SystemClock_Config();
 800275a:	f7ff ffa1 	bl	80026a0 <SystemClock_Config>
  MX_GPIO_Init();
 800275e:	f7ff fc87 	bl	8002070 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002762:	f7ff fa17 	bl	8001b94 <MX_CAN1_Init>
  MX_SPI1_Init();
 8002766:	f000 f8c1 	bl	80028ec <MX_SPI1_Init>
  MX_TIM6_Init();
 800276a:	f002 fac5 	bl	8004cf8 <MX_TIM6_Init>
  MX_TIM7_Init();
 800276e:	f002 faeb 	bl	8004d48 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8002772:	f002 fc0b 	bl	8004f8c <MX_USART2_UART_Init>
  MX_TIM12_Init();
 8002776:	f002 fbc1 	bl	8004efc <MX_TIM12_Init>
  MX_TIM13_Init();
 800277a:	f002 fb0d 	bl	8004d98 <MX_TIM13_Init>
  MX_CAN2_Init();
 800277e:	f7ff fa2b 	bl	8001bd8 <MX_CAN2_Init>
  MX_SPI2_Init();
 8002782:	f000 f8d5 	bl	8002930 <MX_SPI2_Init>
  L9963E_utils_init();
 8002786:	f7ff fd1d 	bl	80021c4 <L9963E_utils_init>
  bms_routines_init(&pack_information_main, &battery_errors_main, &hv_devices_states_requests_main);
 800278a:	4a19      	ldr	r2, [pc, #100]	@ (80027f0 <main+0x9c>)
 800278c:	4919      	ldr	r1, [pc, #100]	@ (80027f4 <main+0xa0>)
 800278e:	481a      	ldr	r0, [pc, #104]	@ (80027f8 <main+0xa4>)
 8002790:	f7fe fefc 	bl	800158c <bms_routines_init>
  can_routines_init(get_pack_information());
 8002794:	f7ff f9e4 	bl	8001b60 <get_pack_information>
 8002798:	f7ff fada 	bl	8001d50 <can_routines_init>
 800279c:	e00c      	b.n	80027b8 <main+0x64>
    if(timer_check(CAN_SEND_INTERVAL,can_send_millis)){
 800279e:	4b17      	ldr	r3, [pc, #92]	@ (80027fc <main+0xa8>)
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80027a6:	f002 fcbd 	bl	8005124 <timer_check>
 80027aa:	b998      	cbnz	r0, 80027d4 <main+0x80>
    if(timer_check(CAN_RECEIVE_INTERVAL,can_receive_millis)){
 80027ac:	4b14      	ldr	r3, [pc, #80]	@ (8002800 <main+0xac>)
 80027ae:	6819      	ldr	r1, [r3, #0]
 80027b0:	2002      	movs	r0, #2
 80027b2:	f002 fcb7 	bl	8005124 <timer_check>
 80027b6:	b9a0      	cbnz	r0, 80027e2 <main+0x8e>
    if(timer_check(BMS_INTERVAL,bms_millis)){
 80027b8:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <main+0xb0>)
 80027ba:	6819      	ldr	r1, [r3, #0]
 80027bc:	2032      	movs	r0, #50	@ 0x32
 80027be:	f002 fcb1 	bl	8005124 <timer_check>
 80027c2:	2800      	cmp	r0, #0
 80027c4:	d0eb      	beq.n	800279e <main+0x4a>
      bms_millis = HAL_GetTick();
 80027c6:	f000 fa2f 	bl	8002c28 <HAL_GetTick>
 80027ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <main+0xb0>)
 80027cc:	6018      	str	r0, [r3, #0]
      bms_routine();
 80027ce:	f7ff f96f 	bl	8001ab0 <bms_routine>
 80027d2:	e7e4      	b.n	800279e <main+0x4a>
      can_send_millis = HAL_GetTick();
 80027d4:	f000 fa28 	bl	8002c28 <HAL_GetTick>
 80027d8:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <main+0xa8>)
 80027da:	6018      	str	r0, [r3, #0]
      can_send_routine();
 80027dc:	f7ff fad0 	bl	8001d80 <can_send_routine>
 80027e0:	e7e4      	b.n	80027ac <main+0x58>
      can_receive_millis = HAL_GetTick();
 80027e2:	f000 fa21 	bl	8002c28 <HAL_GetTick>
 80027e6:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <main+0xac>)
 80027e8:	6018      	str	r0, [r3, #0]
      can_receive_routine();
 80027ea:	f7ff fab7 	bl	8001d5c <can_receive_routine>
 80027ee:	e7e3      	b.n	80027b8 <main+0x64>
 80027f0:	200001c8 	.word	0x200001c8
 80027f4:	200001e0 	.word	0x200001e0
 80027f8:	20000280 	.word	0x20000280
 80027fc:	20000334 	.word	0x20000334
 8002800:	20000330 	.word	0x20000330
 8002804:	20000338 	.word	0x20000338

08002808 <ntc_get_centideg_from_raw>:
#include "ntc.h"

int16_t ntc_get_centideg_from_raw(uint16_t raw){
 8002808:	b538      	push	{r3, r4, r5, lr}
 800280a:	ee07 0a90 	vmov	s15, r0
    float Vadc = (float)raw * (VCC / RESOLUTION);
 800280e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002812:	ee17 0a90 	vmov	r0, s15
 8002816:	f7fd fe3b 	bl	8000490 <__aeabi_f2d>
 800281a:	a32a      	add	r3, pc, #168	@ (adr r3, 80028c4 <ntc_get_centideg_from_raw+0xbc>)
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	f7fd fe8e 	bl	8000540 <__aeabi_dmul>
 8002824:	f7fe f93c 	bl	8000aa0 <__aeabi_d2f>
    float Rntc = R_FIXED * (Vadc / (VCC - Vadc));
 8002828:	f7fd fe32 	bl	8000490 <__aeabi_f2d>
 800282c:	4604      	mov	r4, r0
 800282e:	460d      	mov	r5, r1
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	a125      	add	r1, pc, #148	@ (adr r1, 80028cc <ntc_get_centideg_from_raw+0xc4>)
 8002836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800283a:	f7fd fcc9 	bl	80001d0 <__aeabi_dsub>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4620      	mov	r0, r4
 8002844:	4629      	mov	r1, r5
 8002846:	f7fd ffa5 	bl	8000794 <__aeabi_ddiv>
 800284a:	a322      	add	r3, pc, #136	@ (adr r3, 80028d4 <ntc_get_centideg_from_raw+0xcc>)
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	f7fd fe76 	bl	8000540 <__aeabi_dmul>
 8002854:	f7fe f924 	bl	8000aa0 <__aeabi_d2f>
    float tempK = 1.0 / (1.0 / T0 + (1.0 / BETA) * log(Rntc / R0));
 8002858:	f7fd fe1a 	bl	8000490 <__aeabi_f2d>
 800285c:	a31d      	add	r3, pc, #116	@ (adr r3, 80028d4 <ntc_get_centideg_from_raw+0xcc>)
 800285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002862:	f7fd ff97 	bl	8000794 <__aeabi_ddiv>
 8002866:	ec41 0b10 	vmov	d0, r0, r1
 800286a:	f002 fcc5 	bl	80051f8 <log>
 800286e:	ec51 0b10 	vmov	r0, r1, d0
 8002872:	a31a      	add	r3, pc, #104	@ (adr r3, 80028dc <ntc_get_centideg_from_raw+0xd4>)
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f7fd fe62 	bl	8000540 <__aeabi_dmul>
 800287c:	a319      	add	r3, pc, #100	@ (adr r3, 80028e4 <ntc_get_centideg_from_raw+0xdc>)
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	f7fd fca7 	bl	80001d4 <__adddf3>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	2000      	movs	r0, #0
 800288c:	490a      	ldr	r1, [pc, #40]	@ (80028b8 <ntc_get_centideg_from_raw+0xb0>)
 800288e:	f7fd ff81 	bl	8000794 <__aeabi_ddiv>
 8002892:	f7fe f905 	bl	8000aa0 <__aeabi_d2f>
 8002896:	ee07 0a90 	vmov	s15, r0
    return (int16_t)((tempK * 100) - 27315);
 800289a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80028bc <ntc_get_centideg_from_raw+0xb4>
 800289e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80028c0 <ntc_get_centideg_from_raw+0xb8>
 80028a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ae:	ee17 3a90 	vmov	r3, s15
 80028b2:	b218      	sxth	r0, r3
 80028b4:	bd38      	pop	{r3, r4, r5, pc}
 80028b6:	bf00      	nop
 80028b8:	3ff00000 	.word	0x3ff00000
 80028bc:	42c80000 	.word	0x42c80000
 80028c0:	46d56600 	.word	0x46d56600
 80028c4:	d8d8d8d8 	.word	0xd8d8d8d8
 80028c8:	3fc8d8d8 	.word	0x3fc8d8d8
 80028cc:	66666666 	.word	0x66666666
 80028d0:	400a6666 	.word	0x400a6666
 80028d4:	00000000 	.word	0x00000000
 80028d8:	40c38800 	.word	0x40c38800
 80028dc:	7e1ed981 	.word	0x7e1ed981
 80028e0:	3f309765 	.word	0x3f309765
 80028e4:	dcb5db83 	.word	0xdcb5db83
 80028e8:	3f6b79e1 	.word	0x3f6b79e1

080028ec <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80028ec:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80028ee:	480e      	ldr	r0, [pc, #56]	@ (8002928 <MX_SPI1_Init+0x3c>)
 80028f0:	4b0e      	ldr	r3, [pc, #56]	@ (800292c <MX_SPI1_Init+0x40>)
 80028f2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028f4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80028f8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028fa:	2300      	movs	r3, #0
 80028fc:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028fe:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002900:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002902:	2201      	movs	r2, #1
 8002904:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002906:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800290a:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800290c:	2220      	movs	r2, #32
 800290e:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002910:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002912:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002914:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002916:	230a      	movs	r3, #10
 8002918:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800291a:	f001 f951 	bl	8003bc0 <HAL_SPI_Init>
 800291e:	b900      	cbnz	r0, 8002922 <MX_SPI1_Init+0x36>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002920:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002922:	f7ff febb 	bl	800269c <Error_Handler>
}
 8002926:	e7fb      	b.n	8002920 <MX_SPI1_Init+0x34>
 8002928:	20000394 	.word	0x20000394
 800292c:	40013000 	.word	0x40013000

08002930 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002930:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002932:	480d      	ldr	r0, [pc, #52]	@ (8002968 <MX_SPI2_Init+0x38>)
 8002934:	4b0d      	ldr	r3, [pc, #52]	@ (800296c <MX_SPI2_Init+0x3c>)
 8002936:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002938:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800293c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800293e:	2300      	movs	r3, #0
 8002940:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002942:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002944:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002946:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800294c:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800294e:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002950:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002952:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002954:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002956:	230a      	movs	r3, #10
 8002958:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800295a:	f001 f931 	bl	8003bc0 <HAL_SPI_Init>
 800295e:	b900      	cbnz	r0, 8002962 <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002960:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002962:	f7ff fe9b 	bl	800269c <Error_Handler>
}
 8002966:	e7fb      	b.n	8002960 <MX_SPI2_Init+0x30>
 8002968:	2000033c 	.word	0x2000033c
 800296c:	40003800 	.word	0x40003800

08002970 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002974:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002976:	2300      	movs	r3, #0
 8002978:	9305      	str	r3, [sp, #20]
 800297a:	9306      	str	r3, [sp, #24]
 800297c:	9307      	str	r3, [sp, #28]
 800297e:	9308      	str	r3, [sp, #32]
 8002980:	9309      	str	r3, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 8002982:	6803      	ldr	r3, [r0, #0]
 8002984:	4a39      	ldr	r2, [pc, #228]	@ (8002a6c <HAL_SPI_MspInit+0xfc>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d005      	beq.n	8002996 <HAL_SPI_MspInit+0x26>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 800298a:	4a39      	ldr	r2, [pc, #228]	@ (8002a70 <HAL_SPI_MspInit+0x100>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d025      	beq.n	80029dc <HAL_SPI_MspInit+0x6c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002990:	b00b      	add	sp, #44	@ 0x2c
 8002992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002996:	2100      	movs	r1, #0
 8002998:	9100      	str	r1, [sp, #0]
 800299a:	4b36      	ldr	r3, [pc, #216]	@ (8002a74 <HAL_SPI_MspInit+0x104>)
 800299c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800299e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80029a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80029a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029a6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80029aa:	9200      	str	r2, [sp, #0]
 80029ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ae:	9101      	str	r1, [sp, #4]
 80029b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = L9963T_L_SCK_Pin|L9963T_L_MISO_SDO_Pin|L9963T_L_MOSI_SDI_Pin;
 80029c2:	23e0      	movs	r3, #224	@ 0xe0
 80029c4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ce:	2305      	movs	r3, #5
 80029d0:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d2:	a905      	add	r1, sp, #20
 80029d4:	4828      	ldr	r0, [pc, #160]	@ (8002a78 <HAL_SPI_MspInit+0x108>)
 80029d6:	f000 faf1 	bl	8002fbc <HAL_GPIO_Init>
 80029da:	e7d9      	b.n	8002990 <HAL_SPI_MspInit+0x20>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029dc:	2400      	movs	r4, #0
 80029de:	9402      	str	r4, [sp, #8]
 80029e0:	4b24      	ldr	r3, [pc, #144]	@ (8002a74 <HAL_SPI_MspInit+0x104>)
 80029e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80029ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ec:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80029f0:	9202      	str	r2, [sp, #8]
 80029f2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f4:	9403      	str	r4, [sp, #12]
 80029f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029f8:	f042 0204 	orr.w	r2, r2, #4
 80029fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80029fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a00:	f002 0204 	and.w	r2, r2, #4
 8002a04:	9203      	str	r2, [sp, #12]
 8002a06:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a08:	9404      	str	r4, [sp, #16]
 8002a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a0c:	f042 0202 	orr.w	r2, r2, #2
 8002a10:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	9304      	str	r3, [sp, #16]
 8002a1a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = L9963T_H_MISO_SDO_Pin;
 8002a1c:	2502      	movs	r5, #2
 8002a1e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2703      	movs	r7, #3
 8002a24:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002a26:	2307      	movs	r3, #7
 8002a28:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(L9963T_H_MISO_SDO_GPIO_Port, &GPIO_InitStruct);
 8002a2a:	ae05      	add	r6, sp, #20
 8002a2c:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8002a80 <HAL_SPI_MspInit+0x110>
 8002a30:	4631      	mov	r1, r6
 8002a32:	4648      	mov	r0, r9
 8002a34:	f000 fac2 	bl	8002fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = L9963T_H_MOSI_SDI_Pin;
 8002a38:	2304      	movs	r3, #4
 8002a3a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a42:	f04f 0805 	mov.w	r8, #5
 8002a46:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
    HAL_GPIO_Init(L9963T_H_MOSI_SDI_GPIO_Port, &GPIO_InitStruct);
 8002a4a:	4631      	mov	r1, r6
 8002a4c:	4648      	mov	r0, r9
 8002a4e:	f000 fab5 	bl	8002fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = L9963T_H_SCK_Pin;
 8002a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a56:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a5e:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
    HAL_GPIO_Init(L9963T_H_SCK_GPIO_Port, &GPIO_InitStruct);
 8002a62:	4631      	mov	r1, r6
 8002a64:	4805      	ldr	r0, [pc, #20]	@ (8002a7c <HAL_SPI_MspInit+0x10c>)
 8002a66:	f000 faa9 	bl	8002fbc <HAL_GPIO_Init>
}
 8002a6a:	e791      	b.n	8002990 <HAL_SPI_MspInit+0x20>
 8002a6c:	40013000 	.word	0x40013000
 8002a70:	40003800 	.word	0x40003800
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	40020400 	.word	0x40020400
 8002a80:	40020800 	.word	0x40020800

08002a84 <GPIO_ReadPinL>:
#include "main.h"
#include "stm32_if.h"

#include "spi.h"

L9963E_IF_PinState GPIO_ReadPinL(L9963E_IF_PINS pin) {
 8002a84:	b508      	push	{r3, lr}
    L9963E_IF_PinState state = L9963E_IF_GPIO_PIN_RESET;
    switch (pin) {
 8002a86:	2804      	cmp	r0, #4
 8002a88:	d820      	bhi.n	8002acc <GPIO_ReadPinL+0x48>
 8002a8a:	e8df f000 	tbb	[pc, r0]
 8002a8e:	0b03      	.short	0x0b03
 8002a90:	1510      	.short	0x1510
 8002a92:	1a          	.byte	0x1a
 8002a93:	00          	.byte	0x00
        case L9963E_IF_CS:
            state = HAL_GPIO_ReadPin(L9963T_L_NCS_GPIO_OUT_GPIO_Port, L9963T_L_NCS_GPIO_OUT_Pin);
 8002a94:	2110      	movs	r1, #16
 8002a96:	480e      	ldr	r0, [pc, #56]	@ (8002ad0 <GPIO_ReadPinL+0x4c>)
 8002a98:	f000 fb80 	bl	800319c <HAL_GPIO_ReadPin>
            state = HAL_GPIO_ReadPin(L9963T_L_DIS_GPIO_INOUT_GPIO_Port, L9963T_L_DIS_GPIO_INOUT_Pin);
            break;
    }

    return state == L9963E_IF_GPIO_PIN_RESET ? GPIO_PIN_RESET : GPIO_PIN_SET;  //convert lib state to stm state
}
 8002a9c:	3800      	subs	r0, #0
 8002a9e:	bf18      	it	ne
 8002aa0:	2001      	movne	r0, #1
 8002aa2:	bd08      	pop	{r3, pc}
            state = HAL_GPIO_ReadPin(L9963T_L_TXEN_GPIO_OUT_GPIO_Port, L9963T_L_TXEN_GPIO_OUT_Pin);
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	480b      	ldr	r0, [pc, #44]	@ (8002ad4 <GPIO_ReadPinL+0x50>)
 8002aa8:	f000 fb78 	bl	800319c <HAL_GPIO_ReadPin>
            break;
 8002aac:	e7f6      	b.n	8002a9c <GPIO_ReadPinL+0x18>
            state = HAL_GPIO_ReadPin(L9963T_L_BNE_GPIO_IN_GPIO_Port, L9963T_L_BNE_GPIO_IN_Pin);
 8002aae:	2102      	movs	r1, #2
 8002ab0:	4808      	ldr	r0, [pc, #32]	@ (8002ad4 <GPIO_ReadPinL+0x50>)
 8002ab2:	f000 fb73 	bl	800319c <HAL_GPIO_ReadPin>
            break;
 8002ab6:	e7f1      	b.n	8002a9c <GPIO_ReadPinL+0x18>
            state = HAL_GPIO_ReadPin(L9963T_L_ISOFREQ_GPIO_OUT_GPIO_Port, L9963T_L_ISOFREQ_GPIO_OUT_Pin);
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4806      	ldr	r0, [pc, #24]	@ (8002ad4 <GPIO_ReadPinL+0x50>)
 8002abc:	f000 fb6e 	bl	800319c <HAL_GPIO_ReadPin>
            break;
 8002ac0:	e7ec      	b.n	8002a9c <GPIO_ReadPinL+0x18>
            state = HAL_GPIO_ReadPin(L9963T_L_DIS_GPIO_INOUT_GPIO_Port, L9963T_L_DIS_GPIO_INOUT_Pin);
 8002ac2:	2120      	movs	r1, #32
 8002ac4:	4802      	ldr	r0, [pc, #8]	@ (8002ad0 <GPIO_ReadPinL+0x4c>)
 8002ac6:	f000 fb69 	bl	800319c <HAL_GPIO_ReadPin>
            break;
 8002aca:	e7e7      	b.n	8002a9c <GPIO_ReadPinL+0x18>
    switch (pin) {
 8002acc:	2000      	movs	r0, #0
 8002ace:	e7e5      	b.n	8002a9c <GPIO_ReadPinL+0x18>
 8002ad0:	40020800 	.word	0x40020800
 8002ad4:	40020400 	.word	0x40020400

08002ad8 <GPIO_WritePinL>:
L9963E_StatusTypeDef GPIO_WritePinL(L9963E_IF_PINS pin, L9963E_IF_PinState state) {
 8002ad8:	b510      	push	{r4, lr}
    GPIO_PinState stm_state = state == L9963E_IF_GPIO_PIN_RESET ? GPIO_PIN_RESET
                                                                : GPIO_PIN_SET;  //convert lib state to stm state
 8002ada:	1e0a      	subs	r2, r1, #0
 8002adc:	bf18      	it	ne
 8002ade:	2201      	movne	r2, #1
    switch (pin) {
 8002ae0:	2804      	cmp	r0, #4
 8002ae2:	d823      	bhi.n	8002b2c <GPIO_WritePinL+0x54>
 8002ae4:	e8df f000 	tbb	[pc, r0]
 8002ae8:	16100a03 	.word	0x16100a03
 8002aec:	1c          	.byte	0x1c
 8002aed:	00          	.byte	0x00
 8002aee:	4604      	mov	r4, r0
        case L9963E_IF_CS:
            HAL_GPIO_WritePin(L9963T_L_NCS_GPIO_OUT_GPIO_Port, L9963T_L_NCS_GPIO_OUT_Pin, stm_state);
 8002af0:	2110      	movs	r1, #16
 8002af2:	480f      	ldr	r0, [pc, #60]	@ (8002b30 <GPIO_WritePinL+0x58>)
 8002af4:	f000 fb59 	bl	80031aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(L9963T_L_DIS_GPIO_INOUT_GPIO_Port, L9963T_L_DIS_GPIO_INOUT_Pin, stm_state);
            break;
        default:
            return L9963E_ERROR;
    }
    return L9963E_OK;
 8002af8:	4620      	mov	r0, r4
}
 8002afa:	bd10      	pop	{r4, pc}
            HAL_GPIO_WritePin(L9963T_L_TXEN_GPIO_OUT_GPIO_Port, L9963T_L_TXEN_GPIO_OUT_Pin, stm_state);
 8002afc:	2104      	movs	r1, #4
 8002afe:	480d      	ldr	r0, [pc, #52]	@ (8002b34 <GPIO_WritePinL+0x5c>)
 8002b00:	f000 fb53 	bl	80031aa <HAL_GPIO_WritePin>
    return L9963E_OK;
 8002b04:	2000      	movs	r0, #0
            break;
 8002b06:	e7f8      	b.n	8002afa <GPIO_WritePinL+0x22>
            HAL_GPIO_WritePin(L9963T_L_BNE_GPIO_IN_GPIO_Port, L9963T_L_BNE_GPIO_IN_Pin, stm_state);
 8002b08:	2102      	movs	r1, #2
 8002b0a:	480a      	ldr	r0, [pc, #40]	@ (8002b34 <GPIO_WritePinL+0x5c>)
 8002b0c:	f000 fb4d 	bl	80031aa <HAL_GPIO_WritePin>
    return L9963E_OK;
 8002b10:	2000      	movs	r0, #0
            break;
 8002b12:	e7f2      	b.n	8002afa <GPIO_WritePinL+0x22>
            HAL_GPIO_WritePin(L9963T_L_ISOFREQ_GPIO_OUT_GPIO_Port, L9963T_L_ISOFREQ_GPIO_OUT_Pin, stm_state);
 8002b14:	2101      	movs	r1, #1
 8002b16:	4807      	ldr	r0, [pc, #28]	@ (8002b34 <GPIO_WritePinL+0x5c>)
 8002b18:	f000 fb47 	bl	80031aa <HAL_GPIO_WritePin>
    return L9963E_OK;
 8002b1c:	2000      	movs	r0, #0
            break;
 8002b1e:	e7ec      	b.n	8002afa <GPIO_WritePinL+0x22>
            HAL_GPIO_WritePin(L9963T_L_DIS_GPIO_INOUT_GPIO_Port, L9963T_L_DIS_GPIO_INOUT_Pin, stm_state);
 8002b20:	2120      	movs	r1, #32
 8002b22:	4803      	ldr	r0, [pc, #12]	@ (8002b30 <GPIO_WritePinL+0x58>)
 8002b24:	f000 fb41 	bl	80031aa <HAL_GPIO_WritePin>
    return L9963E_OK;
 8002b28:	2000      	movs	r0, #0
            break;
 8002b2a:	e7e6      	b.n	8002afa <GPIO_WritePinL+0x22>
    switch (pin) {
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	e7e4      	b.n	8002afa <GPIO_WritePinL+0x22>
 8002b30:	40020800 	.word	0x40020800
 8002b34:	40020400 	.word	0x40020400

08002b38 <SPI_ReceiveL>:

L9963E_StatusTypeDef SPI_ReceiveL(uint8_t *data, uint8_t size, uint8_t timeout_ms) {
 8002b38:	b508      	push	{r3, lr}
 8002b3a:	4613      	mov	r3, r2
    HAL_StatusTypeDef errorcode;

    errorcode = HAL_SPI_Receive(&hspi1, data, size, timeout_ms);
 8002b3c:	460a      	mov	r2, r1
 8002b3e:	4601      	mov	r1, r0
 8002b40:	4805      	ldr	r0, [pc, #20]	@ (8002b58 <SPI_ReceiveL+0x20>)
 8002b42:	f001 faa7 	bl	8004094 <HAL_SPI_Receive>

    switch (errorcode) {
 8002b46:	4603      	mov	r3, r0
 8002b48:	b110      	cbz	r0, 8002b50 <SPI_ReceiveL+0x18>
 8002b4a:	2803      	cmp	r0, #3
 8002b4c:	d102      	bne.n	8002b54 <SPI_ReceiveL+0x1c>
        case HAL_OK:
            return L9963E_OK;
        case HAL_TIMEOUT:
            return L9963E_TIMEOUT;
 8002b4e:	2302      	movs	r3, #2
        default:
            return L9963E_ERROR;
    }
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd08      	pop	{r3, pc}
            return L9963E_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e7fb      	b.n	8002b50 <SPI_ReceiveL+0x18>
 8002b58:	20000394 	.word	0x20000394

08002b5c <SPI_TransmitL>:

L9963E_StatusTypeDef SPI_TransmitL(uint8_t *data, uint8_t size, uint8_t timeout_ms) {
 8002b5c:	b508      	push	{r3, lr}
 8002b5e:	4613      	mov	r3, r2
    HAL_StatusTypeDef errorcode;

    errorcode = HAL_SPI_Transmit(&hspi1, data, size, timeout_ms);
 8002b60:	460a      	mov	r2, r1
 8002b62:	4601      	mov	r1, r0
 8002b64:	4805      	ldr	r0, [pc, #20]	@ (8002b7c <SPI_TransmitL+0x20>)
 8002b66:	f001 f88a 	bl	8003c7e <HAL_SPI_Transmit>

    switch (errorcode) {
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	b110      	cbz	r0, 8002b74 <SPI_TransmitL+0x18>
 8002b6e:	2803      	cmp	r0, #3
 8002b70:	d102      	bne.n	8002b78 <SPI_TransmitL+0x1c>
        case HAL_OK:
            return L9963E_OK;
        case HAL_TIMEOUT:
            return L9963E_TIMEOUT;
 8002b72:	2302      	movs	r3, #2
        default:
            return L9963E_ERROR;
    }
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	bd08      	pop	{r3, pc}
            return L9963E_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e7fb      	b.n	8002b74 <SPI_TransmitL+0x18>
 8002b7c:	20000394 	.word	0x20000394

08002b80 <GetTickMs>:
            return L9963E_ERROR;
    }
}

// common functions for both interfaces
uint32_t GetTickMs(void) {
 8002b80:	b508      	push	{r3, lr}
    return HAL_GetTick();
 8002b82:	f000 f851 	bl	8002c28 <HAL_GetTick>
}
 8002b86:	bd08      	pop	{r3, pc}

08002b88 <DelayMs>:
void DelayMs(uint32_t delay) {
 8002b88:	b508      	push	{r3, lr}
    HAL_Delay(delay);
 8002b8a:	f000 f853 	bl	8002c34 <HAL_Delay>
 8002b8e:	bd08      	pop	{r3, pc}

08002b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b90:	b510      	push	{r4, lr}
 8002b92:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b94:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd0 <HAL_InitTick+0x40>)
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd4 <HAL_InitTick+0x44>)
 8002ba2:	6810      	ldr	r0, [r2, #0]
 8002ba4:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ba8:	f000 f9f4 	bl	8002f94 <HAL_SYSTICK_Config>
 8002bac:	b968      	cbnz	r0, 8002bca <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bae:	2c0f      	cmp	r4, #15
 8002bb0:	d901      	bls.n	8002bb6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	e00a      	b.n	8002bcc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	4621      	mov	r1, r4
 8002bba:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbe:	f000 f9d5 	bl	8002f6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc2:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_InitTick+0x48>)
 8002bc4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	e000      	b.n	8002bcc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002bca:	2001      	movs	r0, #1
}
 8002bcc:	bd10      	pop	{r4, pc}
 8002bce:	bf00      	nop
 8002bd0:	2000006c 	.word	0x2000006c
 8002bd4:	20000074 	.word	0x20000074
 8002bd8:	20000070 	.word	0x20000070

08002bdc <HAL_Init>:
{
 8002bdc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bde:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <HAL_Init+0x30>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002be6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bf6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf8:	2003      	movs	r0, #3
 8002bfa:	f000 f9a5 	bl	8002f48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bfe:	200f      	movs	r0, #15
 8002c00:	f7ff ffc6 	bl	8002b90 <HAL_InitTick>
  HAL_MspInit();
 8002c04:	f000 fad8 	bl	80031b8 <HAL_MspInit>
}
 8002c08:	2000      	movs	r0, #0
 8002c0a:	bd08      	pop	{r3, pc}
 8002c0c:	40023c00 	.word	0x40023c00

08002c10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002c10:	4a03      	ldr	r2, [pc, #12]	@ (8002c20 <HAL_IncTick+0x10>)
 8002c12:	6811      	ldr	r1, [r2, #0]
 8002c14:	4b03      	ldr	r3, [pc, #12]	@ (8002c24 <HAL_IncTick+0x14>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	440b      	add	r3, r1
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	200003ec 	.word	0x200003ec
 8002c24:	2000006c 	.word	0x2000006c

08002c28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002c28:	4b01      	ldr	r3, [pc, #4]	@ (8002c30 <HAL_GetTick+0x8>)
 8002c2a:	6818      	ldr	r0, [r3, #0]
}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	200003ec 	.word	0x200003ec

08002c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c34:	b538      	push	{r3, r4, r5, lr}
 8002c36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c38:	f7ff fff6 	bl	8002c28 <HAL_GetTick>
 8002c3c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c3e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002c42:	d002      	beq.n	8002c4a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c44:	4b04      	ldr	r3, [pc, #16]	@ (8002c58 <HAL_Delay+0x24>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c4a:	f7ff ffed 	bl	8002c28 <HAL_GetTick>
 8002c4e:	1b40      	subs	r0, r0, r5
 8002c50:	42a0      	cmp	r0, r4
 8002c52:	d3fa      	bcc.n	8002c4a <HAL_Delay+0x16>
  {
  }
}
 8002c54:	bd38      	pop	{r3, r4, r5, pc}
 8002c56:	bf00      	nop
 8002c58:	2000006c 	.word	0x2000006c

08002c5c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	f000 80a1 	beq.w	8002da4 <HAL_CAN_Init+0x148>
{
 8002c62:	b538      	push	{r3, r4, r5, lr}
 8002c64:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c66:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002c6a:	b1d3      	cbz	r3, 8002ca2 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c6c:	6822      	ldr	r2, [r4, #0]
 8002c6e:	6813      	ldr	r3, [r2, #0]
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c76:	f7ff ffd7 	bl	8002c28 <HAL_GetTick>
 8002c7a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	f012 0f01 	tst.w	r2, #1
 8002c84:	d110      	bne.n	8002ca8 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c86:	f7ff ffcf 	bl	8002c28 <HAL_GetTick>
 8002c8a:	1b40      	subs	r0, r0, r5
 8002c8c:	280a      	cmp	r0, #10
 8002c8e:	d9f5      	bls.n	8002c7c <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c90:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c96:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c98:	2305      	movs	r3, #5
 8002c9a:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8002c9e:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8002ca0:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8002ca2:	f7fe ffb9 	bl	8001c18 <HAL_CAN_MspInit>
 8002ca6:	e7e1      	b.n	8002c6c <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	f022 0202 	bic.w	r2, r2, #2
 8002cae:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002cb0:	f7ff ffba 	bl	8002c28 <HAL_GetTick>
 8002cb4:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	f012 0f02 	tst.w	r2, #2
 8002cbe:	d00d      	beq.n	8002cdc <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cc0:	f7ff ffb2 	bl	8002c28 <HAL_GetTick>
 8002cc4:	1b40      	subs	r0, r0, r5
 8002cc6:	280a      	cmp	r0, #10
 8002cc8:	d9f5      	bls.n	8002cb6 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cd0:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8002cd8:	2001      	movs	r0, #1
 8002cda:	e7e1      	b.n	8002ca0 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002cdc:	7e22      	ldrb	r2, [r4, #24]
 8002cde:	2a01      	cmp	r2, #1
 8002ce0:	d03d      	beq.n	8002d5e <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ce8:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cea:	7e63      	ldrb	r3, [r4, #25]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d03b      	beq.n	8002d68 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cf0:	6822      	ldr	r2, [r4, #0]
 8002cf2:	6813      	ldr	r3, [r2, #0]
 8002cf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cf8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cfa:	7ea3      	ldrb	r3, [r4, #26]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d039      	beq.n	8002d74 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d00:	6822      	ldr	r2, [r4, #0]
 8002d02:	6813      	ldr	r3, [r2, #0]
 8002d04:	f023 0320 	bic.w	r3, r3, #32
 8002d08:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d0a:	7ee3      	ldrb	r3, [r4, #27]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d037      	beq.n	8002d80 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d10:	6822      	ldr	r2, [r4, #0]
 8002d12:	6813      	ldr	r3, [r2, #0]
 8002d14:	f043 0310 	orr.w	r3, r3, #16
 8002d18:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d1a:	7f23      	ldrb	r3, [r4, #28]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d035      	beq.n	8002d8c <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d20:	6822      	ldr	r2, [r4, #0]
 8002d22:	6813      	ldr	r3, [r2, #0]
 8002d24:	f023 0308 	bic.w	r3, r3, #8
 8002d28:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d2a:	7f63      	ldrb	r3, [r4, #29]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d033      	beq.n	8002d98 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d30:	6822      	ldr	r2, [r4, #0]
 8002d32:	6813      	ldr	r3, [r2, #0]
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d3a:	68a3      	ldr	r3, [r4, #8]
 8002d3c:	68e2      	ldr	r2, [r4, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	6922      	ldr	r2, [r4, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	6962      	ldr	r2, [r4, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	6862      	ldr	r2, [r4, #4]
 8002d4a:	3a01      	subs	r2, #1
 8002d4c:	6821      	ldr	r1, [r4, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d52:	2000      	movs	r0, #0
 8002d54:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8002d5c:	e7a0      	b.n	8002ca0 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e7c0      	b.n	8002cea <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d68:	6822      	ldr	r2, [r4, #0]
 8002d6a:	6813      	ldr	r3, [r2, #0]
 8002d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e7c2      	b.n	8002cfa <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d74:	6822      	ldr	r2, [r4, #0]
 8002d76:	6813      	ldr	r3, [r2, #0]
 8002d78:	f043 0320 	orr.w	r3, r3, #32
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e7c4      	b.n	8002d0a <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d80:	6822      	ldr	r2, [r4, #0]
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	f023 0310 	bic.w	r3, r3, #16
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e7c6      	b.n	8002d1a <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d8c:	6822      	ldr	r2, [r4, #0]
 8002d8e:	6813      	ldr	r3, [r2, #0]
 8002d90:	f043 0308 	orr.w	r3, r3, #8
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e7c8      	b.n	8002d2a <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d98:	6822      	ldr	r2, [r4, #0]
 8002d9a:	6813      	ldr	r3, [r2, #0]
 8002d9c:	f043 0304 	orr.w	r3, r3, #4
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e7ca      	b.n	8002d3a <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8002da4:	2001      	movs	r0, #1
}
 8002da6:	4770      	bx	lr

08002da8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002da8:	b530      	push	{r4, r5, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002daa:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002dae:	6804      	ldr	r4, [r0, #0]
 8002db0:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002db2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002db6:	fa5f fc8c 	uxtb.w	ip, ip
 8002dba:	f1bc 0f01 	cmp.w	ip, #1
 8002dbe:	d862      	bhi.n	8002e86 <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002dc0:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 8002dc4:	d059      	beq.n	8002e7a <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002dc6:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002dca:	2401      	movs	r4, #1
 8002dcc:	fa04 f40c 	lsl.w	r4, r4, ip
 8002dd0:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002dd2:	688b      	ldr	r3, [r1, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d13d      	bne.n	8002e54 <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002dd8:	680d      	ldr	r5, [r1, #0]
                                                           pHeader->RTR);
 8002dda:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ddc:	6804      	ldr	r4, [r0, #0]
 8002dde:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 8002de2:	f10c 0318 	add.w	r3, ip, #24
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002dea:	6803      	ldr	r3, [r0, #0]
 8002dec:	690c      	ldr	r4, [r1, #16]
 8002dee:	f10c 0e18 	add.w	lr, ip, #24
 8002df2:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8002df6:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002df8:	7d0b      	ldrb	r3, [r1, #20]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d035      	beq.n	8002e6a <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002dfe:	79d1      	ldrb	r1, [r2, #7]
 8002e00:	7993      	ldrb	r3, [r2, #6]
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002e08:	7951      	ldrb	r1, [r2, #5]
 8002e0a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002e0e:	7914      	ldrb	r4, [r2, #4]
 8002e10:	6801      	ldr	r1, [r0, #0]
 8002e12:	4323      	orrs	r3, r4
 8002e14:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8002e18:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002e1c:	78d1      	ldrb	r1, [r2, #3]
 8002e1e:	7893      	ldrb	r3, [r2, #2]
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002e26:	7851      	ldrb	r1, [r2, #1]
 8002e28:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002e2c:	7811      	ldrb	r1, [r2, #0]
 8002e2e:	6802      	ldr	r2, [r0, #0]
 8002e30:	430b      	orrs	r3, r1
 8002e32:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8002e36:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e3a:	6802      	ldr	r2, [r0, #0]
 8002e3c:	f10c 0c18 	add.w	ip, ip, #24
 8002e40:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8002e44:	f852 300c 	ldr.w	r3, [r2, ip]
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	f842 300c 	str.w	r3, [r2, ip]

      /* Return function status */
      return HAL_OK;
 8002e50:	2000      	movs	r0, #0
 8002e52:	e01d      	b.n	8002e90 <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e54:	684c      	ldr	r4, [r1, #4]
 8002e56:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 8002e5a:	68cc      	ldr	r4, [r1, #12]
                                                           pHeader->IDE |
 8002e5c:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e5e:	f10c 0418 	add.w	r4, ip, #24
 8002e62:	0124      	lsls	r4, r4, #4
 8002e64:	6805      	ldr	r5, [r0, #0]
 8002e66:	512b      	str	r3, [r5, r4]
 8002e68:	e7bf      	b.n	8002dea <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002e6a:	6803      	ldr	r3, [r0, #0]
 8002e6c:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8002e70:	6859      	ldr	r1, [r3, #4]
 8002e72:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002e76:	6059      	str	r1, [r3, #4]
 8002e78:	e7c1      	b.n	8002dfe <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e7a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002e7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e80:	6243      	str	r3, [r0, #36]	@ 0x24

      return HAL_ERROR;
 8002e82:	2001      	movs	r0, #1
 8002e84:	e004      	b.n	8002e90 <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e86:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002e88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e8c:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8002e8e:	2001      	movs	r0, #1
  }
}
 8002e90:	bd30      	pop	{r4, r5, pc}

08002e92 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e92:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d901      	bls.n	8002ea2 <HAL_CAN_GetTxMailboxesFreeLevel+0x10>
  uint32_t freelevel = 0U;
 8002e9e:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8002ea0:	4770      	bx	lr
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002ea2:	6803      	ldr	r3, [r0, #0]
 8002ea4:	6898      	ldr	r0, [r3, #8]
 8002ea6:	f010 6080 	ands.w	r0, r0, #67108864	@ 0x4000000
 8002eaa:	d000      	beq.n	8002eae <HAL_CAN_GetTxMailboxesFreeLevel+0x1c>
      freelevel++;
 8002eac:	2001      	movs	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	f012 6f00 	tst.w	r2, #134217728	@ 0x8000000
 8002eb4:	d000      	beq.n	8002eb8 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
      freelevel++;
 8002eb6:	3001      	adds	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002ebe:	d0ef      	beq.n	8002ea0 <HAL_CAN_GetTxMailboxesFreeLevel+0xe>
      freelevel++;
 8002ec0:	3001      	adds	r0, #1
 8002ec2:	4770      	bx	lr

08002ec4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	db07      	blt.n	8002ed8 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec8:	f000 021f 	and.w	r2, r0, #31
 8002ecc:	0940      	lsrs	r0, r0, #5
 8002ece:	2301      	movs	r3, #1
 8002ed0:	4093      	lsls	r3, r2
 8002ed2:	4a02      	ldr	r2, [pc, #8]	@ (8002edc <__NVIC_EnableIRQ+0x18>)
 8002ed4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	e000e100 	.word	0xe000e100

08002ee0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	db08      	blt.n	8002ef6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee4:	0109      	lsls	r1, r1, #4
 8002ee6:	b2c9      	uxtb	r1, r1
 8002ee8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002eec:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002ef0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8002ef4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef6:	f000 000f 	and.w	r0, r0, #15
 8002efa:	0109      	lsls	r1, r1, #4
 8002efc:	b2c9      	uxtb	r1, r1
 8002efe:	4b01      	ldr	r3, [pc, #4]	@ (8002f04 <__NVIC_SetPriority+0x24>)
 8002f00:	5419      	strb	r1, [r3, r0]
  }
}
 8002f02:	4770      	bx	lr
 8002f04:	e000ed14 	.word	0xe000ed14

08002f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f08:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f0a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f0e:	f1c0 0c07 	rsb	ip, r0, #7
 8002f12:	f1bc 0f04 	cmp.w	ip, #4
 8002f16:	bf28      	it	cs
 8002f18:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1c:	1d03      	adds	r3, r0, #4
 8002f1e:	2b06      	cmp	r3, #6
 8002f20:	d90f      	bls.n	8002f42 <NVIC_EncodePriority+0x3a>
 8002f22:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f24:	f04f 3eff 	mov.w	lr, #4294967295
 8002f28:	fa0e f00c 	lsl.w	r0, lr, ip
 8002f2c:	ea21 0100 	bic.w	r1, r1, r0
 8002f30:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f32:	fa0e fe03 	lsl.w	lr, lr, r3
 8002f36:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8002f3a:	ea41 0002 	orr.w	r0, r1, r2
 8002f3e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f42:	2300      	movs	r3, #0
 8002f44:	e7ee      	b.n	8002f24 <NVIC_EncodePriority+0x1c>
	...

08002f48 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f48:	4a07      	ldr	r2, [pc, #28]	@ (8002f68 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002f4a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f50:	041b      	lsls	r3, r3, #16
 8002f52:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f54:	0200      	lsls	r0, r0, #8
 8002f56:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f5a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002f5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002f64:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f6c:	b510      	push	{r4, lr}
 8002f6e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f70:	4b05      	ldr	r3, [pc, #20]	@ (8002f88 <HAL_NVIC_SetPriority+0x1c>)
 8002f72:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f74:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002f78:	f7ff ffc6 	bl	8002f08 <NVIC_EncodePriority>
 8002f7c:	4601      	mov	r1, r0
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f7ff ffae 	bl	8002ee0 <__NVIC_SetPriority>
}
 8002f84:	bd10      	pop	{r4, pc}
 8002f86:	bf00      	nop
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f8e:	f7ff ff99 	bl	8002ec4 <__NVIC_EnableIRQ>
}
 8002f92:	bd08      	pop	{r3, pc}

08002f94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f94:	3801      	subs	r0, #1
 8002f96:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002f9a:	d20b      	bcs.n	8002fb4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002fa0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa2:	4a05      	ldr	r2, [pc, #20]	@ (8002fb8 <HAL_SYSTICK_Config+0x24>)
 8002fa4:	21f0      	movs	r1, #240	@ 0xf0
 8002fa6:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002faa:	2000      	movs	r0, #0
 8002fac:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fae:	2207      	movs	r2, #7
 8002fb0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002fb4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	2b0f      	cmp	r3, #15
 8002fc0:	f200 80e3 	bhi.w	800318a <HAL_GPIO_Init+0x1ce>
{
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	e065      	b.n	8003096 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fca:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fcc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002fd0:	2403      	movs	r4, #3
 8002fd2:	fa04 f40e 	lsl.w	r4, r4, lr
 8002fd6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fda:	68cc      	ldr	r4, [r1, #12]
 8002fdc:	fa04 f40e 	lsl.w	r4, r4, lr
 8002fe0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002fe2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fea:	684a      	ldr	r2, [r1, #4]
 8002fec:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002ff4:	6042      	str	r2, [r0, #4]
 8002ff6:	e05c      	b.n	80030b2 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff8:	08dc      	lsrs	r4, r3, #3
 8002ffa:	3408      	adds	r4, #8
 8002ffc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003000:	f003 0507 	and.w	r5, r3, #7
 8003004:	00ad      	lsls	r5, r5, #2
 8003006:	f04f 0e0f 	mov.w	lr, #15
 800300a:	fa0e fe05 	lsl.w	lr, lr, r5
 800300e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003012:	690a      	ldr	r2, [r1, #16]
 8003014:	40aa      	lsls	r2, r5
 8003016:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800301a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800301e:	e05c      	b.n	80030da <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003020:	2206      	movs	r2, #6
 8003022:	e000      	b.n	8003026 <HAL_GPIO_Init+0x6a>
 8003024:	2200      	movs	r2, #0
 8003026:	fa02 f20e 	lsl.w	r2, r2, lr
 800302a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800302c:	3402      	adds	r4, #2
 800302e:	4d57      	ldr	r5, [pc, #348]	@ (800318c <HAL_GPIO_Init+0x1d0>)
 8003030:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003034:	4a56      	ldr	r2, [pc, #344]	@ (8003190 <HAL_GPIO_Init+0x1d4>)
 8003036:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003038:	ea6f 020c 	mvn.w	r2, ip
 800303c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003040:	684e      	ldr	r6, [r1, #4]
 8003042:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8003046:	d001      	beq.n	800304c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8003048:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 800304c:	4c50      	ldr	r4, [pc, #320]	@ (8003190 <HAL_GPIO_Init+0x1d4>)
 800304e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8003050:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003052:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003056:	684e      	ldr	r6, [r1, #4]
 8003058:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 800305c:	d001      	beq.n	8003062 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800305e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8003062:	4c4b      	ldr	r4, [pc, #300]	@ (8003190 <HAL_GPIO_Init+0x1d4>)
 8003064:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8003066:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003068:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800306c:	684e      	ldr	r6, [r1, #4]
 800306e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8003072:	d001      	beq.n	8003078 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8003074:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8003078:	4c45      	ldr	r4, [pc, #276]	@ (8003190 <HAL_GPIO_Init+0x1d4>)
 800307a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800307c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800307e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003080:	684d      	ldr	r5, [r1, #4]
 8003082:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8003086:	d001      	beq.n	800308c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8003088:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 800308c:	4c40      	ldr	r4, [pc, #256]	@ (8003190 <HAL_GPIO_Init+0x1d4>)
 800308e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003090:	3301      	adds	r3, #1
 8003092:	2b0f      	cmp	r3, #15
 8003094:	d877      	bhi.n	8003186 <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8003096:	2201      	movs	r2, #1
 8003098:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800309a:	680c      	ldr	r4, [r1, #0]
 800309c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80030a0:	ea32 0404 	bics.w	r4, r2, r4
 80030a4:	d1f4      	bne.n	8003090 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030a6:	684c      	ldr	r4, [r1, #4]
 80030a8:	f004 0403 	and.w	r4, r4, #3
 80030ac:	3c01      	subs	r4, #1
 80030ae:	2c01      	cmp	r4, #1
 80030b0:	d98b      	bls.n	8002fca <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b2:	684a      	ldr	r2, [r1, #4]
 80030b4:	f002 0203 	and.w	r2, r2, #3
 80030b8:	2a03      	cmp	r2, #3
 80030ba:	d009      	beq.n	80030d0 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80030bc:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030be:	005d      	lsls	r5, r3, #1
 80030c0:	2203      	movs	r2, #3
 80030c2:	40aa      	lsls	r2, r5
 80030c4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c8:	688a      	ldr	r2, [r1, #8]
 80030ca:	40aa      	lsls	r2, r5
 80030cc:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80030ce:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d0:	684a      	ldr	r2, [r1, #4]
 80030d2:	f002 0203 	and.w	r2, r2, #3
 80030d6:	2a02      	cmp	r2, #2
 80030d8:	d08e      	beq.n	8002ff8 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80030da:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030dc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80030e0:	2203      	movs	r2, #3
 80030e2:	fa02 f20e 	lsl.w	r2, r2, lr
 80030e6:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ea:	684a      	ldr	r2, [r1, #4]
 80030ec:	f002 0203 	and.w	r2, r2, #3
 80030f0:	fa02 f20e 	lsl.w	r2, r2, lr
 80030f4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80030f6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030f8:	684a      	ldr	r2, [r1, #4]
 80030fa:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80030fe:	d0c7      	beq.n	8003090 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003100:	2200      	movs	r2, #0
 8003102:	9201      	str	r2, [sp, #4]
 8003104:	4a23      	ldr	r2, [pc, #140]	@ (8003194 <HAL_GPIO_Init+0x1d8>)
 8003106:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8003108:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800310c:	6454      	str	r4, [r2, #68]	@ 0x44
 800310e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003110:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003114:	9201      	str	r2, [sp, #4]
 8003116:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003118:	089c      	lsrs	r4, r3, #2
 800311a:	1ca5      	adds	r5, r4, #2
 800311c:	4a1b      	ldr	r2, [pc, #108]	@ (800318c <HAL_GPIO_Init+0x1d0>)
 800311e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003122:	f003 0e03 	and.w	lr, r3, #3
 8003126:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800312a:	220f      	movs	r2, #15
 800312c:	fa02 f20e 	lsl.w	r2, r2, lr
 8003130:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003134:	4a18      	ldr	r2, [pc, #96]	@ (8003198 <HAL_GPIO_Init+0x1dc>)
 8003136:	4290      	cmp	r0, r2
 8003138:	f43f af74 	beq.w	8003024 <HAL_GPIO_Init+0x68>
 800313c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003140:	4290      	cmp	r0, r2
 8003142:	d016      	beq.n	8003172 <HAL_GPIO_Init+0x1b6>
 8003144:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003148:	4290      	cmp	r0, r2
 800314a:	d014      	beq.n	8003176 <HAL_GPIO_Init+0x1ba>
 800314c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003150:	4290      	cmp	r0, r2
 8003152:	d012      	beq.n	800317a <HAL_GPIO_Init+0x1be>
 8003154:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003158:	4290      	cmp	r0, r2
 800315a:	d010      	beq.n	800317e <HAL_GPIO_Init+0x1c2>
 800315c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003160:	4290      	cmp	r0, r2
 8003162:	d00e      	beq.n	8003182 <HAL_GPIO_Init+0x1c6>
 8003164:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003168:	4290      	cmp	r0, r2
 800316a:	f43f af59 	beq.w	8003020 <HAL_GPIO_Init+0x64>
 800316e:	2207      	movs	r2, #7
 8003170:	e759      	b.n	8003026 <HAL_GPIO_Init+0x6a>
 8003172:	2201      	movs	r2, #1
 8003174:	e757      	b.n	8003026 <HAL_GPIO_Init+0x6a>
 8003176:	2202      	movs	r2, #2
 8003178:	e755      	b.n	8003026 <HAL_GPIO_Init+0x6a>
 800317a:	2203      	movs	r2, #3
 800317c:	e753      	b.n	8003026 <HAL_GPIO_Init+0x6a>
 800317e:	2204      	movs	r2, #4
 8003180:	e751      	b.n	8003026 <HAL_GPIO_Init+0x6a>
 8003182:	2205      	movs	r2, #5
 8003184:	e74f      	b.n	8003026 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8003186:	b002      	add	sp, #8
 8003188:	bd70      	pop	{r4, r5, r6, pc}
 800318a:	4770      	bx	lr
 800318c:	40013800 	.word	0x40013800
 8003190:	40013c00 	.word	0x40013c00
 8003194:	40023800 	.word	0x40023800
 8003198:	40020000 	.word	0x40020000

0800319c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800319c:	6903      	ldr	r3, [r0, #16]
 800319e:	4219      	tst	r1, r3
 80031a0:	d001      	beq.n	80031a6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80031a2:	2001      	movs	r0, #1
 80031a4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031a6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80031a8:	4770      	bx	lr

080031aa <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031aa:	b10a      	cbz	r2, 80031b0 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ac:	6181      	str	r1, [r0, #24]
 80031ae:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031b0:	0409      	lsls	r1, r1, #16
 80031b2:	6181      	str	r1, [r0, #24]
  }
}
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031b8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ba:	2100      	movs	r1, #0
 80031bc:	9100      	str	r1, [sp, #0]
 80031be:	4b0b      	ldr	r3, [pc, #44]	@ (80031ec <HAL_MspInit+0x34>)
 80031c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031c6:	645a      	str	r2, [r3, #68]	@ 0x44
 80031c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031ca:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80031ce:	9200      	str	r2, [sp, #0]
 80031d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031d2:	9101      	str	r1, [sp, #4]
 80031d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031d6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80031da:	641a      	str	r2, [r3, #64]	@ 0x40
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031e6:	b002      	add	sp, #8
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800

080031f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031f0:	b510      	push	{r4, lr}
 80031f2:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	2300      	movs	r3, #0
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	4b19      	ldr	r3, [pc, #100]	@ (8003260 <HAL_PWREx_EnableOverDrive+0x70>)
 80031fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031fc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003200:	641a      	str	r2, [r3, #64]	@ 0x40
 8003202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800320c:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <HAL_PWREx_EnableOverDrive+0x74>)
 800320e:	2201      	movs	r2, #1
 8003210:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get tick */
  tickstart = HAL_GetTick();
 8003212:	f7ff fd09 	bl	8002c28 <HAL_GetTick>
 8003216:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003218:	4b13      	ldr	r3, [pc, #76]	@ (8003268 <HAL_PWREx_EnableOverDrive+0x78>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003220:	d108      	bne.n	8003234 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003222:	f7ff fd01 	bl	8002c28 <HAL_GetTick>
 8003226:	1b00      	subs	r0, r0, r4
 8003228:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800322c:	d9f4      	bls.n	8003218 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800322e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8003230:	b002      	add	sp, #8
 8003232:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <HAL_PWREx_EnableOverDrive+0x74>)
 8003236:	2201      	movs	r2, #1
 8003238:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 800323a:	f7ff fcf5 	bl	8002c28 <HAL_GetTick>
 800323e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003240:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <HAL_PWREx_EnableOverDrive+0x78>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003248:	d107      	bne.n	800325a <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800324a:	f7ff fced 	bl	8002c28 <HAL_GetTick>
 800324e:	1b00      	subs	r0, r0, r4
 8003250:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003254:	d9f4      	bls.n	8003240 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8003256:	2003      	movs	r0, #3
 8003258:	e7ea      	b.n	8003230 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800325a:	2000      	movs	r0, #0
 800325c:	e7e8      	b.n	8003230 <HAL_PWREx_EnableOverDrive+0x40>
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800
 8003264:	420e0000 	.word	0x420e0000
 8003268:	40007000 	.word	0x40007000

0800326c <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800326c:	2800      	cmp	r0, #0
 800326e:	f000 809b 	beq.w	80033a8 <HAL_RCC_ClockConfig+0x13c>
{
 8003272:	b570      	push	{r4, r5, r6, lr}
 8003274:	460d      	mov	r5, r1
 8003276:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003278:	4b4f      	ldr	r3, [pc, #316]	@ (80033b8 <HAL_RCC_ClockConfig+0x14c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	428b      	cmp	r3, r1
 8003282:	d208      	bcs.n	8003296 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003284:	b2cb      	uxtb	r3, r1
 8003286:	4a4c      	ldr	r2, [pc, #304]	@ (80033b8 <HAL_RCC_ClockConfig+0x14c>)
 8003288:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	6813      	ldr	r3, [r2, #0]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	428b      	cmp	r3, r1
 8003292:	f040 808b 	bne.w	80033ac <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	f013 0f02 	tst.w	r3, #2
 800329c:	d017      	beq.n	80032ce <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329e:	f013 0f04 	tst.w	r3, #4
 80032a2:	d004      	beq.n	80032ae <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a4:	4a45      	ldr	r2, [pc, #276]	@ (80033bc <HAL_RCC_ClockConfig+0x150>)
 80032a6:	6893      	ldr	r3, [r2, #8]
 80032a8:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032ac:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	f013 0f08 	tst.w	r3, #8
 80032b4:	d004      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b6:	4a41      	ldr	r2, [pc, #260]	@ (80033bc <HAL_RCC_ClockConfig+0x150>)
 80032b8:	6893      	ldr	r3, [r2, #8]
 80032ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c0:	4a3e      	ldr	r2, [pc, #248]	@ (80033bc <HAL_RCC_ClockConfig+0x150>)
 80032c2:	6893      	ldr	r3, [r2, #8]
 80032c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032c8:	68a1      	ldr	r1, [r4, #8]
 80032ca:	430b      	orrs	r3, r1
 80032cc:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	f013 0f01 	tst.w	r3, #1
 80032d4:	d032      	beq.n	800333c <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d6:	6863      	ldr	r3, [r4, #4]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d021      	beq.n	8003320 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032dc:	1e9a      	subs	r2, r3, #2
 80032de:	2a01      	cmp	r2, #1
 80032e0:	d925      	bls.n	800332e <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e2:	4a36      	ldr	r2, [pc, #216]	@ (80033bc <HAL_RCC_ClockConfig+0x150>)
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	f012 0f02 	tst.w	r2, #2
 80032ea:	d061      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ec:	4933      	ldr	r1, [pc, #204]	@ (80033bc <HAL_RCC_ClockConfig+0x150>)
 80032ee:	688a      	ldr	r2, [r1, #8]
 80032f0:	f022 0203 	bic.w	r2, r2, #3
 80032f4:	4313      	orrs	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f8:	f7ff fc96 	bl	8002c28 <HAL_GetTick>
 80032fc:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	4b2f      	ldr	r3, [pc, #188]	@ (80033bc <HAL_RCC_ClockConfig+0x150>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	6862      	ldr	r2, [r4, #4]
 8003308:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800330c:	d016      	beq.n	800333c <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330e:	f7ff fc8b 	bl	8002c28 <HAL_GetTick>
 8003312:	1b80      	subs	r0, r0, r6
 8003314:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003318:	4298      	cmp	r0, r3
 800331a:	d9f0      	bls.n	80032fe <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 800331c:	2003      	movs	r0, #3
 800331e:	e042      	b.n	80033a6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003320:	4a26      	ldr	r2, [pc, #152]	@ (80033bc <HAL_RCC_ClockConfig+0x150>)
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8003328:	d1e0      	bne.n	80032ec <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800332a:	2001      	movs	r0, #1
 800332c:	e03b      	b.n	80033a6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332e:	4a23      	ldr	r2, [pc, #140]	@ (80033bc <HAL_RCC_ClockConfig+0x150>)
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8003336:	d1d9      	bne.n	80032ec <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003338:	2001      	movs	r0, #1
 800333a:	e034      	b.n	80033a6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800333c:	4b1e      	ldr	r3, [pc, #120]	@ (80033b8 <HAL_RCC_ClockConfig+0x14c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	42ab      	cmp	r3, r5
 8003346:	d907      	bls.n	8003358 <HAL_RCC_ClockConfig+0xec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003348:	b2ea      	uxtb	r2, r5
 800334a:	4b1b      	ldr	r3, [pc, #108]	@ (80033b8 <HAL_RCC_ClockConfig+0x14c>)
 800334c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	42ab      	cmp	r3, r5
 8003356:	d12d      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	f013 0f04 	tst.w	r3, #4
 800335e:	d006      	beq.n	800336e <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003360:	4a16      	ldr	r2, [pc, #88]	@ (80033bc <HAL_RCC_ClockConfig+0x150>)
 8003362:	6893      	ldr	r3, [r2, #8]
 8003364:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8003368:	68e1      	ldr	r1, [r4, #12]
 800336a:	430b      	orrs	r3, r1
 800336c:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	f013 0f08 	tst.w	r3, #8
 8003374:	d007      	beq.n	8003386 <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003376:	4a11      	ldr	r2, [pc, #68]	@ (80033bc <HAL_RCC_ClockConfig+0x150>)
 8003378:	6893      	ldr	r3, [r2, #8]
 800337a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800337e:	6921      	ldr	r1, [r4, #16]
 8003380:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003384:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003386:	f000 f847 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 800338a:	4b0c      	ldr	r3, [pc, #48]	@ (80033bc <HAL_RCC_ClockConfig+0x150>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003392:	4a0b      	ldr	r2, [pc, #44]	@ (80033c0 <HAL_RCC_ClockConfig+0x154>)
 8003394:	5cd3      	ldrb	r3, [r2, r3]
 8003396:	40d8      	lsrs	r0, r3
 8003398:	4b0a      	ldr	r3, [pc, #40]	@ (80033c4 <HAL_RCC_ClockConfig+0x158>)
 800339a:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800339c:	4b0a      	ldr	r3, [pc, #40]	@ (80033c8 <HAL_RCC_ClockConfig+0x15c>)
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	f7ff fbf6 	bl	8002b90 <HAL_InitTick>

  return HAL_OK;
 80033a4:	2000      	movs	r0, #0
}
 80033a6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80033a8:	2001      	movs	r0, #1
}
 80033aa:	4770      	bx	lr
      return HAL_ERROR;
 80033ac:	2001      	movs	r0, #1
 80033ae:	e7fa      	b.n	80033a6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80033b0:	2001      	movs	r0, #1
 80033b2:	e7f8      	b.n	80033a6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80033b4:	2001      	movs	r0, #1
 80033b6:	e7f6      	b.n	80033a6 <HAL_RCC_ClockConfig+0x13a>
 80033b8:	40023c00 	.word	0x40023c00
 80033bc:	40023800 	.word	0x40023800
 80033c0:	08005980 	.word	0x08005980
 80033c4:	20000074 	.word	0x20000074
 80033c8:	20000070 	.word	0x20000070

080033cc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80033cc:	4b01      	ldr	r3, [pc, #4]	@ (80033d4 <HAL_RCC_GetHCLKFreq+0x8>)
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000074 	.word	0x20000074

080033d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033da:	f7ff fff7 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80033de:	4b04      	ldr	r3, [pc, #16]	@ (80033f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80033e6:	4a03      	ldr	r2, [pc, #12]	@ (80033f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80033e8:	5cd3      	ldrb	r3, [r2, r3]
}
 80033ea:	40d8      	lsrs	r0, r3
 80033ec:	bd08      	pop	{r3, pc}
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	08005978 	.word	0x08005978

080033f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033fa:	f7ff ffe7 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80033fe:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003406:	4a03      	ldr	r2, [pc, #12]	@ (8003414 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003408:	5cd3      	ldrb	r3, [r2, r3]
}
 800340a:	40d8      	lsrs	r0, r3
 800340c:	bd08      	pop	{r3, pc}
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800
 8003414:	08005978 	.word	0x08005978

08003418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003418:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800341a:	4b60      	ldr	r3, [pc, #384]	@ (800359c <HAL_RCC_GetSysClockFreq+0x184>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b08      	cmp	r3, #8
 8003424:	d006      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x1c>
 8003426:	2b0c      	cmp	r3, #12
 8003428:	d05e      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0xd0>
 800342a:	2b04      	cmp	r3, #4
 800342c:	f040 80b4 	bne.w	8003598 <HAL_RCC_GetSysClockFreq+0x180>
      sysclockfreq = HSI_VALUE;
      break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003430:	485b      	ldr	r0, [pc, #364]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003432:	e033      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003434:	4b59      	ldr	r3, [pc, #356]	@ (800359c <HAL_RCC_GetSysClockFreq+0x184>)
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003442:	d02c      	beq.n	800349e <HAL_RCC_GetSysClockFreq+0x86>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003444:	4b55      	ldr	r3, [pc, #340]	@ (800359c <HAL_RCC_GetSysClockFreq+0x184>)
 8003446:	6858      	ldr	r0, [r3, #4]
 8003448:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800344c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003450:	ebbc 0c00 	subs.w	ip, ip, r0
 8003454:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003458:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800345c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003460:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003464:	ebb1 010c 	subs.w	r1, r1, ip
 8003468:	eb63 030e 	sbc.w	r3, r3, lr
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003472:	00c9      	lsls	r1, r1, #3
 8003474:	eb11 0c00 	adds.w	ip, r1, r0
 8003478:	f143 0300 	adc.w	r3, r3, #0
 800347c:	0259      	lsls	r1, r3, #9
 800347e:	2300      	movs	r3, #0
 8003480:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8003484:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8003488:	f7fd fb5a 	bl	8000b40 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800348c:	4b43      	ldr	r3, [pc, #268]	@ (800359c <HAL_RCC_GetSysClockFreq+0x184>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003494:	3301      	adds	r3, #1
 8003496:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8003498:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800349c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349e:	4b3f      	ldr	r3, [pc, #252]	@ (800359c <HAL_RCC_GetSysClockFreq+0x184>)
 80034a0:	6858      	ldr	r0, [r3, #4]
 80034a2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80034a6:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80034aa:	ebbc 0c00 	subs.w	ip, ip, r0
 80034ae:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80034b2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80034b6:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80034ba:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80034be:	ebb1 010c 	subs.w	r1, r1, ip
 80034c2:	eb63 030e 	sbc.w	r3, r3, lr
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034cc:	00c9      	lsls	r1, r1, #3
 80034ce:	eb11 0c00 	adds.w	ip, r1, r0
 80034d2:	f143 0300 	adc.w	r3, r3, #0
 80034d6:	0299      	lsls	r1, r3, #10
 80034d8:	2300      	movs	r3, #0
 80034da:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80034de:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80034e2:	f7fd fb2d 	bl	8000b40 <__aeabi_uldivmod>
 80034e6:	e7d1      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x74>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e8:	4b2c      	ldr	r3, [pc, #176]	@ (800359c <HAL_RCC_GetSysClockFreq+0x184>)
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80034f6:	d02a      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0x136>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f8:	4b28      	ldr	r3, [pc, #160]	@ (800359c <HAL_RCC_GetSysClockFreq+0x184>)
 80034fa:	6858      	ldr	r0, [r3, #4]
 80034fc:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003500:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003504:	ebbc 0c00 	subs.w	ip, ip, r0
 8003508:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800350c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003510:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003514:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003518:	ebb1 010c 	subs.w	r1, r1, ip
 800351c:	eb63 030e 	sbc.w	r3, r3, lr
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003526:	00c9      	lsls	r1, r1, #3
 8003528:	eb11 0c00 	adds.w	ip, r1, r0
 800352c:	f143 0300 	adc.w	r3, r3, #0
 8003530:	0259      	lsls	r1, r3, #9
 8003532:	2300      	movs	r3, #0
 8003534:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8003538:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800353c:	f7fd fb00 	bl	8000b40 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003540:	4b16      	ldr	r3, [pc, #88]	@ (800359c <HAL_RCC_GetSysClockFreq+0x184>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 8003548:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800354c:	e7a6      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x84>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354e:	4b13      	ldr	r3, [pc, #76]	@ (800359c <HAL_RCC_GetSysClockFreq+0x184>)
 8003550:	6858      	ldr	r0, [r3, #4]
 8003552:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003556:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800355a:	ebbc 0c00 	subs.w	ip, ip, r0
 800355e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003562:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003566:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800356a:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800356e:	ebb1 010c 	subs.w	r1, r1, ip
 8003572:	eb63 030e 	sbc.w	r3, r3, lr
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800357c:	00c9      	lsls	r1, r1, #3
 800357e:	eb11 0c00 	adds.w	ip, r1, r0
 8003582:	f143 0300 	adc.w	r3, r3, #0
 8003586:	0299      	lsls	r1, r3, #10
 8003588:	2300      	movs	r3, #0
 800358a:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800358e:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003592:	f7fd fad5 	bl	8000b40 <__aeabi_uldivmod>
 8003596:	e7d3      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x128>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003598:	4802      	ldr	r0, [pc, #8]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x18c>)
  return sysclockfreq;
 800359a:	e77f      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x84>
 800359c:	40023800 	.word	0x40023800
 80035a0:	007a1200 	.word	0x007a1200
 80035a4:	00f42400 	.word	0x00f42400

080035a8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035a8:	2800      	cmp	r0, #0
 80035aa:	f000 8201 	beq.w	80039b0 <HAL_RCC_OscConfig+0x408>
{
 80035ae:	b570      	push	{r4, r5, r6, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b4:	6803      	ldr	r3, [r0, #0]
 80035b6:	f013 0f01 	tst.w	r3, #1
 80035ba:	d041      	beq.n	8003640 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035bc:	4b99      	ldr	r3, [pc, #612]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 030c 	and.w	r3, r3, #12
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d032      	beq.n	800362e <HAL_RCC_OscConfig+0x86>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035c8:	4b96      	ldr	r3, [pc, #600]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 030c 	and.w	r3, r3, #12
        || \
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d027      	beq.n	8003624 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d4:	4b93      	ldr	r3, [pc, #588]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035dc:	2b0c      	cmp	r3, #12
 80035de:	d059      	beq.n	8003694 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e0:	6863      	ldr	r3, [r4, #4]
 80035e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e6:	d05b      	beq.n	80036a0 <HAL_RCC_OscConfig+0xf8>
 80035e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035ec:	d05e      	beq.n	80036ac <HAL_RCC_OscConfig+0x104>
 80035ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80035fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003600:	6863      	ldr	r3, [r4, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d05c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7ff fb0f 	bl	8002c28 <HAL_GetTick>
 800360a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360c:	4b85      	ldr	r3, [pc, #532]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003614:	d114      	bne.n	8003640 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003616:	f7ff fb07 	bl	8002c28 <HAL_GetTick>
 800361a:	1b40      	subs	r0, r0, r5
 800361c:	2864      	cmp	r0, #100	@ 0x64
 800361e:	d9f5      	bls.n	800360c <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 8003620:	2003      	movs	r0, #3
 8003622:	e1cc      	b.n	80039be <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003624:	4b7f      	ldr	r3, [pc, #508]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800362c:	d0d2      	beq.n	80035d4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362e:	4b7d      	ldr	r3, [pc, #500]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003636:	d003      	beq.n	8003640 <HAL_RCC_OscConfig+0x98>
 8003638:	6863      	ldr	r3, [r4, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 81ba 	beq.w	80039b4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	f013 0f02 	tst.w	r3, #2
 8003646:	d060      	beq.n	800370a <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003648:	4b76      	ldr	r3, [pc, #472]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f013 0f0c 	tst.w	r3, #12
 8003650:	d04a      	beq.n	80036e8 <HAL_RCC_OscConfig+0x140>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003652:	4b74      	ldr	r3, [pc, #464]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
        || \
 800365a:	2b08      	cmp	r3, #8
 800365c:	d03f      	beq.n	80036de <HAL_RCC_OscConfig+0x136>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365e:	4b71      	ldr	r3, [pc, #452]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003666:	2b0c      	cmp	r3, #12
 8003668:	d069      	beq.n	800373e <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800366a:	68e3      	ldr	r3, [r4, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d075      	beq.n	800375c <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003670:	4b6d      	ldr	r3, [pc, #436]	@ (8003828 <HAL_RCC_OscConfig+0x280>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003676:	f7ff fad7 	bl	8002c28 <HAL_GetTick>
 800367a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367c:	4b69      	ldr	r3, [pc, #420]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f013 0f02 	tst.w	r3, #2
 8003684:	d161      	bne.n	800374a <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003686:	f7ff facf 	bl	8002c28 <HAL_GetTick>
 800368a:	1b40      	subs	r0, r0, r5
 800368c:	2802      	cmp	r0, #2
 800368e:	d9f5      	bls.n	800367c <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8003690:	2003      	movs	r0, #3
 8003692:	e194      	b.n	80039be <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003694:	4b63      	ldr	r3, [pc, #396]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800369c:	d0a0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x38>
 800369e:	e7c6      	b.n	800362e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a0:	4a60      	ldr	r2, [pc, #384]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 80036a2:	6813      	ldr	r3, [r2, #0]
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e7a9      	b.n	8003600 <HAL_RCC_OscConfig+0x58>
 80036ac:	4b5d      	ldr	r3, [pc, #372]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e79f      	b.n	8003600 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 80036c0:	f7ff fab2 	bl	8002c28 <HAL_GetTick>
 80036c4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c6:	4b57      	ldr	r3, [pc, #348]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80036ce:	d0b7      	beq.n	8003640 <HAL_RCC_OscConfig+0x98>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7ff faaa 	bl	8002c28 <HAL_GetTick>
 80036d4:	1b40      	subs	r0, r0, r5
 80036d6:	2864      	cmp	r0, #100	@ 0x64
 80036d8:	d9f5      	bls.n	80036c6 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80036da:	2003      	movs	r0, #3
 80036dc:	e16f      	b.n	80039be <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036de:	4b51      	ldr	r3, [pc, #324]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80036e6:	d1ba      	bne.n	800365e <HAL_RCC_OscConfig+0xb6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e8:	4b4e      	ldr	r3, [pc, #312]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f013 0f02 	tst.w	r3, #2
 80036f0:	d003      	beq.n	80036fa <HAL_RCC_OscConfig+0x152>
 80036f2:	68e3      	ldr	r3, [r4, #12]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	f040 815f 	bne.w	80039b8 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 80036fc:	6813      	ldr	r3, [r2, #0]
 80036fe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003702:	6921      	ldr	r1, [r4, #16]
 8003704:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003708:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	f013 0f08 	tst.w	r3, #8
 8003710:	d049      	beq.n	80037a6 <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003712:	6963      	ldr	r3, [r4, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d033      	beq.n	8003780 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003718:	4b43      	ldr	r3, [pc, #268]	@ (8003828 <HAL_RCC_OscConfig+0x280>)
 800371a:	2201      	movs	r2, #1
 800371c:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7ff fa82 	bl	8002c28 <HAL_GetTick>
 8003724:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	4b3f      	ldr	r3, [pc, #252]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 8003728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800372a:	f013 0f02 	tst.w	r3, #2
 800372e:	d13a      	bne.n	80037a6 <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003730:	f7ff fa7a 	bl	8002c28 <HAL_GetTick>
 8003734:	1b40      	subs	r0, r0, r5
 8003736:	2802      	cmp	r0, #2
 8003738:	d9f5      	bls.n	8003726 <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 800373a:	2003      	movs	r0, #3
 800373c:	e13f      	b.n	80039be <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800373e:	4b39      	ldr	r3, [pc, #228]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003746:	d190      	bne.n	800366a <HAL_RCC_OscConfig+0xc2>
 8003748:	e7ce      	b.n	80036e8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374a:	4a36      	ldr	r2, [pc, #216]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 800374c:	6813      	ldr	r3, [r2, #0]
 800374e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003752:	6921      	ldr	r1, [r4, #16]
 8003754:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e7d6      	b.n	800370a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800375c:	4b32      	ldr	r3, [pc, #200]	@ (8003828 <HAL_RCC_OscConfig+0x280>)
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003762:	f7ff fa61 	bl	8002c28 <HAL_GetTick>
 8003766:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003768:	4b2e      	ldr	r3, [pc, #184]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f013 0f02 	tst.w	r3, #2
 8003770:	d0cb      	beq.n	800370a <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003772:	f7ff fa59 	bl	8002c28 <HAL_GetTick>
 8003776:	1b40      	subs	r0, r0, r5
 8003778:	2802      	cmp	r0, #2
 800377a:	d9f5      	bls.n	8003768 <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 800377c:	2003      	movs	r0, #3
 800377e:	e11e      	b.n	80039be <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003780:	4b29      	ldr	r3, [pc, #164]	@ (8003828 <HAL_RCC_OscConfig+0x280>)
 8003782:	2200      	movs	r2, #0
 8003784:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003788:	f7ff fa4e 	bl	8002c28 <HAL_GetTick>
 800378c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378e:	4b25      	ldr	r3, [pc, #148]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 8003790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003792:	f013 0f02 	tst.w	r3, #2
 8003796:	d006      	beq.n	80037a6 <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003798:	f7ff fa46 	bl	8002c28 <HAL_GetTick>
 800379c:	1b40      	subs	r0, r0, r5
 800379e:	2802      	cmp	r0, #2
 80037a0:	d9f5      	bls.n	800378e <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 80037a2:	2003      	movs	r0, #3
 80037a4:	e10b      	b.n	80039be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	f013 0f04 	tst.w	r3, #4
 80037ac:	d076      	beq.n	800389c <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80037b6:	d133      	bne.n	8003820 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b8:	2300      	movs	r3, #0
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	4b19      	ldr	r3, [pc, #100]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 80037be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037c0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80037c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80037d0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d2:	4b16      	ldr	r3, [pc, #88]	@ (800382c <HAL_RCC_OscConfig+0x284>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80037da:	d029      	beq.n	8003830 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037dc:	68a3      	ldr	r3, [r4, #8]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d03a      	beq.n	8003858 <HAL_RCC_OscConfig+0x2b0>
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	d03e      	beq.n	8003864 <HAL_RCC_OscConfig+0x2bc>
 80037e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 80037e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	671a      	str	r2, [r3, #112]	@ 0x70
 80037f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037f2:	f022 0204 	bic.w	r2, r2, #4
 80037f6:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f8:	68a3      	ldr	r3, [r4, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d03c      	beq.n	8003878 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7ff fa13 	bl	8002c28 <HAL_GetTick>
 8003802:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003804:	4b07      	ldr	r3, [pc, #28]	@ (8003824 <HAL_RCC_OscConfig+0x27c>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	f013 0f02 	tst.w	r3, #2
 800380c:	d145      	bne.n	800389a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380e:	f7ff fa0b 	bl	8002c28 <HAL_GetTick>
 8003812:	1b80      	subs	r0, r0, r6
 8003814:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003818:	4298      	cmp	r0, r3
 800381a:	d9f3      	bls.n	8003804 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 800381c:	2003      	movs	r0, #3
 800381e:	e0ce      	b.n	80039be <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8003820:	2500      	movs	r5, #0
 8003822:	e7d6      	b.n	80037d2 <HAL_RCC_OscConfig+0x22a>
 8003824:	40023800 	.word	0x40023800
 8003828:	42470000 	.word	0x42470000
 800382c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003830:	4a6b      	ldr	r2, [pc, #428]	@ (80039e0 <HAL_RCC_OscConfig+0x438>)
 8003832:	6813      	ldr	r3, [r2, #0]
 8003834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003838:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800383a:	f7ff f9f5 	bl	8002c28 <HAL_GetTick>
 800383e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003840:	4b67      	ldr	r3, [pc, #412]	@ (80039e0 <HAL_RCC_OscConfig+0x438>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003848:	d1c8      	bne.n	80037dc <HAL_RCC_OscConfig+0x234>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384a:	f7ff f9ed 	bl	8002c28 <HAL_GetTick>
 800384e:	1b80      	subs	r0, r0, r6
 8003850:	2802      	cmp	r0, #2
 8003852:	d9f5      	bls.n	8003840 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 8003854:	2003      	movs	r0, #3
 8003856:	e0b2      	b.n	80039be <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003858:	4a62      	ldr	r2, [pc, #392]	@ (80039e4 <HAL_RCC_OscConfig+0x43c>)
 800385a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6713      	str	r3, [r2, #112]	@ 0x70
 8003862:	e7c9      	b.n	80037f8 <HAL_RCC_OscConfig+0x250>
 8003864:	4b5f      	ldr	r3, [pc, #380]	@ (80039e4 <HAL_RCC_OscConfig+0x43c>)
 8003866:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003868:	f042 0204 	orr.w	r2, r2, #4
 800386c:	671a      	str	r2, [r3, #112]	@ 0x70
 800386e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003870:	f042 0201 	orr.w	r2, r2, #1
 8003874:	671a      	str	r2, [r3, #112]	@ 0x70
 8003876:	e7bf      	b.n	80037f8 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003878:	f7ff f9d6 	bl	8002c28 <HAL_GetTick>
 800387c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387e:	4b59      	ldr	r3, [pc, #356]	@ (80039e4 <HAL_RCC_OscConfig+0x43c>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003882:	f013 0f02 	tst.w	r3, #2
 8003886:	d008      	beq.n	800389a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003888:	f7ff f9ce 	bl	8002c28 <HAL_GetTick>
 800388c:	1b80      	subs	r0, r0, r6
 800388e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003892:	4298      	cmp	r0, r3
 8003894:	d9f3      	bls.n	800387e <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8003896:	2003      	movs	r0, #3
 8003898:	e091      	b.n	80039be <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800389a:	b9ed      	cbnz	r5, 80038d8 <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800389c:	69a3      	ldr	r3, [r4, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 808c 	beq.w	80039bc <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038a4:	4a4f      	ldr	r2, [pc, #316]	@ (80039e4 <HAL_RCC_OscConfig+0x43c>)
 80038a6:	6892      	ldr	r2, [r2, #8]
 80038a8:	f002 020c 	and.w	r2, r2, #12
 80038ac:	2a08      	cmp	r2, #8
 80038ae:	d054      	beq.n	800395a <HAL_RCC_OscConfig+0x3b2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d017      	beq.n	80038e4 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b4:	4b4c      	ldr	r3, [pc, #304]	@ (80039e8 <HAL_RCC_OscConfig+0x440>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ba:	f7ff f9b5 	bl	8002c28 <HAL_GetTick>
 80038be:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c0:	4b48      	ldr	r3, [pc, #288]	@ (80039e4 <HAL_RCC_OscConfig+0x43c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80038c8:	d045      	beq.n	8003956 <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ca:	f7ff f9ad 	bl	8002c28 <HAL_GetTick>
 80038ce:	1b00      	subs	r0, r0, r4
 80038d0:	2802      	cmp	r0, #2
 80038d2:	d9f5      	bls.n	80038c0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80038d4:	2003      	movs	r0, #3
 80038d6:	e072      	b.n	80039be <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d8:	4a42      	ldr	r2, [pc, #264]	@ (80039e4 <HAL_RCC_OscConfig+0x43c>)
 80038da:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80038dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038e2:	e7db      	b.n	800389c <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 80038e4:	4b40      	ldr	r3, [pc, #256]	@ (80039e8 <HAL_RCC_OscConfig+0x440>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80038ea:	f7ff f99d 	bl	8002c28 <HAL_GetTick>
 80038ee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f0:	4b3c      	ldr	r3, [pc, #240]	@ (80039e4 <HAL_RCC_OscConfig+0x43c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80038f8:	d006      	beq.n	8003908 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fa:	f7ff f995 	bl	8002c28 <HAL_GetTick>
 80038fe:	1b40      	subs	r0, r0, r5
 8003900:	2802      	cmp	r0, #2
 8003902:	d9f5      	bls.n	80038f0 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 8003904:	2003      	movs	r0, #3
 8003906:	e05a      	b.n	80039be <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003908:	69e3      	ldr	r3, [r4, #28]
 800390a:	6a22      	ldr	r2, [r4, #32]
 800390c:	4313      	orrs	r3, r2
 800390e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003910:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003914:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003916:	0852      	lsrs	r2, r2, #1
 8003918:	3a01      	subs	r2, #1
 800391a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800391e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003920:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003924:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003926:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800392a:	4a2e      	ldr	r2, [pc, #184]	@ (80039e4 <HAL_RCC_OscConfig+0x43c>)
 800392c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800392e:	4b2e      	ldr	r3, [pc, #184]	@ (80039e8 <HAL_RCC_OscConfig+0x440>)
 8003930:	2201      	movs	r2, #1
 8003932:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003934:	f7ff f978 	bl	8002c28 <HAL_GetTick>
 8003938:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393a:	4b2a      	ldr	r3, [pc, #168]	@ (80039e4 <HAL_RCC_OscConfig+0x43c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003942:	d106      	bne.n	8003952 <HAL_RCC_OscConfig+0x3aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003944:	f7ff f970 	bl	8002c28 <HAL_GetTick>
 8003948:	1b00      	subs	r0, r0, r4
 800394a:	2802      	cmp	r0, #2
 800394c:	d9f5      	bls.n	800393a <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 800394e:	2003      	movs	r0, #3
 8003950:	e035      	b.n	80039be <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003952:	2000      	movs	r0, #0
 8003954:	e033      	b.n	80039be <HAL_RCC_OscConfig+0x416>
 8003956:	2000      	movs	r0, #0
 8003958:	e031      	b.n	80039be <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800395a:	2b01      	cmp	r3, #1
 800395c:	d031      	beq.n	80039c2 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 800395e:	4b21      	ldr	r3, [pc, #132]	@ (80039e4 <HAL_RCC_OscConfig+0x43c>)
 8003960:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8003966:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003968:	4291      	cmp	r1, r2
 800396a:	d12c      	bne.n	80039c6 <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800396c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003970:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003972:	428a      	cmp	r2, r1
 8003974:	d129      	bne.n	80039ca <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003976:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003978:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800397c:	401a      	ands	r2, r3
 800397e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003982:	d124      	bne.n	80039ce <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003984:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8003988:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800398a:	0852      	lsrs	r2, r2, #1
 800398c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800398e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003992:	d11e      	bne.n	80039d2 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003994:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003998:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800399a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800399e:	d11a      	bne.n	80039d6 <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039a0:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80039a4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a6:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80039aa:	d116      	bne.n	80039da <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 80039ac:	2000      	movs	r0, #0
 80039ae:	e006      	b.n	80039be <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80039b0:	2001      	movs	r0, #1
}
 80039b2:	4770      	bx	lr
        return HAL_ERROR;
 80039b4:	2001      	movs	r0, #1
 80039b6:	e002      	b.n	80039be <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80039b8:	2001      	movs	r0, #1
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80039bc:	2000      	movs	r0, #0
}
 80039be:	b002      	add	sp, #8
 80039c0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80039c2:	2001      	movs	r0, #1
 80039c4:	e7fb      	b.n	80039be <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80039c6:	2001      	movs	r0, #1
 80039c8:	e7f9      	b.n	80039be <HAL_RCC_OscConfig+0x416>
 80039ca:	2001      	movs	r0, #1
 80039cc:	e7f7      	b.n	80039be <HAL_RCC_OscConfig+0x416>
 80039ce:	2001      	movs	r0, #1
 80039d0:	e7f5      	b.n	80039be <HAL_RCC_OscConfig+0x416>
 80039d2:	2001      	movs	r0, #1
 80039d4:	e7f3      	b.n	80039be <HAL_RCC_OscConfig+0x416>
 80039d6:	2001      	movs	r0, #1
 80039d8:	e7f1      	b.n	80039be <HAL_RCC_OscConfig+0x416>
 80039da:	2001      	movs	r0, #1
 80039dc:	e7ef      	b.n	80039be <HAL_RCC_OscConfig+0x416>
 80039de:	bf00      	nop
 80039e0:	40007000 	.word	0x40007000
 80039e4:	40023800 	.word	0x40023800
 80039e8:	42470000 	.word	0x42470000

080039ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	4605      	mov	r5, r0
 80039f4:	4688      	mov	r8, r1
 80039f6:	4617      	mov	r7, r2
 80039f8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039fa:	f7ff f915 	bl	8002c28 <HAL_GetTick>
 80039fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a00:	1a1b      	subs	r3, r3, r0
 8003a02:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8003a06:	f7ff f90f 	bl	8002c28 <HAL_GetTick>
 8003a0a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a0c:	4b28      	ldr	r3, [pc, #160]	@ (8003ab0 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003a14:	fb09 f303 	mul.w	r3, r9, r3
 8003a18:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a1a:	682b      	ldr	r3, [r5, #0]
 8003a1c:	689c      	ldr	r4, [r3, #8]
 8003a1e:	ea38 0404 	bics.w	r4, r8, r4
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	42bb      	cmp	r3, r7
 8003a2a:	d03d      	beq.n	8003aa8 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a2c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003a30:	d0f3      	beq.n	8003a1a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a32:	f7ff f8f9 	bl	8002c28 <HAL_GetTick>
 8003a36:	eba0 000a 	sub.w	r0, r0, sl
 8003a3a:	4548      	cmp	r0, r9
 8003a3c:	d207      	bcs.n	8003a4e <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a3e:	9a01      	ldr	r2, [sp, #4]
 8003a40:	b102      	cbz	r2, 8003a44 <SPI_WaitFlagStateUntilTimeout+0x58>
 8003a42:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003a44:	9b01      	ldr	r3, [sp, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	4691      	mov	r9, r2
 8003a4c:	e7e5      	b.n	8003a1a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a4e:	682a      	ldr	r2, [r5, #0]
 8003a50:	6853      	ldr	r3, [r2, #4]
 8003a52:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003a56:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a58:	686b      	ldr	r3, [r5, #4]
 8003a5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a5e:	d00b      	beq.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a60:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a66:	d014      	beq.n	8003a92 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003a74:	2003      	movs	r0, #3
 8003a76:	e018      	b.n	8003aaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a78:	68ab      	ldr	r3, [r5, #8]
 8003a7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a7e:	d002      	beq.n	8003a86 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a84:	d1ec      	bne.n	8003a60 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8003a86:	682a      	ldr	r2, [r5, #0]
 8003a88:	6813      	ldr	r3, [r2, #0]
 8003a8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	e7e6      	b.n	8003a60 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8003a92:	682a      	ldr	r2, [r5, #0]
 8003a94:	6813      	ldr	r3, [r2, #0]
 8003a96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	682a      	ldr	r2, [r5, #0]
 8003a9e:	6813      	ldr	r3, [r2, #0]
 8003aa0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e7df      	b.n	8003a68 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8003aa8:	2000      	movs	r0, #0
}
 8003aaa:	b002      	add	sp, #8
 8003aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab0:	20000074 	.word	0x20000074

08003ab4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	4604      	mov	r4, r0
 8003aba:	460d      	mov	r5, r1
 8003abc:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003abe:	9200      	str	r2, [sp, #0]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	f7ff ff91 	bl	80039ec <SPI_WaitFlagStateUntilTimeout>
 8003aca:	b9d0      	cbnz	r0, 8003b02 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003acc:	4b17      	ldr	r3, [pc, #92]	@ (8003b2c <SPI_EndRxTxTransaction+0x78>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a17      	ldr	r2, [pc, #92]	@ (8003b30 <SPI_EndRxTxTransaction+0x7c>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	0d5b      	lsrs	r3, r3, #21
 8003ad8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003adc:	fb02 f303 	mul.w	r3, r2, r3
 8003ae0:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ae2:	6863      	ldr	r3, [r4, #4]
 8003ae4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ae8:	d011      	beq.n	8003b0e <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003aea:	9b03      	ldr	r3, [sp, #12]
 8003aec:	b13b      	cbz	r3, 8003afe <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 8003aee:	9b03      	ldr	r3, [sp, #12]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003afc:	d1f5      	bne.n	8003aea <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 8003afe:	b004      	add	sp, #16
 8003b00:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b02:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003b04:	f043 0320 	orr.w	r3, r3, #32
 8003b08:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003b0a:	2003      	movs	r0, #3
 8003b0c:	e7f7      	b.n	8003afe <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b0e:	9600      	str	r6, [sp, #0]
 8003b10:	462b      	mov	r3, r5
 8003b12:	2200      	movs	r2, #0
 8003b14:	2180      	movs	r1, #128	@ 0x80
 8003b16:	4620      	mov	r0, r4
 8003b18:	f7ff ff68 	bl	80039ec <SPI_WaitFlagStateUntilTimeout>
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	d0ee      	beq.n	8003afe <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b20:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003b22:	f043 0320 	orr.w	r3, r3, #32
 8003b26:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003b28:	2003      	movs	r0, #3
 8003b2a:	e7e8      	b.n	8003afe <SPI_EndRxTxTransaction+0x4a>
 8003b2c:	20000074 	.word	0x20000074
 8003b30:	165e9f81 	.word	0x165e9f81

08003b34 <SPI_EndRxTransaction>:
{
 8003b34:	b510      	push	{r4, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	4604      	mov	r4, r0
 8003b3a:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b3c:	6841      	ldr	r1, [r0, #4]
 8003b3e:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8003b42:	d014      	beq.n	8003b6e <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b44:	6861      	ldr	r1, [r4, #4]
 8003b46:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8003b4a:	d12a      	bne.n	8003ba2 <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b4c:	68a1      	ldr	r1, [r4, #8]
 8003b4e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003b52:	d019      	beq.n	8003b88 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b54:	9200      	str	r2, [sp, #0]
 8003b56:	2200      	movs	r2, #0
 8003b58:	2180      	movs	r1, #128	@ 0x80
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f7ff ff46 	bl	80039ec <SPI_WaitFlagStateUntilTimeout>
 8003b60:	b330      	cbz	r0, 8003bb0 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b62:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003b64:	f043 0320 	orr.w	r3, r3, #32
 8003b68:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003b6a:	2003      	movs	r0, #3
 8003b6c:	e020      	b.n	8003bb0 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b6e:	6881      	ldr	r1, [r0, #8]
 8003b70:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003b74:	d002      	beq.n	8003b7c <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b76:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003b7a:	d1e3      	bne.n	8003b44 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8003b7c:	6820      	ldr	r0, [r4, #0]
 8003b7e:	6801      	ldr	r1, [r0, #0]
 8003b80:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8003b84:	6001      	str	r1, [r0, #0]
 8003b86:	e7dd      	b.n	8003b44 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b88:	9200      	str	r2, [sp, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f7ff ff2c 	bl	80039ec <SPI_WaitFlagStateUntilTimeout>
 8003b94:	b160      	cbz	r0, 8003bb0 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b96:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003b98:	f043 0320 	orr.w	r3, r3, #32
 8003b9c:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003b9e:	2003      	movs	r0, #3
 8003ba0:	e006      	b.n	8003bb0 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba2:	9200      	str	r2, [sp, #0]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f7ff ff1f 	bl	80039ec <SPI_WaitFlagStateUntilTimeout>
 8003bae:	b908      	cbnz	r0, 8003bb4 <SPI_EndRxTransaction+0x80>
}
 8003bb0:	b002      	add	sp, #8
 8003bb2:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bb4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003bb6:	f043 0320 	orr.w	r3, r3, #32
 8003bba:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003bbc:	2003      	movs	r0, #3
 8003bbe:	e7f7      	b.n	8003bb0 <SPI_EndRxTransaction+0x7c>

08003bc0 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	d05a      	beq.n	8003c7a <HAL_SPI_Init+0xba>
{
 8003bc4:	b510      	push	{r4, lr}
 8003bc6:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bc8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003bca:	b933      	cbnz	r3, 8003bda <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bcc:	6843      	ldr	r3, [r0, #4]
 8003bce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bd2:	d005      	beq.n	8003be0 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61c3      	str	r3, [r0, #28]
 8003bd8:	e002      	b.n	8003be0 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bde:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be0:	2300      	movs	r3, #0
 8003be2:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003be4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d040      	beq.n	8003c6e <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003bec:	2302      	movs	r3, #2
 8003bee:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8003bf2:	6822      	ldr	r2, [r4, #0]
 8003bf4:	6813      	ldr	r3, [r2, #0]
 8003bf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bfa:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bfc:	6863      	ldr	r3, [r4, #4]
 8003bfe:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8003c02:	68a2      	ldr	r2, [r4, #8]
 8003c04:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	68e2      	ldr	r2, [r4, #12]
 8003c0c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003c10:	4313      	orrs	r3, r2
 8003c12:	6922      	ldr	r2, [r4, #16]
 8003c14:	f002 0202 	and.w	r2, r2, #2
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	6962      	ldr	r2, [r4, #20]
 8003c1c:	f002 0201 	and.w	r2, r2, #1
 8003c20:	4313      	orrs	r3, r2
 8003c22:	69a2      	ldr	r2, [r4, #24]
 8003c24:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	69e2      	ldr	r2, [r4, #28]
 8003c2c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003c30:	4313      	orrs	r3, r2
 8003c32:	6a22      	ldr	r2, [r4, #32]
 8003c34:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003c3c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003c40:	6821      	ldr	r1, [r4, #0]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c46:	8b63      	ldrh	r3, [r4, #26]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003c4e:	f002 0210 	and.w	r2, r2, #16
 8003c52:	6821      	ldr	r1, [r4, #0]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c58:	6822      	ldr	r2, [r4, #0]
 8003c5a:	69d3      	ldr	r3, [r2, #28]
 8003c5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c60:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c62:	2000      	movs	r0, #0
 8003c64:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8003c6c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003c6e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8003c72:	4620      	mov	r0, r4
 8003c74:	f7fe fe7c 	bl	8002970 <HAL_SPI_MspInit>
 8003c78:	e7b8      	b.n	8003bec <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8003c7a:	2001      	movs	r0, #1
}
 8003c7c:	4770      	bx	lr

08003c7e <HAL_SPI_Transmit>:
{
 8003c7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c82:	b083      	sub	sp, #12
 8003c84:	4604      	mov	r4, r0
 8003c86:	4689      	mov	r9, r1
 8003c88:	4690      	mov	r8, r2
 8003c8a:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8003c8c:	f7fe ffcc 	bl	8002c28 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003c90:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	f040 80cd 	bne.w	8003e34 <HAL_SPI_Transmit+0x1b6>
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	b2df      	uxtb	r7, r3
  if ((pData == NULL) || (Size == 0U))
 8003c9e:	f1b9 0f00 	cmp.w	r9, #0
 8003ca2:	f000 80c8 	beq.w	8003e36 <HAL_SPI_Transmit+0x1b8>
 8003ca6:	f1b8 0f00 	cmp.w	r8, #0
 8003caa:	f000 80c4 	beq.w	8003e36 <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 8003cae:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	f000 80c3 	beq.w	8003e3e <HAL_SPI_Transmit+0x1c0>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003cc8:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003ccc:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003cd0:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cd4:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003cd6:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003cd8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003cda:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003cdc:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cde:	68a3      	ldr	r3, [r4, #8]
 8003ce0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ce4:	d01e      	beq.n	8003d24 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003cee:	d103      	bne.n	8003cf8 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cf6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cf8:	68e3      	ldr	r3, [r4, #12]
 8003cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cfe:	d01c      	beq.n	8003d3a <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d00:	6863      	ldr	r3, [r4, #4]
 8003d02:	b113      	cbz	r3, 8003d0a <HAL_SPI_Transmit+0x8c>
 8003d04:	f1b8 0f01 	cmp.w	r8, #1
 8003d08:	d15f      	bne.n	8003dca <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d0a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	7812      	ldrb	r2, [r2, #0]
 8003d10:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003d14:	3301      	adds	r3, #1
 8003d16:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d18:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8003d22:	e052      	b.n	8003dca <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 8003d24:	6822      	ldr	r2, [r4, #0]
 8003d26:	6813      	ldr	r3, [r2, #0]
 8003d28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d2c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003d2e:	6822      	ldr	r2, [r4, #0]
 8003d30:	6813      	ldr	r3, [r2, #0]
 8003d32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	e7d5      	b.n	8003ce6 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d3a:	6863      	ldr	r3, [r4, #4]
 8003d3c:	b113      	cbz	r3, 8003d44 <HAL_SPI_Transmit+0xc6>
 8003d3e:	f1b8 0f01 	cmp.w	r8, #1
 8003d42:	d115      	bne.n	8003d70 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d44:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	8812      	ldrh	r2, [r2, #0]
 8003d4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d4c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003d4e:	3302      	adds	r3, #2
 8003d50:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d52:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8003d5c:	e008      	b.n	8003d70 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d5e:	f7fe ff63 	bl	8002c28 <HAL_GetTick>
 8003d62:	1b80      	subs	r0, r0, r6
 8003d64:	42a8      	cmp	r0, r5
 8003d66:	d302      	bcc.n	8003d6e <HAL_SPI_Transmit+0xf0>
 8003d68:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003d6c:	d115      	bne.n	8003d9a <HAL_SPI_Transmit+0x11c>
 8003d6e:	b1a5      	cbz	r5, 8003d9a <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8003d70:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d042      	beq.n	8003dfe <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	f012 0f02 	tst.w	r2, #2
 8003d80:	d0ed      	beq.n	8003d5e <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d82:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003d84:	8812      	ldrh	r2, [r2, #0]
 8003d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d8e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8003d98:	e7ea      	b.n	8003d70 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003da0:	2300      	movs	r3, #0
 8003da2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003da6:	2703      	movs	r7, #3
 8003da8:	e045      	b.n	8003e36 <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003daa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003dac:	7812      	ldrb	r2, [r2, #0]
 8003dae:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003db0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003db2:	3301      	adds	r3, #1
 8003db4:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003db6:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 8003dba:	fa1f fc8c 	uxth.w	ip, ip
 8003dbe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003dc2:	fa1f fc8c 	uxth.w	ip, ip
 8003dc6:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8003dca:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	b1b3      	cbz	r3, 8003dfe <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	f012 0f02 	tst.w	r2, #2
 8003dd8:	d1e7      	bne.n	8003daa <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dda:	f7fe ff25 	bl	8002c28 <HAL_GetTick>
 8003dde:	1b80      	subs	r0, r0, r6
 8003de0:	42a8      	cmp	r0, r5
 8003de2:	d302      	bcc.n	8003dea <HAL_SPI_Transmit+0x16c>
 8003de4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003de8:	d101      	bne.n	8003dee <HAL_SPI_Transmit+0x170>
 8003dea:	2d00      	cmp	r5, #0
 8003dec:	d1ed      	bne.n	8003dca <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003df4:	2300      	movs	r3, #0
 8003df6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003dfa:	2703      	movs	r7, #3
 8003dfc:	e01b      	b.n	8003e36 <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dfe:	4632      	mov	r2, r6
 8003e00:	4629      	mov	r1, r5
 8003e02:	4620      	mov	r0, r4
 8003e04:	f7ff fe56 	bl	8003ab4 <SPI_EndRxTxTransaction>
 8003e08:	b108      	cbz	r0, 8003e0e <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e0a:	2320      	movs	r3, #32
 8003e0c:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e0e:	68a3      	ldr	r3, [r4, #8]
 8003e10:	b933      	cbnz	r3, 8003e20 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	9201      	str	r2, [sp, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003e26:	2300      	movs	r3, #0
 8003e28:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e2c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e2e:	b913      	cbnz	r3, 8003e36 <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 8003e30:	2700      	movs	r7, #0
 8003e32:	e000      	b.n	8003e36 <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 8003e34:	2702      	movs	r7, #2
}
 8003e36:	4638      	mov	r0, r7
 8003e38:	b003      	add	sp, #12
 8003e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8003e3e:	2702      	movs	r7, #2
 8003e40:	e7f9      	b.n	8003e36 <HAL_SPI_Transmit+0x1b8>

08003e42 <HAL_SPI_TransmitReceive>:
{
 8003e42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e46:	b083      	sub	sp, #12
 8003e48:	4604      	mov	r4, r0
 8003e4a:	4688      	mov	r8, r1
 8003e4c:	4691      	mov	r9, r2
 8003e4e:	461f      	mov	r7, r3
 8003e50:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8003e52:	f7fe fee9 	bl	8002c28 <HAL_GetTick>
 8003e56:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003e58:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 8003e5c:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d00b      	beq.n	8003e7a <HAL_SPI_TransmitReceive+0x38>
 8003e62:	b2d9      	uxtb	r1, r3
 8003e64:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8003e68:	f040 8104 	bne.w	8004074 <HAL_SPI_TransmitReceive+0x232>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e6c:	68a3      	ldr	r3, [r4, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f040 8104 	bne.w	800407c <HAL_SPI_TransmitReceive+0x23a>
 8003e74:	2904      	cmp	r1, #4
 8003e76:	f040 8103 	bne.w	8004080 <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e7a:	f1b8 0f00 	cmp.w	r8, #0
 8003e7e:	f000 8101 	beq.w	8004084 <HAL_SPI_TransmitReceive+0x242>
 8003e82:	f1b9 0f00 	cmp.w	r9, #0
 8003e86:	f000 80ff 	beq.w	8004088 <HAL_SPI_TransmitReceive+0x246>
 8003e8a:	2f00      	cmp	r7, #0
 8003e8c:	f000 80fe 	beq.w	800408c <HAL_SPI_TransmitReceive+0x24a>
  __HAL_LOCK(hspi);
 8003e90:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	f000 80fb 	beq.w	8004090 <HAL_SPI_TransmitReceive+0x24e>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ea0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d002      	beq.n	8003eae <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ea8:	2305      	movs	r3, #5
 8003eaa:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003eb2:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003eb6:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003eb8:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003eba:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003ebe:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003ec0:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8003ec2:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ec4:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003ece:	d103      	bne.n	8003ed8 <HAL_SPI_TransmitReceive+0x96>
    __HAL_SPI_ENABLE(hspi);
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ed6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ed8:	68e3      	ldr	r3, [r4, #12]
 8003eda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ede:	d011      	beq.n	8003f04 <HAL_SPI_TransmitReceive+0xc2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ee0:	6863      	ldr	r3, [r4, #4]
 8003ee2:	b10b      	cbz	r3, 8003ee8 <HAL_SPI_TransmitReceive+0xa6>
 8003ee4:	2f01      	cmp	r7, #1
 8003ee6:	d10b      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ee8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	7812      	ldrb	r2, [r2, #0]
 8003eee:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ef0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ef6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003f00:	2701      	movs	r7, #1
 8003f02:	e071      	b.n	8003fe8 <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f04:	6863      	ldr	r3, [r4, #4]
 8003f06:	b10b      	cbz	r3, 8003f0c <HAL_SPI_TransmitReceive+0xca>
 8003f08:	2f01      	cmp	r7, #1
 8003f0a:	d10b      	bne.n	8003f24 <HAL_SPI_TransmitReceive+0xe2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f0c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	8812      	ldrh	r2, [r2, #0]
 8003f12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003f16:	3302      	adds	r3, #2
 8003f18:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f1a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003f24:	2701      	movs	r7, #1
 8003f26:	e01b      	b.n	8003f60 <HAL_SPI_TransmitReceive+0x11e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	f012 0f01 	tst.w	r2, #1
 8003f30:	d00e      	beq.n	8003f50 <HAL_SPI_TransmitReceive+0x10e>
 8003f32:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003f34:	b292      	uxth	r2, r2
 8003f36:	b15a      	cbz	r2, 8003f50 <HAL_SPI_TransmitReceive+0x10e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003f3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003f40:	3302      	adds	r3, #2
 8003f42:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f44:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003f4e:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f50:	f7fe fe6a 	bl	8002c28 <HAL_GetTick>
 8003f54:	1b80      	subs	r0, r0, r6
 8003f56:	42a8      	cmp	r0, r5
 8003f58:	d302      	bcc.n	8003f60 <HAL_SPI_TransmitReceive+0x11e>
 8003f5a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003f5e:	d11e      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x15c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f60:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	b91b      	cbnz	r3, 8003f6e <HAL_SPI_TransmitReceive+0x12c>
 8003f66:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d062      	beq.n	8004034 <HAL_SPI_TransmitReceive+0x1f2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	f012 0f02 	tst.w	r2, #2
 8003f76:	d0d7      	beq.n	8003f28 <HAL_SPI_TransmitReceive+0xe6>
 8003f78:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003f7a:	b292      	uxth	r2, r2
 8003f7c:	2a00      	cmp	r2, #0
 8003f7e:	d0d3      	beq.n	8003f28 <HAL_SPI_TransmitReceive+0xe6>
 8003f80:	2f00      	cmp	r7, #0
 8003f82:	d0d1      	beq.n	8003f28 <HAL_SPI_TransmitReceive+0xe6>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f84:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003f86:	8812      	ldrh	r2, [r2, #0]
 8003f88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f90:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8003f9a:	2700      	movs	r7, #0
 8003f9c:	e7c4      	b.n	8003f28 <HAL_SPI_TransmitReceive+0xe6>
        hspi->State = HAL_SPI_STATE_READY;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003faa:	2003      	movs	r0, #3
 8003fac:	e063      	b.n	8004076 <HAL_SPI_TransmitReceive+0x234>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	f012 0f01 	tst.w	r2, #1
 8003fb6:	d00e      	beq.n	8003fd6 <HAL_SPI_TransmitReceive+0x194>
 8003fb8:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003fba:	b292      	uxth	r2, r2
 8003fbc:	b15a      	cbz	r2, 8003fd6 <HAL_SPI_TransmitReceive+0x194>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003fc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fc4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003fca:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003fd4:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fd6:	f7fe fe27 	bl	8002c28 <HAL_GetTick>
 8003fda:	1b83      	subs	r3, r0, r6
 8003fdc:	42ab      	cmp	r3, r5
 8003fde:	d302      	bcc.n	8003fe6 <HAL_SPI_TransmitReceive+0x1a4>
 8003fe0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003fe4:	d11e      	bne.n	8004024 <HAL_SPI_TransmitReceive+0x1e2>
 8003fe6:	b1ed      	cbz	r5, 8004024 <HAL_SPI_TransmitReceive+0x1e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	b913      	cbnz	r3, 8003ff4 <HAL_SPI_TransmitReceive+0x1b2>
 8003fee:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	b1fb      	cbz	r3, 8004034 <HAL_SPI_TransmitReceive+0x1f2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	f012 0f02 	tst.w	r2, #2
 8003ffc:	d0d7      	beq.n	8003fae <HAL_SPI_TransmitReceive+0x16c>
 8003ffe:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8004000:	b292      	uxth	r2, r2
 8004002:	2a00      	cmp	r2, #0
 8004004:	d0d3      	beq.n	8003fae <HAL_SPI_TransmitReceive+0x16c>
 8004006:	2f00      	cmp	r7, #0
 8004008:	d0d1      	beq.n	8003fae <HAL_SPI_TransmitReceive+0x16c>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800400a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800400c:	7812      	ldrb	r2, [r2, #0]
 800400e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004010:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004012:	3301      	adds	r3, #1
 8004014:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8004016:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29b      	uxth	r3, r3
 800401e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8004020:	2700      	movs	r7, #0
 8004022:	e7c4      	b.n	8003fae <HAL_SPI_TransmitReceive+0x16c>
        hspi->State = HAL_SPI_STATE_READY;
 8004024:	2301      	movs	r3, #1
 8004026:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800402a:	2300      	movs	r3, #0
 800402c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004030:	2003      	movs	r0, #3
 8004032:	e020      	b.n	8004076 <HAL_SPI_TransmitReceive+0x234>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004034:	4632      	mov	r2, r6
 8004036:	4629      	mov	r1, r5
 8004038:	4620      	mov	r0, r4
 800403a:	f7ff fd3b 	bl	8003ab4 <SPI_EndRxTxTransaction>
 800403e:	b990      	cbnz	r0, 8004066 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004040:	68a3      	ldr	r3, [r4, #8]
 8004042:	b933      	cbnz	r3, 8004052 <HAL_SPI_TransmitReceive+0x210>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004044:	9301      	str	r3, [sp, #4]
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	9201      	str	r2, [sp, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8004052:	2301      	movs	r3, #1
 8004054:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004058:	2300      	movs	r3, #0
 800405a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800405e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004060:	b14b      	cbz	r3, 8004076 <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
 8004062:	2001      	movs	r0, #1
 8004064:	e007      	b.n	8004076 <HAL_SPI_TransmitReceive+0x234>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004066:	2320      	movs	r3, #32
 8004068:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800406a:	2300      	movs	r3, #0
 800406c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8004070:	2001      	movs	r0, #1
 8004072:	e000      	b.n	8004076 <HAL_SPI_TransmitReceive+0x234>
    return HAL_BUSY;
 8004074:	2002      	movs	r0, #2
}
 8004076:	b003      	add	sp, #12
 8004078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800407c:	2002      	movs	r0, #2
 800407e:	e7fa      	b.n	8004076 <HAL_SPI_TransmitReceive+0x234>
 8004080:	2002      	movs	r0, #2
 8004082:	e7f8      	b.n	8004076 <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
 8004084:	2001      	movs	r0, #1
 8004086:	e7f6      	b.n	8004076 <HAL_SPI_TransmitReceive+0x234>
 8004088:	2001      	movs	r0, #1
 800408a:	e7f4      	b.n	8004076 <HAL_SPI_TransmitReceive+0x234>
 800408c:	2001      	movs	r0, #1
 800408e:	e7f2      	b.n	8004076 <HAL_SPI_TransmitReceive+0x234>
  __HAL_LOCK(hspi);
 8004090:	2002      	movs	r0, #2
 8004092:	e7f0      	b.n	8004076 <HAL_SPI_TransmitReceive+0x234>

08004094 <HAL_SPI_Receive>:
{
 8004094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004098:	b083      	sub	sp, #12
 800409a:	461d      	mov	r5, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 800409c:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	f040 80b4 	bne.w	800420e <HAL_SPI_Receive+0x17a>
 80040a6:	4604      	mov	r4, r0
 80040a8:	4689      	mov	r9, r1
 80040aa:	4690      	mov	r8, r2
 80040ac:	b2df      	uxtb	r7, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040ae:	6843      	ldr	r3, [r0, #4]
 80040b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040b4:	d101      	bne.n	80040ba <HAL_SPI_Receive+0x26>
 80040b6:	6883      	ldr	r3, [r0, #8]
 80040b8:	b393      	cbz	r3, 8004120 <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 80040ba:	f7fe fdb5 	bl	8002c28 <HAL_GetTick>
 80040be:	4606      	mov	r6, r0
  if ((pData == NULL) || (Size == 0U))
 80040c0:	f1b9 0f00 	cmp.w	r9, #0
 80040c4:	f000 80a4 	beq.w	8004210 <HAL_SPI_Receive+0x17c>
 80040c8:	f1b8 0f00 	cmp.w	r8, #0
 80040cc:	f000 80a0 	beq.w	8004210 <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 80040d0:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	f000 809f 	beq.w	8004218 <HAL_SPI_Receive+0x184>
 80040da:	2301      	movs	r3, #1
 80040dc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040e0:	2304      	movs	r3, #4
 80040e2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040ea:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80040ee:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80040f2:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040f6:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80040f8:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80040fa:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80040fc:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80040fe:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004100:	68a3      	ldr	r3, [r4, #8]
 8004102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004106:	d015      	beq.n	8004134 <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004110:	d103      	bne.n	800411a <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004118:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800411a:	68e3      	ldr	r3, [r4, #12]
 800411c:	b1f3      	cbz	r3, 800415c <HAL_SPI_Receive+0xc8>
 800411e:	e043      	b.n	80041a8 <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004120:	2304      	movs	r3, #4
 8004122:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004126:	9500      	str	r5, [sp, #0]
 8004128:	4613      	mov	r3, r2
 800412a:	460a      	mov	r2, r1
 800412c:	f7ff fe89 	bl	8003e42 <HAL_SPI_TransmitReceive>
 8004130:	4607      	mov	r7, r0
 8004132:	e06d      	b.n	8004210 <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 8004134:	6822      	ldr	r2, [r4, #0]
 8004136:	6813      	ldr	r3, [r2, #0]
 8004138:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800413c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	6813      	ldr	r3, [r2, #0]
 8004142:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	e7de      	b.n	8004108 <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800414a:	f7fe fd6d 	bl	8002c28 <HAL_GetTick>
 800414e:	1b80      	subs	r0, r0, r6
 8004150:	42a8      	cmp	r0, r5
 8004152:	d302      	bcc.n	800415a <HAL_SPI_Receive+0xc6>
 8004154:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004158:	d115      	bne.n	8004186 <HAL_SPI_Receive+0xf2>
 800415a:	b1a5      	cbz	r5, 8004186 <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 800415c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d042      	beq.n	80041ea <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	f012 0f01 	tst.w	r2, #1
 800416c:	d0ed      	beq.n	800414a <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800416e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004170:	7b1b      	ldrb	r3, [r3, #12]
 8004172:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004174:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004176:	3301      	adds	r3, #1
 8004178:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800417a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29b      	uxth	r3, r3
 8004182:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004184:	e7ea      	b.n	800415c <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 8004186:	2301      	movs	r3, #1
 8004188:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800418c:	2300      	movs	r3, #0
 800418e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004192:	2703      	movs	r7, #3
 8004194:	e03c      	b.n	8004210 <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004196:	f7fe fd47 	bl	8002c28 <HAL_GetTick>
 800419a:	1b80      	subs	r0, r0, r6
 800419c:	42a8      	cmp	r0, r5
 800419e:	d302      	bcc.n	80041a6 <HAL_SPI_Receive+0x112>
 80041a0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80041a4:	d119      	bne.n	80041da <HAL_SPI_Receive+0x146>
 80041a6:	b1c5      	cbz	r5, 80041da <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 80041a8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	b1eb      	cbz	r3, 80041ea <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	f012 0f01 	tst.w	r2, #1
 80041b6:	d0ee      	beq.n	8004196 <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80041bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041be:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80041c0:	3302      	adds	r3, #2
 80041c2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80041c4:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 80041c8:	fa1f fc8c 	uxth.w	ip, ip
 80041cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80041d0:	fa1f fc8c 	uxth.w	ip, ip
 80041d4:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 80041d8:	e7e6      	b.n	80041a8 <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 80041da:	2301      	movs	r3, #1
 80041dc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80041e0:	2300      	movs	r3, #0
 80041e2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80041e6:	2703      	movs	r7, #3
 80041e8:	e012      	b.n	8004210 <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ea:	4632      	mov	r2, r6
 80041ec:	4629      	mov	r1, r5
 80041ee:	4620      	mov	r0, r4
 80041f0:	f7ff fca0 	bl	8003b34 <SPI_EndRxTransaction>
 80041f4:	b108      	cbz	r0, 80041fa <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041f6:	2320      	movs	r3, #32
 80041f8:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80041fa:	2301      	movs	r3, #1
 80041fc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004200:	2300      	movs	r3, #0
 8004202:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004206:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004208:	b913      	cbnz	r3, 8004210 <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 800420a:	2700      	movs	r7, #0
 800420c:	e000      	b.n	8004210 <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 800420e:	2702      	movs	r7, #2
}
 8004210:	4638      	mov	r0, r7
 8004212:	b003      	add	sp, #12
 8004214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8004218:	2702      	movs	r7, #2
 800421a:	e7f9      	b.n	8004210 <HAL_SPI_Receive+0x17c>

0800421c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004220:	6a02      	ldr	r2, [r0, #32]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800422a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800422c:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004230:	680c      	ldr	r4, [r1, #0]
 8004232:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004236:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800423a:	688b      	ldr	r3, [r1, #8]
 800423c:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004240:	4d11      	ldr	r5, [pc, #68]	@ (8004288 <TIM_OC1_SetConfig+0x6c>)
 8004242:	42a8      	cmp	r0, r5
 8004244:	d003      	beq.n	800424e <TIM_OC1_SetConfig+0x32>
 8004246:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800424a:	42a8      	cmp	r0, r5
 800424c:	d105      	bne.n	800425a <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800424e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004252:	68cd      	ldr	r5, [r1, #12]
 8004254:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004256:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425a:	4d0b      	ldr	r5, [pc, #44]	@ (8004288 <TIM_OC1_SetConfig+0x6c>)
 800425c:	42a8      	cmp	r0, r5
 800425e:	d003      	beq.n	8004268 <TIM_OC1_SetConfig+0x4c>
 8004260:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004264:	42a8      	cmp	r0, r5
 8004266:	d107      	bne.n	8004278 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004268:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800426c:	694d      	ldr	r5, [r1, #20]
 800426e:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004272:	698a      	ldr	r2, [r1, #24]
 8004274:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004278:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800427a:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800427c:	684a      	ldr	r2, [r1, #4]
 800427e:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004280:	6203      	str	r3, [r0, #32]
}
 8004282:	bc30      	pop	{r4, r5}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40010000 	.word	0x40010000

0800428c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800428c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004290:	6a02      	ldr	r2, [r0, #32]
 8004292:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004296:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004298:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800429c:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a0:	680c      	ldr	r4, [r1, #0]
 80042a2:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042a6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042aa:	688c      	ldr	r4, [r1, #8]
 80042ac:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042b0:	4c11      	ldr	r4, [pc, #68]	@ (80042f8 <TIM_OC3_SetConfig+0x6c>)
 80042b2:	42a0      	cmp	r0, r4
 80042b4:	d003      	beq.n	80042be <TIM_OC3_SetConfig+0x32>
 80042b6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80042ba:	42a0      	cmp	r0, r4
 80042bc:	d106      	bne.n	80042cc <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042c2:	68cc      	ldr	r4, [r1, #12]
 80042c4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042cc:	4c0a      	ldr	r4, [pc, #40]	@ (80042f8 <TIM_OC3_SetConfig+0x6c>)
 80042ce:	42a0      	cmp	r0, r4
 80042d0:	d003      	beq.n	80042da <TIM_OC3_SetConfig+0x4e>
 80042d2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80042d6:	42a0      	cmp	r0, r4
 80042d8:	d107      	bne.n	80042ea <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042da:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042de:	694c      	ldr	r4, [r1, #20]
 80042e0:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042e4:	698c      	ldr	r4, [r1, #24]
 80042e6:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ea:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ec:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ee:	684a      	ldr	r2, [r1, #4]
 80042f0:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	6203      	str	r3, [r0, #32]
}
 80042f4:	bc30      	pop	{r4, r5}
 80042f6:	4770      	bx	lr
 80042f8:	40010000 	.word	0x40010000

080042fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fe:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004300:	6a02      	ldr	r2, [r0, #32]
 8004302:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004306:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800430a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800430c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004310:	680d      	ldr	r5, [r1, #0]
 8004312:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004316:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800431a:	688d      	ldr	r5, [r1, #8]
 800431c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004320:	4d09      	ldr	r5, [pc, #36]	@ (8004348 <TIM_OC4_SetConfig+0x4c>)
 8004322:	42a8      	cmp	r0, r5
 8004324:	d003      	beq.n	800432e <TIM_OC4_SetConfig+0x32>
 8004326:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800432a:	42a8      	cmp	r0, r5
 800432c:	d104      	bne.n	8004338 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800432e:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004332:	694d      	ldr	r5, [r1, #20]
 8004334:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004338:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800433a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800433c:	684a      	ldr	r2, [r1, #4]
 800433e:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004340:	6203      	str	r3, [r0, #32]
}
 8004342:	bc30      	pop	{r4, r5}
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40010000 	.word	0x40010000

0800434c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800434c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800434e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004350:	6a04      	ldr	r4, [r0, #32]
 8004352:	f024 0401 	bic.w	r4, r4, #1
 8004356:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004358:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800435a:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800435e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004362:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004366:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004368:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800436a:	6203      	str	r3, [r0, #32]
}
 800436c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004370:	4770      	bx	lr

08004372 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004372:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004374:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004376:	6a04      	ldr	r4, [r0, #32]
 8004378:	f024 0410 	bic.w	r4, r4, #16
 800437c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437e:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004380:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004384:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004388:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800438c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004390:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004392:	6203      	str	r3, [r0, #32]
}
 8004394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004398:	4770      	bx	lr

0800439a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800439a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800439c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a0:	430b      	orrs	r3, r1
 80043a2:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043a6:	6083      	str	r3, [r0, #8]
}
 80043a8:	4770      	bx	lr

080043aa <HAL_TIM_PWM_MspInit>:
}
 80043aa:	4770      	bx	lr

080043ac <HAL_TIM_PeriodElapsedCallback>:
}
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_OC_DelayElapsedCallback>:
}
 80043ae:	4770      	bx	lr

080043b0 <HAL_TIM_IC_CaptureCallback>:
}
 80043b0:	4770      	bx	lr

080043b2 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80043b2:	4770      	bx	lr

080043b4 <HAL_TIM_TriggerCallback>:
}
 80043b4:	4770      	bx	lr

080043b6 <HAL_TIM_IRQHandler>:
{
 80043b6:	b570      	push	{r4, r5, r6, lr}
 80043b8:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80043ba:	6803      	ldr	r3, [r0, #0]
 80043bc:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043be:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043c0:	f015 0f02 	tst.w	r5, #2
 80043c4:	d010      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043c6:	f016 0f02 	tst.w	r6, #2
 80043ca:	d00d      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043cc:	f06f 0202 	mvn.w	r2, #2
 80043d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043d2:	2301      	movs	r3, #1
 80043d4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043d6:	6803      	ldr	r3, [r0, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f013 0f03 	tst.w	r3, #3
 80043de:	d05e      	beq.n	800449e <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80043e0:	f7ff ffe6 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e4:	2300      	movs	r3, #0
 80043e6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043e8:	f015 0f04 	tst.w	r5, #4
 80043ec:	d012      	beq.n	8004414 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043ee:	f016 0f04 	tst.w	r6, #4
 80043f2:	d00f      	beq.n	8004414 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	f06f 0204 	mvn.w	r2, #4
 80043fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043fc:	2302      	movs	r3, #2
 80043fe:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004408:	d04f      	beq.n	80044aa <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800440a:	4620      	mov	r0, r4
 800440c:	f7ff ffd0 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004410:	2300      	movs	r3, #0
 8004412:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004414:	f015 0f08 	tst.w	r5, #8
 8004418:	d012      	beq.n	8004440 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800441a:	f016 0f08 	tst.w	r6, #8
 800441e:	d00f      	beq.n	8004440 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	f06f 0208 	mvn.w	r2, #8
 8004426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004428:	2304      	movs	r3, #4
 800442a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f013 0f03 	tst.w	r3, #3
 8004434:	d040      	beq.n	80044b8 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8004436:	4620      	mov	r0, r4
 8004438:	f7ff ffba 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443c:	2300      	movs	r3, #0
 800443e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004440:	f015 0f10 	tst.w	r5, #16
 8004444:	d012      	beq.n	800446c <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004446:	f016 0f10 	tst.w	r6, #16
 800444a:	d00f      	beq.n	800446c <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	f06f 0210 	mvn.w	r2, #16
 8004452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004454:	2308      	movs	r3, #8
 8004456:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004460:	d031      	beq.n	80044c6 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8004462:	4620      	mov	r0, r4
 8004464:	f7ff ffa4 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004468:	2300      	movs	r3, #0
 800446a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800446c:	f015 0f01 	tst.w	r5, #1
 8004470:	d002      	beq.n	8004478 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004472:	f016 0f01 	tst.w	r6, #1
 8004476:	d12d      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004478:	f015 0f80 	tst.w	r5, #128	@ 0x80
 800447c:	d002      	beq.n	8004484 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800447e:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8004482:	d12f      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004484:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8004488:	d002      	beq.n	8004490 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800448a:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800448e:	d131      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004490:	f015 0f20 	tst.w	r5, #32
 8004494:	d002      	beq.n	800449c <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004496:	f016 0f20 	tst.w	r6, #32
 800449a:	d133      	bne.n	8004504 <HAL_TIM_IRQHandler+0x14e>
}
 800449c:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	f7ff ff86 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a2:	4620      	mov	r0, r4
 80044a4:	f7ff ff85 	bl	80043b2 <HAL_TIM_PWM_PulseFinishedCallback>
 80044a8:	e79c      	b.n	80043e4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044aa:	4620      	mov	r0, r4
 80044ac:	f7ff ff7f 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b0:	4620      	mov	r0, r4
 80044b2:	f7ff ff7e 	bl	80043b2 <HAL_TIM_PWM_PulseFinishedCallback>
 80044b6:	e7ab      	b.n	8004410 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b8:	4620      	mov	r0, r4
 80044ba:	f7ff ff78 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044be:	4620      	mov	r0, r4
 80044c0:	f7ff ff77 	bl	80043b2 <HAL_TIM_PWM_PulseFinishedCallback>
 80044c4:	e7ba      	b.n	800443c <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c6:	4620      	mov	r0, r4
 80044c8:	f7ff ff71 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044cc:	4620      	mov	r0, r4
 80044ce:	f7ff ff70 	bl	80043b2 <HAL_TIM_PWM_PulseFinishedCallback>
 80044d2:	e7c9      	b.n	8004468 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	f06f 0201 	mvn.w	r2, #1
 80044da:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80044dc:	4620      	mov	r0, r4
 80044de:	f7ff ff65 	bl	80043ac <HAL_TIM_PeriodElapsedCallback>
 80044e2:	e7c9      	b.n	8004478 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80044ec:	4620      	mov	r0, r4
 80044ee:	f000 fb14 	bl	8004b1a <HAL_TIMEx_BreakCallback>
 80044f2:	e7c7      	b.n	8004484 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80044fc:	4620      	mov	r0, r4
 80044fe:	f7ff ff59 	bl	80043b4 <HAL_TIM_TriggerCallback>
 8004502:	e7c5      	b.n	8004490 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	f06f 0220 	mvn.w	r2, #32
 800450a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800450c:	4620      	mov	r0, r4
 800450e:	f000 fb03 	bl	8004b18 <HAL_TIMEx_CommutCallback>
}
 8004512:	e7c3      	b.n	800449c <HAL_TIM_IRQHandler+0xe6>

08004514 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004514:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004516:	4a34      	ldr	r2, [pc, #208]	@ (80045e8 <TIM_Base_SetConfig+0xd4>)
 8004518:	4290      	cmp	r0, r2
 800451a:	d012      	beq.n	8004542 <TIM_Base_SetConfig+0x2e>
 800451c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004520:	d00f      	beq.n	8004542 <TIM_Base_SetConfig+0x2e>
 8004522:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004526:	4290      	cmp	r0, r2
 8004528:	d00b      	beq.n	8004542 <TIM_Base_SetConfig+0x2e>
 800452a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800452e:	4290      	cmp	r0, r2
 8004530:	d007      	beq.n	8004542 <TIM_Base_SetConfig+0x2e>
 8004532:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004536:	4290      	cmp	r0, r2
 8004538:	d003      	beq.n	8004542 <TIM_Base_SetConfig+0x2e>
 800453a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800453e:	4290      	cmp	r0, r2
 8004540:	d103      	bne.n	800454a <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004546:	684a      	ldr	r2, [r1, #4]
 8004548:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800454a:	4a27      	ldr	r2, [pc, #156]	@ (80045e8 <TIM_Base_SetConfig+0xd4>)
 800454c:	4290      	cmp	r0, r2
 800454e:	d02a      	beq.n	80045a6 <TIM_Base_SetConfig+0x92>
 8004550:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004554:	d027      	beq.n	80045a6 <TIM_Base_SetConfig+0x92>
 8004556:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800455a:	4290      	cmp	r0, r2
 800455c:	d023      	beq.n	80045a6 <TIM_Base_SetConfig+0x92>
 800455e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004562:	4290      	cmp	r0, r2
 8004564:	d01f      	beq.n	80045a6 <TIM_Base_SetConfig+0x92>
 8004566:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800456a:	4290      	cmp	r0, r2
 800456c:	d01b      	beq.n	80045a6 <TIM_Base_SetConfig+0x92>
 800456e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8004572:	4290      	cmp	r0, r2
 8004574:	d017      	beq.n	80045a6 <TIM_Base_SetConfig+0x92>
 8004576:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800457a:	4290      	cmp	r0, r2
 800457c:	d013      	beq.n	80045a6 <TIM_Base_SetConfig+0x92>
 800457e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004582:	4290      	cmp	r0, r2
 8004584:	d00f      	beq.n	80045a6 <TIM_Base_SetConfig+0x92>
 8004586:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800458a:	4290      	cmp	r0, r2
 800458c:	d00b      	beq.n	80045a6 <TIM_Base_SetConfig+0x92>
 800458e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8004592:	4290      	cmp	r0, r2
 8004594:	d007      	beq.n	80045a6 <TIM_Base_SetConfig+0x92>
 8004596:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800459a:	4290      	cmp	r0, r2
 800459c:	d003      	beq.n	80045a6 <TIM_Base_SetConfig+0x92>
 800459e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80045a2:	4290      	cmp	r0, r2
 80045a4:	d103      	bne.n	80045ae <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80045a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045aa:	68ca      	ldr	r2, [r1, #12]
 80045ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045b2:	694a      	ldr	r2, [r1, #20]
 80045b4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80045b6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b8:	688b      	ldr	r3, [r1, #8]
 80045ba:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80045bc:	680b      	ldr	r3, [r1, #0]
 80045be:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c0:	4b09      	ldr	r3, [pc, #36]	@ (80045e8 <TIM_Base_SetConfig+0xd4>)
 80045c2:	4298      	cmp	r0, r3
 80045c4:	d003      	beq.n	80045ce <TIM_Base_SetConfig+0xba>
 80045c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045ca:	4298      	cmp	r0, r3
 80045cc:	d101      	bne.n	80045d2 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80045ce:	690b      	ldr	r3, [r1, #16]
 80045d0:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80045d2:	2301      	movs	r3, #1
 80045d4:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045d6:	6903      	ldr	r3, [r0, #16]
 80045d8:	f013 0f01 	tst.w	r3, #1
 80045dc:	d003      	beq.n	80045e6 <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045de:	6903      	ldr	r3, [r0, #16]
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	6103      	str	r3, [r0, #16]
}
 80045e6:	4770      	bx	lr
 80045e8:	40010000 	.word	0x40010000

080045ec <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80045ec:	b340      	cbz	r0, 8004640 <HAL_TIM_Base_Init+0x54>
{
 80045ee:	b510      	push	{r4, lr}
 80045f0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80045f2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80045f6:	b1f3      	cbz	r3, 8004636 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	2302      	movs	r3, #2
 80045fa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045fe:	4621      	mov	r1, r4
 8004600:	f851 0b04 	ldr.w	r0, [r1], #4
 8004604:	f7ff ff86 	bl	8004514 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004608:	2301      	movs	r3, #1
 800460a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800460e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004612:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004616:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800461a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004622:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004626:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800462a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800462e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004632:	2000      	movs	r0, #0
}
 8004634:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004636:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800463a:	f000 fbc5 	bl	8004dc8 <HAL_TIM_Base_MspInit>
 800463e:	e7db      	b.n	80045f8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004640:	2001      	movs	r0, #1
}
 8004642:	4770      	bx	lr

08004644 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004644:	b340      	cbz	r0, 8004698 <HAL_TIM_PWM_Init+0x54>
{
 8004646:	b510      	push	{r4, lr}
 8004648:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800464a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800464e:	b1f3      	cbz	r3, 800468e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	2302      	movs	r3, #2
 8004652:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004656:	4621      	mov	r1, r4
 8004658:	f851 0b04 	ldr.w	r0, [r1], #4
 800465c:	f7ff ff5a 	bl	8004514 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004660:	2301      	movs	r3, #1
 8004662:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004666:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800466a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800466e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004672:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004676:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800467a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800467e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004682:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004686:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800468a:	2000      	movs	r0, #0
}
 800468c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800468e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004692:	f7ff fe8a 	bl	80043aa <HAL_TIM_PWM_MspInit>
 8004696:	e7db      	b.n	8004650 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004698:	2001      	movs	r0, #1
}
 800469a:	4770      	bx	lr

0800469c <TIM_OC2_SetConfig>:
{
 800469c:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800469e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a0:	6a02      	ldr	r2, [r0, #32]
 80046a2:	f022 0210 	bic.w	r2, r2, #16
 80046a6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80046a8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80046aa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046ac:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b0:	680d      	ldr	r5, [r1, #0]
 80046b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80046b6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046ba:	688d      	ldr	r5, [r1, #8]
 80046bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046c0:	4d11      	ldr	r5, [pc, #68]	@ (8004708 <TIM_OC2_SetConfig+0x6c>)
 80046c2:	42a8      	cmp	r0, r5
 80046c4:	d003      	beq.n	80046ce <TIM_OC2_SetConfig+0x32>
 80046c6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80046ca:	42a8      	cmp	r0, r5
 80046cc:	d106      	bne.n	80046dc <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 80046ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046d2:	68cd      	ldr	r5, [r1, #12]
 80046d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80046d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046dc:	4d0a      	ldr	r5, [pc, #40]	@ (8004708 <TIM_OC2_SetConfig+0x6c>)
 80046de:	42a8      	cmp	r0, r5
 80046e0:	d003      	beq.n	80046ea <TIM_OC2_SetConfig+0x4e>
 80046e2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80046e6:	42a8      	cmp	r0, r5
 80046e8:	d107      	bne.n	80046fa <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046ea:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046ee:	694d      	ldr	r5, [r1, #20]
 80046f0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046f4:	698d      	ldr	r5, [r1, #24]
 80046f6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80046fa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80046fc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80046fe:	684a      	ldr	r2, [r1, #4]
 8004700:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004702:	6203      	str	r3, [r0, #32]
}
 8004704:	bc30      	pop	{r4, r5}
 8004706:	4770      	bx	lr
 8004708:	40010000 	.word	0x40010000

0800470c <HAL_TIM_PWM_ConfigChannel>:
{
 800470c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800470e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004712:	2b01      	cmp	r3, #1
 8004714:	d066      	beq.n	80047e4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8004716:	4604      	mov	r4, r0
 8004718:	460d      	mov	r5, r1
 800471a:	2301      	movs	r3, #1
 800471c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8004720:	2a0c      	cmp	r2, #12
 8004722:	d85a      	bhi.n	80047da <HAL_TIM_PWM_ConfigChannel+0xce>
 8004724:	e8df f002 	tbb	[pc, r2]
 8004728:	59595907 	.word	0x59595907
 800472c:	5959591b 	.word	0x5959591b
 8004730:	59595930 	.word	0x59595930
 8004734:	44          	.byte	0x44
 8004735:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004736:	6800      	ldr	r0, [r0, #0]
 8004738:	f7ff fd70 	bl	800421c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	6993      	ldr	r3, [r2, #24]
 8004740:	f043 0308 	orr.w	r3, r3, #8
 8004744:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004746:	6822      	ldr	r2, [r4, #0]
 8004748:	6993      	ldr	r3, [r2, #24]
 800474a:	f023 0304 	bic.w	r3, r3, #4
 800474e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004750:	6822      	ldr	r2, [r4, #0]
 8004752:	6993      	ldr	r3, [r2, #24]
 8004754:	6929      	ldr	r1, [r5, #16]
 8004756:	430b      	orrs	r3, r1
 8004758:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800475a:	2000      	movs	r0, #0
      break;
 800475c:	e03e      	b.n	80047dc <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800475e:	6800      	ldr	r0, [r0, #0]
 8004760:	f7ff ff9c 	bl	800469c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004764:	6822      	ldr	r2, [r4, #0]
 8004766:	6993      	ldr	r3, [r2, #24]
 8004768:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800476c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800476e:	6822      	ldr	r2, [r4, #0]
 8004770:	6993      	ldr	r3, [r2, #24]
 8004772:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004776:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004778:	6822      	ldr	r2, [r4, #0]
 800477a:	6993      	ldr	r3, [r2, #24]
 800477c:	6929      	ldr	r1, [r5, #16]
 800477e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004782:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004784:	2000      	movs	r0, #0
      break;
 8004786:	e029      	b.n	80047dc <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004788:	6800      	ldr	r0, [r0, #0]
 800478a:	f7ff fd7f 	bl	800428c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	69d3      	ldr	r3, [r2, #28]
 8004792:	f043 0308 	orr.w	r3, r3, #8
 8004796:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004798:	6822      	ldr	r2, [r4, #0]
 800479a:	69d3      	ldr	r3, [r2, #28]
 800479c:	f023 0304 	bic.w	r3, r3, #4
 80047a0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047a2:	6822      	ldr	r2, [r4, #0]
 80047a4:	69d3      	ldr	r3, [r2, #28]
 80047a6:	6929      	ldr	r1, [r5, #16]
 80047a8:	430b      	orrs	r3, r1
 80047aa:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80047ac:	2000      	movs	r0, #0
      break;
 80047ae:	e015      	b.n	80047dc <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047b0:	6800      	ldr	r0, [r0, #0]
 80047b2:	f7ff fda3 	bl	80042fc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	69d3      	ldr	r3, [r2, #28]
 80047ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80047be:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047c0:	6822      	ldr	r2, [r4, #0]
 80047c2:	69d3      	ldr	r3, [r2, #28]
 80047c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047c8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ca:	6822      	ldr	r2, [r4, #0]
 80047cc:	69d3      	ldr	r3, [r2, #28]
 80047ce:	6929      	ldr	r1, [r5, #16]
 80047d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80047d4:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80047d6:	2000      	movs	r0, #0
      break;
 80047d8:	e000      	b.n	80047dc <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80047da:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80047dc:	2300      	movs	r3, #0
 80047de:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80047e4:	2002      	movs	r0, #2
 80047e6:	e7fc      	b.n	80047e2 <HAL_TIM_PWM_ConfigChannel+0xd6>

080047e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047e8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047ea:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ec:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047f0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80047f4:	430a      	orrs	r2, r1
 80047f6:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047fa:	6082      	str	r2, [r0, #8]
}
 80047fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004800:	4770      	bx	lr

08004802 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004802:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004806:	2b01      	cmp	r3, #1
 8004808:	d078      	beq.n	80048fc <HAL_TIM_ConfigClockSource+0xfa>
{
 800480a:	b510      	push	{r4, lr}
 800480c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800480e:	2301      	movs	r3, #1
 8004810:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	2302      	movs	r3, #2
 8004816:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800481a:	6802      	ldr	r2, [r0, #0]
 800481c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800481e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004822:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004826:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004828:	680b      	ldr	r3, [r1, #0]
 800482a:	2b60      	cmp	r3, #96	@ 0x60
 800482c:	d04c      	beq.n	80048c8 <HAL_TIM_ConfigClockSource+0xc6>
 800482e:	d823      	bhi.n	8004878 <HAL_TIM_ConfigClockSource+0x76>
 8004830:	2b40      	cmp	r3, #64	@ 0x40
 8004832:	d054      	beq.n	80048de <HAL_TIM_ConfigClockSource+0xdc>
 8004834:	d811      	bhi.n	800485a <HAL_TIM_ConfigClockSource+0x58>
 8004836:	2b20      	cmp	r3, #32
 8004838:	d003      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x40>
 800483a:	d80a      	bhi.n	8004852 <HAL_TIM_ConfigClockSource+0x50>
 800483c:	b10b      	cbz	r3, 8004842 <HAL_TIM_ConfigClockSource+0x40>
 800483e:	2b10      	cmp	r3, #16
 8004840:	d105      	bne.n	800484e <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004842:	4619      	mov	r1, r3
 8004844:	6820      	ldr	r0, [r4, #0]
 8004846:	f7ff fda8 	bl	800439a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800484a:	2000      	movs	r0, #0
      break;
 800484c:	e028      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800484e:	2001      	movs	r0, #1
 8004850:	e026      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8004852:	2b30      	cmp	r3, #48	@ 0x30
 8004854:	d0f5      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8004856:	2001      	movs	r0, #1
 8004858:	e022      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800485a:	2b50      	cmp	r3, #80	@ 0x50
 800485c:	d10a      	bne.n	8004874 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800485e:	68ca      	ldr	r2, [r1, #12]
 8004860:	6849      	ldr	r1, [r1, #4]
 8004862:	6800      	ldr	r0, [r0, #0]
 8004864:	f7ff fd72 	bl	800434c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004868:	2150      	movs	r1, #80	@ 0x50
 800486a:	6820      	ldr	r0, [r4, #0]
 800486c:	f7ff fd95 	bl	800439a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004870:	2000      	movs	r0, #0
      break;
 8004872:	e015      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8004874:	2001      	movs	r0, #1
 8004876:	e013      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8004878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800487c:	d03a      	beq.n	80048f4 <HAL_TIM_ConfigClockSource+0xf2>
 800487e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004882:	d014      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0xac>
 8004884:	2b70      	cmp	r3, #112	@ 0x70
 8004886:	d137      	bne.n	80048f8 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8004888:	68cb      	ldr	r3, [r1, #12]
 800488a:	684a      	ldr	r2, [r1, #4]
 800488c:	6889      	ldr	r1, [r1, #8]
 800488e:	6800      	ldr	r0, [r0, #0]
 8004890:	f7ff ffaa 	bl	80047e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004894:	6822      	ldr	r2, [r4, #0]
 8004896:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004898:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800489c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800489e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80048a6:	2300      	movs	r3, #0
 80048a8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80048ac:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80048ae:	68cb      	ldr	r3, [r1, #12]
 80048b0:	684a      	ldr	r2, [r1, #4]
 80048b2:	6889      	ldr	r1, [r1, #8]
 80048b4:	6800      	ldr	r0, [r0, #0]
 80048b6:	f7ff ff97 	bl	80047e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048ba:	6822      	ldr	r2, [r4, #0]
 80048bc:	6893      	ldr	r3, [r2, #8]
 80048be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048c2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80048c4:	2000      	movs	r0, #0
      break;
 80048c6:	e7eb      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048c8:	68ca      	ldr	r2, [r1, #12]
 80048ca:	6849      	ldr	r1, [r1, #4]
 80048cc:	6800      	ldr	r0, [r0, #0]
 80048ce:	f7ff fd50 	bl	8004372 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048d2:	2160      	movs	r1, #96	@ 0x60
 80048d4:	6820      	ldr	r0, [r4, #0]
 80048d6:	f7ff fd60 	bl	800439a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80048da:	2000      	movs	r0, #0
      break;
 80048dc:	e7e0      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048de:	68ca      	ldr	r2, [r1, #12]
 80048e0:	6849      	ldr	r1, [r1, #4]
 80048e2:	6800      	ldr	r0, [r0, #0]
 80048e4:	f7ff fd32 	bl	800434c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048e8:	2140      	movs	r1, #64	@ 0x40
 80048ea:	6820      	ldr	r0, [r4, #0]
 80048ec:	f7ff fd55 	bl	800439a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80048f0:	2000      	movs	r0, #0
      break;
 80048f2:	e7d5      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80048f4:	2000      	movs	r0, #0
 80048f6:	e7d3      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80048f8:	2001      	movs	r0, #1
 80048fa:	e7d1      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 80048fc:	2002      	movs	r0, #2
}
 80048fe:	4770      	bx	lr

08004900 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004900:	f001 011f 	and.w	r1, r1, #31
 8004904:	f04f 0c01 	mov.w	ip, #1
 8004908:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800490c:	6a03      	ldr	r3, [r0, #32]
 800490e:	ea23 030c 	bic.w	r3, r3, ip
 8004912:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004914:	6a03      	ldr	r3, [r0, #32]
 8004916:	408a      	lsls	r2, r1
 8004918:	4313      	orrs	r3, r2
 800491a:	6203      	str	r3, [r0, #32]
}
 800491c:	4770      	bx	lr
	...

08004920 <HAL_TIM_PWM_Start_IT>:
{
 8004920:	b510      	push	{r4, lr}
 8004922:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004924:	4608      	mov	r0, r1
 8004926:	2900      	cmp	r1, #0
 8004928:	d147      	bne.n	80049ba <HAL_TIM_PWM_Start_IT+0x9a>
 800492a:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800492e:	3b01      	subs	r3, #1
 8004930:	bf18      	it	ne
 8004932:	2301      	movne	r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	f040 80a0 	bne.w	8004a7a <HAL_TIM_PWM_Start_IT+0x15a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800493a:	2800      	cmp	r0, #0
 800493c:	d153      	bne.n	80049e6 <HAL_TIM_PWM_Start_IT+0xc6>
 800493e:	2302      	movs	r3, #2
 8004940:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004944:	6822      	ldr	r2, [r4, #0]
 8004946:	68d3      	ldr	r3, [r2, #12]
 8004948:	f043 0302 	orr.w	r3, r3, #2
 800494c:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800494e:	2201      	movs	r2, #1
 8004950:	4601      	mov	r1, r0
 8004952:	6820      	ldr	r0, [r4, #0]
 8004954:	f7ff ffd4 	bl	8004900 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	4a4b      	ldr	r2, [pc, #300]	@ (8004a88 <HAL_TIM_PWM_Start_IT+0x168>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <HAL_TIM_PWM_Start_IT+0x48>
 8004960:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004964:	4293      	cmp	r3, r2
 8004966:	d103      	bne.n	8004970 <HAL_TIM_PWM_Start_IT+0x50>
      __HAL_TIM_MOE_ENABLE(htim);
 8004968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800496a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800496e:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	4a45      	ldr	r2, [pc, #276]	@ (8004a88 <HAL_TIM_PWM_Start_IT+0x168>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d075      	beq.n	8004a64 <HAL_TIM_PWM_Start_IT+0x144>
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800497c:	d072      	beq.n	8004a64 <HAL_TIM_PWM_Start_IT+0x144>
 800497e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004982:	4293      	cmp	r3, r2
 8004984:	d06e      	beq.n	8004a64 <HAL_TIM_PWM_Start_IT+0x144>
 8004986:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800498a:	4293      	cmp	r3, r2
 800498c:	d06a      	beq.n	8004a64 <HAL_TIM_PWM_Start_IT+0x144>
 800498e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004992:	4293      	cmp	r3, r2
 8004994:	d066      	beq.n	8004a64 <HAL_TIM_PWM_Start_IT+0x144>
 8004996:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800499a:	4293      	cmp	r3, r2
 800499c:	d062      	beq.n	8004a64 <HAL_TIM_PWM_Start_IT+0x144>
 800499e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d05e      	beq.n	8004a64 <HAL_TIM_PWM_Start_IT+0x144>
 80049a6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d05a      	beq.n	8004a64 <HAL_TIM_PWM_Start_IT+0x144>
      __HAL_TIM_ENABLE(htim);
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	f042 0201 	orr.w	r2, r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	2000      	movs	r0, #0
 80049b8:	e05e      	b.n	8004a78 <HAL_TIM_PWM_Start_IT+0x158>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ba:	2904      	cmp	r1, #4
 80049bc:	d007      	beq.n	80049ce <HAL_TIM_PWM_Start_IT+0xae>
 80049be:	2908      	cmp	r1, #8
 80049c0:	d00b      	beq.n	80049da <HAL_TIM_PWM_Start_IT+0xba>
 80049c2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80049c6:	3b01      	subs	r3, #1
 80049c8:	bf18      	it	ne
 80049ca:	2301      	movne	r3, #1
 80049cc:	e7b2      	b.n	8004934 <HAL_TIM_PWM_Start_IT+0x14>
 80049ce:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80049d2:	3b01      	subs	r3, #1
 80049d4:	bf18      	it	ne
 80049d6:	2301      	movne	r3, #1
 80049d8:	e7ac      	b.n	8004934 <HAL_TIM_PWM_Start_IT+0x14>
 80049da:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80049de:	3b01      	subs	r3, #1
 80049e0:	bf18      	it	ne
 80049e2:	2301      	movne	r3, #1
 80049e4:	e7a6      	b.n	8004934 <HAL_TIM_PWM_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e6:	2804      	cmp	r0, #4
 80049e8:	d024      	beq.n	8004a34 <HAL_TIM_PWM_Start_IT+0x114>
 80049ea:	2808      	cmp	r0, #8
 80049ec:	d02b      	beq.n	8004a46 <HAL_TIM_PWM_Start_IT+0x126>
 80049ee:	2302      	movs	r3, #2
 80049f0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  switch (Channel)
 80049f4:	280c      	cmp	r0, #12
 80049f6:	d842      	bhi.n	8004a7e <HAL_TIM_PWM_Start_IT+0x15e>
 80049f8:	a301      	add	r3, pc, #4	@ (adr r3, 8004a00 <HAL_TIM_PWM_Start_IT+0xe0>)
 80049fa:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004945 	.word	0x08004945
 8004a04:	08004a7f 	.word	0x08004a7f
 8004a08:	08004a7f 	.word	0x08004a7f
 8004a0c:	08004a7f 	.word	0x08004a7f
 8004a10:	08004a3b 	.word	0x08004a3b
 8004a14:	08004a7f 	.word	0x08004a7f
 8004a18:	08004a7f 	.word	0x08004a7f
 8004a1c:	08004a7f 	.word	0x08004a7f
 8004a20:	08004a4d 	.word	0x08004a4d
 8004a24:	08004a7f 	.word	0x08004a7f
 8004a28:	08004a7f 	.word	0x08004a7f
 8004a2c:	08004a7f 	.word	0x08004a7f
 8004a30:	08004a59 	.word	0x08004a59
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a34:	2302      	movs	r3, #2
 8004a36:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a3a:	6822      	ldr	r2, [r4, #0]
 8004a3c:	68d3      	ldr	r3, [r2, #12]
 8004a3e:	f043 0304 	orr.w	r3, r3, #4
 8004a42:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004a44:	e783      	b.n	800494e <HAL_TIM_PWM_Start_IT+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a46:	2302      	movs	r3, #2
 8004a48:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a4c:	6822      	ldr	r2, [r4, #0]
 8004a4e:	68d3      	ldr	r3, [r2, #12]
 8004a50:	f043 0308 	orr.w	r3, r3, #8
 8004a54:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004a56:	e77a      	b.n	800494e <HAL_TIM_PWM_Start_IT+0x2e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a58:	6822      	ldr	r2, [r4, #0]
 8004a5a:	68d3      	ldr	r3, [r2, #12]
 8004a5c:	f043 0310 	orr.w	r3, r3, #16
 8004a60:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004a62:	e774      	b.n	800494e <HAL_TIM_PWM_Start_IT+0x2e>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6a:	2a06      	cmp	r2, #6
 8004a6c:	d009      	beq.n	8004a82 <HAL_TIM_PWM_Start_IT+0x162>
        __HAL_TIM_ENABLE(htim);
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	f042 0201 	orr.w	r2, r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	2000      	movs	r0, #0
}
 8004a78:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	e7fc      	b.n	8004a78 <HAL_TIM_PWM_Start_IT+0x158>
  switch (Channel)
 8004a7e:	2001      	movs	r0, #1
 8004a80:	e7fa      	b.n	8004a78 <HAL_TIM_PWM_Start_IT+0x158>
 8004a82:	2000      	movs	r0, #0
 8004a84:	e7f8      	b.n	8004a78 <HAL_TIM_PWM_Start_IT+0x158>
 8004a86:	bf00      	nop
 8004a88:	40010000 	.word	0x40010000

08004a8c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a8c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004a90:	2a01      	cmp	r2, #1
 8004a92:	d03d      	beq.n	8004b10 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8004a94:	b410      	push	{r4}
 8004a96:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aa4:	6802      	ldr	r2, [r0, #0]
 8004aa6:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa8:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aaa:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aae:	6808      	ldr	r0, [r1, #0]
 8004ab0:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ab4:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	4816      	ldr	r0, [pc, #88]	@ (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8004aba:	4282      	cmp	r2, r0
 8004abc:	d01a      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004abe:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004ac2:	d017      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004ac4:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8004ac8:	4282      	cmp	r2, r0
 8004aca:	d013      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004acc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004ad0:	4282      	cmp	r2, r0
 8004ad2:	d00f      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004ad4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004ad8:	4282      	cmp	r2, r0
 8004ada:	d00b      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004adc:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8004ae0:	4282      	cmp	r2, r0
 8004ae2:	d007      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004ae4:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8004ae8:	4282      	cmp	r2, r0
 8004aea:	d003      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004aec:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8004af0:	4282      	cmp	r2, r0
 8004af2:	d104      	bne.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004af4:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004af8:	6849      	ldr	r1, [r1, #4]
 8004afa:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004afc:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b04:	2000      	movs	r0, #0
 8004b06:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8004b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b0e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004b10:	2002      	movs	r0, #2
}
 8004b12:	4770      	bx	lr
 8004b14:	40010000 	.word	0x40010000

08004b18 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b18:	4770      	bx	lr

08004b1a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b1a:	4770      	bx	lr

08004b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b20:	6802      	ldr	r2, [r0, #0]
 8004b22:	6913      	ldr	r3, [r2, #16]
 8004b24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004b28:	68c1      	ldr	r1, [r0, #12]
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b2e:	6883      	ldr	r3, [r0, #8]
 8004b30:	6902      	ldr	r2, [r0, #16]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	6943      	ldr	r3, [r0, #20]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	69c3      	ldr	r3, [r0, #28]
 8004b3a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004b3c:	6801      	ldr	r1, [r0, #0]
 8004b3e:	68cb      	ldr	r3, [r1, #12]
 8004b40:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004b44:	f023 030c 	bic.w	r3, r3, #12
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b4c:	6802      	ldr	r2, [r0, #0]
 8004b4e:	6953      	ldr	r3, [r2, #20]
 8004b50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b54:	6981      	ldr	r1, [r0, #24]
 8004b56:	430b      	orrs	r3, r1
 8004b58:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b5a:	6803      	ldr	r3, [r0, #0]
 8004b5c:	4a31      	ldr	r2, [pc, #196]	@ (8004c24 <UART_SetConfig+0x108>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d006      	beq.n	8004b70 <UART_SetConfig+0x54>
 8004b62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d002      	beq.n	8004b70 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b6a:	f7fe fc35 	bl	80033d8 <HAL_RCC_GetPCLK1Freq>
 8004b6e:	e001      	b.n	8004b74 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b70:	f7fe fc42 	bl	80033f8 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b74:	69e3      	ldr	r3, [r4, #28]
 8004b76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b7a:	d029      	beq.n	8004bd0 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	1803      	adds	r3, r0, r0
 8004b80:	4149      	adcs	r1, r1
 8004b82:	181b      	adds	r3, r3, r0
 8004b84:	f141 0100 	adc.w	r1, r1, #0
 8004b88:	00c9      	lsls	r1, r1, #3
 8004b8a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	1818      	adds	r0, r3, r0
 8004b92:	6863      	ldr	r3, [r4, #4]
 8004b94:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8004b98:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8004b9c:	f141 0100 	adc.w	r1, r1, #0
 8004ba0:	f7fb ffce 	bl	8000b40 <__aeabi_uldivmod>
 8004ba4:	4a20      	ldr	r2, [pc, #128]	@ (8004c28 <UART_SetConfig+0x10c>)
 8004ba6:	fba2 3100 	umull	r3, r1, r2, r0
 8004baa:	0949      	lsrs	r1, r1, #5
 8004bac:	2364      	movs	r3, #100	@ 0x64
 8004bae:	fb03 0311 	mls	r3, r3, r1, r0
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	3332      	adds	r3, #50	@ 0x32
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004bc0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	6821      	ldr	r1, [r4, #0]
 8004bca:	4413      	add	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
  }
}
 8004bce:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	1802      	adds	r2, r0, r0
 8004bd4:	eb43 0103 	adc.w	r1, r3, r3
 8004bd8:	1812      	adds	r2, r2, r0
 8004bda:	f141 0100 	adc.w	r1, r1, #0
 8004bde:	00c9      	lsls	r1, r1, #3
 8004be0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004be4:	00d2      	lsls	r2, r2, #3
 8004be6:	1810      	adds	r0, r2, r0
 8004be8:	f141 0100 	adc.w	r1, r1, #0
 8004bec:	6862      	ldr	r2, [r4, #4]
 8004bee:	1892      	adds	r2, r2, r2
 8004bf0:	415b      	adcs	r3, r3
 8004bf2:	f7fb ffa5 	bl	8000b40 <__aeabi_uldivmod>
 8004bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8004c28 <UART_SetConfig+0x10c>)
 8004bf8:	fba2 3100 	umull	r3, r1, r2, r0
 8004bfc:	0949      	lsrs	r1, r1, #5
 8004bfe:	2364      	movs	r3, #100	@ 0x64
 8004c00:	fb03 0311 	mls	r3, r3, r1, r0
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	3332      	adds	r3, #50	@ 0x32
 8004c08:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0c:	095b      	lsrs	r3, r3, #5
 8004c0e:	005a      	lsls	r2, r3, #1
 8004c10:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8004c14:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	6821      	ldr	r1, [r4, #0]
 8004c1e:	4413      	add	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]
 8004c22:	e7d4      	b.n	8004bce <UART_SetConfig+0xb2>
 8004c24:	40011000 	.word	0x40011000
 8004c28:	51eb851f 	.word	0x51eb851f

08004c2c <HAL_UART_Init>:
  if (huart == NULL)
 8004c2c:	b360      	cbz	r0, 8004c88 <HAL_UART_Init+0x5c>
{
 8004c2e:	b510      	push	{r4, lr}
 8004c30:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004c32:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004c36:	b313      	cbz	r3, 8004c7e <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8004c38:	2324      	movs	r3, #36	@ 0x24
 8004c3a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004c3e:	6822      	ldr	r2, [r4, #0]
 8004c40:	68d3      	ldr	r3, [r2, #12]
 8004c42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c46:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7ff ff67 	bl	8004b1c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c4e:	6822      	ldr	r2, [r4, #0]
 8004c50:	6913      	ldr	r3, [r2, #16]
 8004c52:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004c56:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c58:	6822      	ldr	r2, [r4, #0]
 8004c5a:	6953      	ldr	r3, [r2, #20]
 8004c5c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004c60:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004c62:	6822      	ldr	r2, [r4, #0]
 8004c64:	68d3      	ldr	r3, [r2, #12]
 8004c66:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004c6a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c70:	2320      	movs	r3, #32
 8004c72:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c76:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c7a:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004c7c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004c7e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004c82:	f000 f99d 	bl	8004fc0 <HAL_UART_MspInit>
 8004c86:	e7d7      	b.n	8004c38 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004c88:	2001      	movs	r0, #1
}
 8004c8a:	4770      	bx	lr

08004c8c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004c8c:	e7fe      	b.n	8004c8c <NMI_Handler>

08004c8e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c8e:	e7fe      	b.n	8004c8e <HardFault_Handler>

08004c90 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c90:	e7fe      	b.n	8004c90 <MemManage_Handler>

08004c92 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c92:	e7fe      	b.n	8004c92 <BusFault_Handler>

08004c94 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c94:	e7fe      	b.n	8004c94 <UsageFault_Handler>

08004c96 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c96:	4770      	bx	lr

08004c98 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c98:	4770      	bx	lr

08004c9a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c9a:	4770      	bx	lr

08004c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c9e:	f7fd ffb7 	bl	8002c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ca2:	bd08      	pop	{r3, pc}

08004ca4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004ca4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004ca6:	4802      	ldr	r0, [pc, #8]	@ (8004cb0 <TIM8_BRK_TIM12_IRQHandler+0xc>)
 8004ca8:	f7ff fb85 	bl	80043b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004cac:	bd08      	pop	{r3, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000438 	.word	0x20000438

08004cb4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004cb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004cb6:	4802      	ldr	r0, [pc, #8]	@ (8004cc0 <TIM8_UP_TIM13_IRQHandler+0xc>)
 8004cb8:	f7ff fb7d 	bl	80043b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004cbc:	bd08      	pop	{r3, pc}
 8004cbe:	bf00      	nop
 8004cc0:	200003f0 	.word	0x200003f0

08004cc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004cc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004cc6:	4802      	ldr	r0, [pc, #8]	@ (8004cd0 <TIM6_DAC_IRQHandler+0xc>)
 8004cc8:	f7ff fb75 	bl	80043b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004ccc:	bd08      	pop	{r3, pc}
 8004cce:	bf00      	nop
 8004cd0:	200004c8 	.word	0x200004c8

08004cd4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004cd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004cd6:	4802      	ldr	r0, [pc, #8]	@ (8004ce0 <TIM7_IRQHandler+0xc>)
 8004cd8:	f7ff fb6d 	bl	80043b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004cdc:	bd08      	pop	{r3, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000480 	.word	0x20000480

08004ce4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ce4:	4a03      	ldr	r2, [pc, #12]	@ (8004cf4 <SystemInit+0x10>)
 8004ce6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004cea:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cf2:	4770      	bx	lr
 8004cf4:	e000ed00 	.word	0xe000ed00

08004cf8 <MX_TIM6_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim13;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004cf8:	b500      	push	{lr}
 8004cfa:	b083      	sub	sp, #12

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004d02:	480f      	ldr	r0, [pc, #60]	@ (8004d40 <MX_TIM6_Init+0x48>)
 8004d04:	4a0f      	ldr	r2, [pc, #60]	@ (8004d44 <MX_TIM6_Init+0x4c>)
 8004d06:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 9000-1;
 8004d08:	f242 3227 	movw	r2, #8999	@ 0x2327
 8004d0c:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d0e:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 10000 -1;
 8004d10:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004d14:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d16:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004d18:	f7ff fc68 	bl	80045ec <HAL_TIM_Base_Init>
 8004d1c:	b950      	cbnz	r0, 8004d34 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d22:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004d24:	4669      	mov	r1, sp
 8004d26:	4806      	ldr	r0, [pc, #24]	@ (8004d40 <MX_TIM6_Init+0x48>)
 8004d28:	f7ff feb0 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 8004d2c:	b928      	cbnz	r0, 8004d3a <MX_TIM6_Init+0x42>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004d2e:	b003      	add	sp, #12
 8004d30:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004d34:	f7fd fcb2 	bl	800269c <Error_Handler>
 8004d38:	e7f1      	b.n	8004d1e <MX_TIM6_Init+0x26>
    Error_Handler();
 8004d3a:	f7fd fcaf 	bl	800269c <Error_Handler>
}
 8004d3e:	e7f6      	b.n	8004d2e <MX_TIM6_Init+0x36>
 8004d40:	200004c8 	.word	0x200004c8
 8004d44:	40001000 	.word	0x40001000

08004d48 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004d48:	b500      	push	{lr}
 8004d4a:	b083      	sub	sp, #12

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004d52:	480f      	ldr	r0, [pc, #60]	@ (8004d90 <MX_TIM7_Init+0x48>)
 8004d54:	4a0f      	ldr	r2, [pc, #60]	@ (8004d94 <MX_TIM7_Init+0x4c>)
 8004d56:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 9000-1;
 8004d58:	f242 3227 	movw	r2, #8999	@ 0x2327
 8004d5c:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d5e:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 500 -1;
 8004d60:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8004d64:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d66:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004d68:	f7ff fc40 	bl	80045ec <HAL_TIM_Base_Init>
 8004d6c:	b950      	cbnz	r0, 8004d84 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d72:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004d74:	4669      	mov	r1, sp
 8004d76:	4806      	ldr	r0, [pc, #24]	@ (8004d90 <MX_TIM7_Init+0x48>)
 8004d78:	f7ff fe88 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 8004d7c:	b928      	cbnz	r0, 8004d8a <MX_TIM7_Init+0x42>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004d7e:	b003      	add	sp, #12
 8004d80:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004d84:	f7fd fc8a 	bl	800269c <Error_Handler>
 8004d88:	e7f1      	b.n	8004d6e <MX_TIM7_Init+0x26>
    Error_Handler();
 8004d8a:	f7fd fc87 	bl	800269c <Error_Handler>
}
 8004d8e:	e7f6      	b.n	8004d7e <MX_TIM7_Init+0x36>
 8004d90:	20000480 	.word	0x20000480
 8004d94:	40001400 	.word	0x40001400

08004d98 <MX_TIM13_Init>:
  HAL_TIM_MspPostInit(&htim12);

}
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004d98:	b508      	push	{r3, lr}
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004d9a:	4809      	ldr	r0, [pc, #36]	@ (8004dc0 <MX_TIM13_Init+0x28>)
 8004d9c:	4b09      	ldr	r3, [pc, #36]	@ (8004dc4 <MX_TIM13_Init+0x2c>)
 8004d9e:	6003      	str	r3, [r0, #0]
  htim13.Init.Prescaler = 9000-1;
 8004da0:	f242 3327 	movw	r3, #8999	@ 0x2327
 8004da4:	6043      	str	r3, [r0, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004da6:	2300      	movs	r3, #0
 8004da8:	6083      	str	r3, [r0, #8]
  htim13.Init.Period = 100-1;
 8004daa:	2263      	movs	r2, #99	@ 0x63
 8004dac:	60c2      	str	r2, [r0, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dae:	6103      	str	r3, [r0, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004db0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004db2:	f7ff fc1b 	bl	80045ec <HAL_TIM_Base_Init>
 8004db6:	b900      	cbnz	r0, 8004dba <MX_TIM13_Init+0x22>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004db8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004dba:	f7fd fc6f 	bl	800269c <Error_Handler>
}
 8004dbe:	e7fb      	b.n	8004db8 <MX_TIM13_Init+0x20>
 8004dc0:	200003f0 	.word	0x200003f0
 8004dc4:	40001c00 	.word	0x40001c00

08004dc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004dc8:	b500      	push	{lr}
 8004dca:	b085      	sub	sp, #20

  if(tim_baseHandle->Instance==TIM6)
 8004dcc:	6803      	ldr	r3, [r0, #0]
 8004dce:	4a2f      	ldr	r2, [pc, #188]	@ (8004e8c <HAL_TIM_Base_MspInit+0xc4>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <HAL_TIM_Base_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 8004dd4:	4a2e      	ldr	r2, [pc, #184]	@ (8004e90 <HAL_TIM_Base_MspInit+0xc8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d01c      	beq.n	8004e14 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM12)
 8004dda:	4a2e      	ldr	r2, [pc, #184]	@ (8004e94 <HAL_TIM_Base_MspInit+0xcc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d02d      	beq.n	8004e3c <HAL_TIM_Base_MspInit+0x74>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM13)
 8004de0:	4a2d      	ldr	r2, [pc, #180]	@ (8004e98 <HAL_TIM_Base_MspInit+0xd0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d03e      	beq.n	8004e64 <HAL_TIM_Base_MspInit+0x9c>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8004de6:	b005      	add	sp, #20
 8004de8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004dec:	2100      	movs	r1, #0
 8004dee:	9100      	str	r1, [sp, #0]
 8004df0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e9c <HAL_TIM_Base_MspInit+0xd4>)
 8004df2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004df4:	f042 0210 	orr.w	r2, r2, #16
 8004df8:	641a      	str	r2, [r3, #64]	@ 0x40
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004e04:	460a      	mov	r2, r1
 8004e06:	2036      	movs	r0, #54	@ 0x36
 8004e08:	f7fe f8b0 	bl	8002f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004e0c:	2036      	movs	r0, #54	@ 0x36
 8004e0e:	f7fe f8bd 	bl	8002f8c <HAL_NVIC_EnableIRQ>
 8004e12:	e7e8      	b.n	8004de6 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004e14:	2100      	movs	r1, #0
 8004e16:	9101      	str	r1, [sp, #4]
 8004e18:	4b20      	ldr	r3, [pc, #128]	@ (8004e9c <HAL_TIM_Base_MspInit+0xd4>)
 8004e1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e1c:	f042 0220 	orr.w	r2, r2, #32
 8004e20:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004e2c:	460a      	mov	r2, r1
 8004e2e:	2037      	movs	r0, #55	@ 0x37
 8004e30:	f7fe f89c 	bl	8002f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004e34:	2037      	movs	r0, #55	@ 0x37
 8004e36:	f7fe f8a9 	bl	8002f8c <HAL_NVIC_EnableIRQ>
 8004e3a:	e7d4      	b.n	8004de6 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	9102      	str	r1, [sp, #8]
 8004e40:	4b16      	ldr	r3, [pc, #88]	@ (8004e9c <HAL_TIM_Base_MspInit+0xd4>)
 8004e42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e48:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e50:	9302      	str	r3, [sp, #8]
 8004e52:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004e54:	460a      	mov	r2, r1
 8004e56:	202b      	movs	r0, #43	@ 0x2b
 8004e58:	f7fe f888 	bl	8002f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004e5c:	202b      	movs	r0, #43	@ 0x2b
 8004e5e:	f7fe f895 	bl	8002f8c <HAL_NVIC_EnableIRQ>
 8004e62:	e7c0      	b.n	8004de6 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004e64:	2100      	movs	r1, #0
 8004e66:	9103      	str	r1, [sp, #12]
 8004e68:	4b0c      	ldr	r3, [pc, #48]	@ (8004e9c <HAL_TIM_Base_MspInit+0xd4>)
 8004e6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e70:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e78:	9303      	str	r3, [sp, #12]
 8004e7a:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004e7c:	460a      	mov	r2, r1
 8004e7e:	202c      	movs	r0, #44	@ 0x2c
 8004e80:	f7fe f874 	bl	8002f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004e84:	202c      	movs	r0, #44	@ 0x2c
 8004e86:	f7fe f881 	bl	8002f8c <HAL_NVIC_EnableIRQ>
}
 8004e8a:	e7ac      	b.n	8004de6 <HAL_TIM_Base_MspInit+0x1e>
 8004e8c:	40001000 	.word	0x40001000
 8004e90:	40001400 	.word	0x40001400
 8004e94:	40001800 	.word	0x40001800
 8004e98:	40001c00 	.word	0x40001c00
 8004e9c:	40023800 	.word	0x40023800

08004ea0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004ea0:	b500      	push	{lr}
 8004ea2:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	9301      	str	r3, [sp, #4]
 8004ea8:	9302      	str	r3, [sp, #8]
 8004eaa:	9303      	str	r3, [sp, #12]
 8004eac:	9304      	str	r3, [sp, #16]
 8004eae:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM12)
 8004eb0:	6802      	ldr	r2, [r0, #0]
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef0 <HAL_TIM_MspPostInit+0x50>)
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d002      	beq.n	8004ebe <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004eb8:	b007      	add	sp, #28
 8004eba:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef4 <HAL_TIM_MspPostInit+0x54>)
 8004ec4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ec6:	f042 0202 	orr.w	r2, r2, #2
 8004eca:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = BATTERY_COOLING_FANS_Pin;
 8004ed6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004eda:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004edc:	2302      	movs	r3, #2
 8004ede:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004ee0:	2309      	movs	r3, #9
 8004ee2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BATTERY_COOLING_FANS_GPIO_Port, &GPIO_InitStruct);
 8004ee4:	a901      	add	r1, sp, #4
 8004ee6:	4804      	ldr	r0, [pc, #16]	@ (8004ef8 <HAL_TIM_MspPostInit+0x58>)
 8004ee8:	f7fe f868 	bl	8002fbc <HAL_GPIO_Init>
}
 8004eec:	e7e4      	b.n	8004eb8 <HAL_TIM_MspPostInit+0x18>
 8004eee:	bf00      	nop
 8004ef0:	40001800 	.word	0x40001800
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	40020400 	.word	0x40020400

08004efc <MX_TIM12_Init>:
{
 8004efc:	b500      	push	{lr}
 8004efe:	b08d      	sub	sp, #52	@ 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f00:	2300      	movs	r3, #0
 8004f02:	9308      	str	r3, [sp, #32]
 8004f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f06:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f08:	930b      	str	r3, [sp, #44]	@ 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f0a:	9301      	str	r3, [sp, #4]
 8004f0c:	9302      	str	r3, [sp, #8]
 8004f0e:	9303      	str	r3, [sp, #12]
 8004f10:	9304      	str	r3, [sp, #16]
 8004f12:	9305      	str	r3, [sp, #20]
 8004f14:	9306      	str	r3, [sp, #24]
 8004f16:	9307      	str	r3, [sp, #28]
  htim12.Instance = TIM12;
 8004f18:	481a      	ldr	r0, [pc, #104]	@ (8004f84 <MX_TIM12_Init+0x88>)
 8004f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f88 <MX_TIM12_Init+0x8c>)
 8004f1c:	6002      	str	r2, [r0, #0]
  htim12.Init.Prescaler = 90-1;
 8004f1e:	2259      	movs	r2, #89	@ 0x59
 8004f20:	6042      	str	r2, [r0, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f22:	6083      	str	r3, [r0, #8]
  htim12.Init.Period = 40-1;
 8004f24:	2227      	movs	r2, #39	@ 0x27
 8004f26:	60c2      	str	r2, [r0, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f28:	6103      	str	r3, [r0, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f2a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004f2c:	f7ff fb5e 	bl	80045ec <HAL_TIM_Base_Init>
 8004f30:	b9e0      	cbnz	r0, 8004f6c <MX_TIM12_Init+0x70>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f36:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004f38:	a908      	add	r1, sp, #32
 8004f3a:	4812      	ldr	r0, [pc, #72]	@ (8004f84 <MX_TIM12_Init+0x88>)
 8004f3c:	f7ff fc61 	bl	8004802 <HAL_TIM_ConfigClockSource>
 8004f40:	b9b8      	cbnz	r0, 8004f72 <MX_TIM12_Init+0x76>
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004f42:	4810      	ldr	r0, [pc, #64]	@ (8004f84 <MX_TIM12_Init+0x88>)
 8004f44:	f7ff fb7e 	bl	8004644 <HAL_TIM_PWM_Init>
 8004f48:	b9b0      	cbnz	r0, 8004f78 <MX_TIM12_Init+0x7c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f4a:	2360      	movs	r3, #96	@ 0x60
 8004f4c:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8004f4e:	2200      	movs	r2, #0
 8004f50:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f52:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f54:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f56:	a901      	add	r1, sp, #4
 8004f58:	480a      	ldr	r0, [pc, #40]	@ (8004f84 <MX_TIM12_Init+0x88>)
 8004f5a:	f7ff fbd7 	bl	800470c <HAL_TIM_PWM_ConfigChannel>
 8004f5e:	b970      	cbnz	r0, 8004f7e <MX_TIM12_Init+0x82>
  HAL_TIM_MspPostInit(&htim12);
 8004f60:	4808      	ldr	r0, [pc, #32]	@ (8004f84 <MX_TIM12_Init+0x88>)
 8004f62:	f7ff ff9d 	bl	8004ea0 <HAL_TIM_MspPostInit>
}
 8004f66:	b00d      	add	sp, #52	@ 0x34
 8004f68:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004f6c:	f7fd fb96 	bl	800269c <Error_Handler>
 8004f70:	e7df      	b.n	8004f32 <MX_TIM12_Init+0x36>
    Error_Handler();
 8004f72:	f7fd fb93 	bl	800269c <Error_Handler>
 8004f76:	e7e4      	b.n	8004f42 <MX_TIM12_Init+0x46>
    Error_Handler();
 8004f78:	f7fd fb90 	bl	800269c <Error_Handler>
 8004f7c:	e7e5      	b.n	8004f4a <MX_TIM12_Init+0x4e>
    Error_Handler();
 8004f7e:	f7fd fb8d 	bl	800269c <Error_Handler>
 8004f82:	e7ed      	b.n	8004f60 <MX_TIM12_Init+0x64>
 8004f84:	20000438 	.word	0x20000438
 8004f88:	40001800 	.word	0x40001800

08004f8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004f8c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f8e:	480a      	ldr	r0, [pc, #40]	@ (8004fb8 <MX_USART2_UART_Init+0x2c>)
 8004f90:	4b0a      	ldr	r3, [pc, #40]	@ (8004fbc <MX_USART2_UART_Init+0x30>)
 8004f92:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004f94:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004f98:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f9e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004fa0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004fa2:	220c      	movs	r2, #12
 8004fa4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fa6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fa8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004faa:	f7ff fe3f 	bl	8004c2c <HAL_UART_Init>
 8004fae:	b900      	cbnz	r0, 8004fb2 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004fb0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004fb2:	f7fd fb73 	bl	800269c <Error_Handler>
}
 8004fb6:	e7fb      	b.n	8004fb0 <MX_USART2_UART_Init+0x24>
 8004fb8:	20000510 	.word	0x20000510
 8004fbc:	40004400 	.word	0x40004400

08004fc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004fc0:	b500      	push	{lr}
 8004fc2:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	9303      	str	r3, [sp, #12]
 8004fc8:	9304      	str	r3, [sp, #16]
 8004fca:	9305      	str	r3, [sp, #20]
 8004fcc:	9306      	str	r3, [sp, #24]
 8004fce:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8004fd0:	6802      	ldr	r2, [r0, #0]
 8004fd2:	4b15      	ldr	r3, [pc, #84]	@ (8005028 <HAL_UART_MspInit+0x68>)
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d002      	beq.n	8004fde <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004fd8:	b009      	add	sp, #36	@ 0x24
 8004fda:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8004fde:	2100      	movs	r1, #0
 8004fe0:	9101      	str	r1, [sp, #4]
 8004fe2:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8004fe6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fe8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004fec:	641a      	str	r2, [r3, #64]	@ 0x40
 8004fee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ff0:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8004ff4:	9201      	str	r2, [sp, #4]
 8004ff6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ff8:	9102      	str	r1, [sp, #8]
 8004ffa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ffc:	f042 0201 	orr.w	r2, r2, #1
 8005000:	631a      	str	r2, [r3, #48]	@ 0x30
 8005002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	9302      	str	r3, [sp, #8]
 800500a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800500c:	230c      	movs	r3, #12
 800500e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005010:	2302      	movs	r3, #2
 8005012:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005014:	2303      	movs	r3, #3
 8005016:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005018:	2307      	movs	r3, #7
 800501a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800501c:	a903      	add	r1, sp, #12
 800501e:	4803      	ldr	r0, [pc, #12]	@ (800502c <HAL_UART_MspInit+0x6c>)
 8005020:	f7fd ffcc 	bl	8002fbc <HAL_GPIO_Init>
}
 8005024:	e7d8      	b.n	8004fd8 <HAL_UART_MspInit+0x18>
 8005026:	bf00      	nop
 8005028:	40004400 	.word	0x40004400
 800502c:	40020000 	.word	0x40020000

08005030 <max_search>:
#include "utils.h"

uint16_t max_search(uint16_t* array, uint8_t size){
    if(size==0)
 8005030:	b179      	cbz	r1, 8005052 <max_search+0x22>
uint16_t max_search(uint16_t* array, uint8_t size){
 8005032:	b500      	push	{lr}
 8005034:	4684      	mov	ip, r0
 8005036:	468e      	mov	lr, r1
        return 0;
    uint16_t max = array[0];
 8005038:	8800      	ldrh	r0, [r0, #0]
    for(uint8_t i=1;i<size;i++){
 800503a:	2301      	movs	r3, #1
 800503c:	e001      	b.n	8005042 <max_search+0x12>
 800503e:	3301      	adds	r3, #1
 8005040:	b2db      	uxtb	r3, r3
 8005042:	4573      	cmp	r3, lr
 8005044:	d207      	bcs.n	8005056 <max_search+0x26>
        if(array[i]>max)
 8005046:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
 800504a:	4282      	cmp	r2, r0
 800504c:	d9f7      	bls.n	800503e <max_search+0xe>
            max = array[i];
 800504e:	4610      	mov	r0, r2
 8005050:	e7f5      	b.n	800503e <max_search+0xe>
        return 0;
 8005052:	2000      	movs	r0, #0
    }
    return max;
}
 8005054:	4770      	bx	lr
 8005056:	f85d fb04 	ldr.w	pc, [sp], #4

0800505a <min_search>:

uint16_t min_search(uint16_t* array, uint8_t size){
    if(size==0)
 800505a:	b179      	cbz	r1, 800507c <min_search+0x22>
uint16_t min_search(uint16_t* array, uint8_t size){
 800505c:	b500      	push	{lr}
 800505e:	4684      	mov	ip, r0
 8005060:	468e      	mov	lr, r1
        return 0;
    uint16_t min = array[0];
 8005062:	8800      	ldrh	r0, [r0, #0]
    for(uint8_t i=1;i<size;i++){
 8005064:	2301      	movs	r3, #1
 8005066:	e001      	b.n	800506c <min_search+0x12>
 8005068:	3301      	adds	r3, #1
 800506a:	b2db      	uxtb	r3, r3
 800506c:	4573      	cmp	r3, lr
 800506e:	d207      	bcs.n	8005080 <min_search+0x26>
        if(array[i]<min)
 8005070:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
 8005074:	4282      	cmp	r2, r0
 8005076:	d2f7      	bcs.n	8005068 <min_search+0xe>
            min = array[i];
 8005078:	4610      	mov	r0, r2
 800507a:	e7f5      	b.n	8005068 <min_search+0xe>
        return 0;
 800507c:	2000      	movs	r0, #0
    }
    return min;
}
 800507e:	4770      	bx	lr
 8005080:	f85d fb04 	ldr.w	pc, [sp], #4

08005084 <get_avg>:

uint16_t get_avg(uint16_t* array, uint8_t size){
    if(size==0)
 8005084:	468c      	mov	ip, r1
 8005086:	b169      	cbz	r1, 80050a4 <get_avg+0x20>
        return 0;
    uint32_t sum = 0;
    for(uint8_t i=0;i<size;i++){
 8005088:	2300      	movs	r3, #0
    uint32_t sum = 0;
 800508a:	461a      	mov	r2, r3
 800508c:	e004      	b.n	8005098 <get_avg+0x14>
        sum += array[i];
 800508e:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8005092:	440a      	add	r2, r1
    for(uint8_t i=0;i<size;i++){
 8005094:	3301      	adds	r3, #1
 8005096:	b2db      	uxtb	r3, r3
 8005098:	4563      	cmp	r3, ip
 800509a:	d3f8      	bcc.n	800508e <get_avg+0xa>
    }
    return sum/size;
 800509c:	fbb2 f0fc 	udiv	r0, r2, ip
 80050a0:	b280      	uxth	r0, r0
 80050a2:	4770      	bx	lr
        return 0;
 80050a4:	2000      	movs	r0, #0
}
 80050a6:	4770      	bx	lr

080050a8 <max_search_signed>:

int16_t max_search_signed(int16_t* array, uint8_t size){
    if(size==0)
 80050a8:	b181      	cbz	r1, 80050cc <max_search_signed+0x24>
int16_t max_search_signed(int16_t* array, uint8_t size){
 80050aa:	b500      	push	{lr}
 80050ac:	4684      	mov	ip, r0
 80050ae:	468e      	mov	lr, r1
        return 0;
    int16_t max = array[0];
 80050b0:	f9b0 0000 	ldrsh.w	r0, [r0]
    for(uint8_t i=1;i<size;i++){
 80050b4:	2301      	movs	r3, #1
 80050b6:	e001      	b.n	80050bc <max_search_signed+0x14>
 80050b8:	3301      	adds	r3, #1
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	4573      	cmp	r3, lr
 80050be:	d207      	bcs.n	80050d0 <max_search_signed+0x28>
        if(array[i]>max)
 80050c0:	f93c 2013 	ldrsh.w	r2, [ip, r3, lsl #1]
 80050c4:	4282      	cmp	r2, r0
 80050c6:	ddf7      	ble.n	80050b8 <max_search_signed+0x10>
            max = array[i];
 80050c8:	4610      	mov	r0, r2
 80050ca:	e7f5      	b.n	80050b8 <max_search_signed+0x10>
        return 0;
 80050cc:	2000      	movs	r0, #0
    }
    return max;
}
 80050ce:	4770      	bx	lr
 80050d0:	f85d fb04 	ldr.w	pc, [sp], #4

080050d4 <min_search_signed>:

int16_t min_search_signed(int16_t* array, uint8_t size){
    if(size==0)
 80050d4:	b181      	cbz	r1, 80050f8 <min_search_signed+0x24>
int16_t min_search_signed(int16_t* array, uint8_t size){
 80050d6:	b500      	push	{lr}
 80050d8:	4684      	mov	ip, r0
 80050da:	468e      	mov	lr, r1
        return 0;
    int16_t min = array[0];
 80050dc:	f9b0 0000 	ldrsh.w	r0, [r0]
    for(uint8_t i=1;i<size;i++){
 80050e0:	2301      	movs	r3, #1
 80050e2:	e001      	b.n	80050e8 <min_search_signed+0x14>
 80050e4:	3301      	adds	r3, #1
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	4573      	cmp	r3, lr
 80050ea:	d207      	bcs.n	80050fc <min_search_signed+0x28>
        if(array[i]<min)
 80050ec:	f93c 2013 	ldrsh.w	r2, [ip, r3, lsl #1]
 80050f0:	4282      	cmp	r2, r0
 80050f2:	daf7      	bge.n	80050e4 <min_search_signed+0x10>
            min = array[i];
 80050f4:	4610      	mov	r0, r2
 80050f6:	e7f5      	b.n	80050e4 <min_search_signed+0x10>
        return 0;
 80050f8:	2000      	movs	r0, #0
    }
    return min;
}
 80050fa:	4770      	bx	lr
 80050fc:	f85d fb04 	ldr.w	pc, [sp], #4

08005100 <get_avg_signed>:

int16_t get_avg_signed(int16_t* array, uint8_t size){
    if(size==0)
 8005100:	468c      	mov	ip, r1
 8005102:	b169      	cbz	r1, 8005120 <get_avg_signed+0x20>
        return 0;
    int32_t sum = 0;
    for(uint8_t i=0;i<size;i++){
 8005104:	2300      	movs	r3, #0
    int32_t sum = 0;
 8005106:	461a      	mov	r2, r3
 8005108:	e004      	b.n	8005114 <get_avg_signed+0x14>
        sum += array[i];
 800510a:	f930 1013 	ldrsh.w	r1, [r0, r3, lsl #1]
 800510e:	440a      	add	r2, r1
    for(uint8_t i=0;i<size;i++){
 8005110:	3301      	adds	r3, #1
 8005112:	b2db      	uxtb	r3, r3
 8005114:	4563      	cmp	r3, ip
 8005116:	d3f8      	bcc.n	800510a <get_avg_signed+0xa>
    }
    return sum/size;
 8005118:	fb92 f0fc 	sdiv	r0, r2, ip
 800511c:	b200      	sxth	r0, r0
 800511e:	4770      	bx	lr
        return 0;
 8005120:	2000      	movs	r0, #0
}
 8005122:	4770      	bx	lr

08005124 <timer_check>:

uint8_t timer_check(uint32_t interval, uint32_t millis_elapsed){
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4604      	mov	r4, r0
 8005128:	460d      	mov	r5, r1
  if(HAL_GetTick()-(millis_elapsed)>interval){
 800512a:	f7fd fd7d 	bl	8002c28 <HAL_GetTick>
 800512e:	1b41      	subs	r1, r0, r5
 8005130:	42a1      	cmp	r1, r4
 8005132:	d901      	bls.n	8005138 <timer_check+0x14>
    return 1;
 8005134:	2001      	movs	r0, #1
  }else{
    return 0;
  }
 8005136:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
 8005138:	2000      	movs	r0, #0
 800513a:	e7fc      	b.n	8005136 <timer_check+0x12>

0800513c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800513c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005174 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005140:	f7ff fdd0 	bl	8004ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005144:	480c      	ldr	r0, [pc, #48]	@ (8005178 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005146:	490d      	ldr	r1, [pc, #52]	@ (800517c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005148:	4a0d      	ldr	r2, [pc, #52]	@ (8005180 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800514a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800514c:	e002      	b.n	8005154 <LoopCopyDataInit>

0800514e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800514e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005152:	3304      	adds	r3, #4

08005154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005158:	d3f9      	bcc.n	800514e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800515a:	4a0a      	ldr	r2, [pc, #40]	@ (8005184 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800515c:	4c0a      	ldr	r4, [pc, #40]	@ (8005188 <LoopFillZerobss+0x22>)
  movs r3, #0
 800515e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005160:	e001      	b.n	8005166 <LoopFillZerobss>

08005162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005164:	3204      	adds	r2, #4

08005166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005168:	d3fb      	bcc.n	8005162 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800516a:	f000 f81f 	bl	80051ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800516e:	f7fd faf1 	bl	8002754 <main>
  bx  lr    
 8005172:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800517c:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8005180:	080059a4 	.word	0x080059a4
  ldr r2, =_sbss
 8005184:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8005188:	20000690 	.word	0x20000690

0800518c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800518c:	e7fe      	b.n	800518c <ADC_IRQHandler>

0800518e <memset>:
 800518e:	4402      	add	r2, r0
 8005190:	4603      	mov	r3, r0
 8005192:	4293      	cmp	r3, r2
 8005194:	d100      	bne.n	8005198 <memset+0xa>
 8005196:	4770      	bx	lr
 8005198:	f803 1b01 	strb.w	r1, [r3], #1
 800519c:	e7f9      	b.n	8005192 <memset+0x4>
	...

080051a0 <__errno>:
 80051a0:	4b01      	ldr	r3, [pc, #4]	@ (80051a8 <__errno+0x8>)
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20000078 	.word	0x20000078

080051ac <__libc_init_array>:
 80051ac:	b570      	push	{r4, r5, r6, lr}
 80051ae:	4b0d      	ldr	r3, [pc, #52]	@ (80051e4 <__libc_init_array+0x38>)
 80051b0:	4d0d      	ldr	r5, [pc, #52]	@ (80051e8 <__libc_init_array+0x3c>)
 80051b2:	1b5b      	subs	r3, r3, r5
 80051b4:	109c      	asrs	r4, r3, #2
 80051b6:	2600      	movs	r6, #0
 80051b8:	42a6      	cmp	r6, r4
 80051ba:	d109      	bne.n	80051d0 <__libc_init_array+0x24>
 80051bc:	f000 fbc0 	bl	8005940 <_init>
 80051c0:	4d0a      	ldr	r5, [pc, #40]	@ (80051ec <__libc_init_array+0x40>)
 80051c2:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <__libc_init_array+0x44>)
 80051c4:	1b5b      	subs	r3, r3, r5
 80051c6:	109c      	asrs	r4, r3, #2
 80051c8:	2600      	movs	r6, #0
 80051ca:	42a6      	cmp	r6, r4
 80051cc:	d105      	bne.n	80051da <__libc_init_array+0x2e>
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d4:	4798      	blx	r3
 80051d6:	3601      	adds	r6, #1
 80051d8:	e7ee      	b.n	80051b8 <__libc_init_array+0xc>
 80051da:	f855 3b04 	ldr.w	r3, [r5], #4
 80051de:	4798      	blx	r3
 80051e0:	3601      	adds	r6, #1
 80051e2:	e7f2      	b.n	80051ca <__libc_init_array+0x1e>
 80051e4:	0800599c 	.word	0x0800599c
 80051e8:	0800599c 	.word	0x0800599c
 80051ec:	0800599c 	.word	0x0800599c
 80051f0:	080059a0 	.word	0x080059a0
 80051f4:	00000000 	.word	0x00000000

080051f8 <log>:
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	ed2d 8b02 	vpush	{d8}
 80051fe:	ec55 4b10 	vmov	r4, r5, d0
 8005202:	f000 f845 	bl	8005290 <__ieee754_log>
 8005206:	4622      	mov	r2, r4
 8005208:	462b      	mov	r3, r5
 800520a:	4620      	mov	r0, r4
 800520c:	4629      	mov	r1, r5
 800520e:	eeb0 8a40 	vmov.f32	s16, s0
 8005212:	eef0 8a60 	vmov.f32	s17, s1
 8005216:	f7fb fc2d 	bl	8000a74 <__aeabi_dcmpun>
 800521a:	b998      	cbnz	r0, 8005244 <log+0x4c>
 800521c:	2200      	movs	r2, #0
 800521e:	2300      	movs	r3, #0
 8005220:	4620      	mov	r0, r4
 8005222:	4629      	mov	r1, r5
 8005224:	f7fb fc1c 	bl	8000a60 <__aeabi_dcmpgt>
 8005228:	b960      	cbnz	r0, 8005244 <log+0x4c>
 800522a:	2200      	movs	r2, #0
 800522c:	2300      	movs	r3, #0
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	f7fb fbed 	bl	8000a10 <__aeabi_dcmpeq>
 8005236:	b160      	cbz	r0, 8005252 <log+0x5a>
 8005238:	f7ff ffb2 	bl	80051a0 <__errno>
 800523c:	ed9f 8b0c 	vldr	d8, [pc, #48]	@ 8005270 <log+0x78>
 8005240:	2322      	movs	r3, #34	@ 0x22
 8005242:	6003      	str	r3, [r0, #0]
 8005244:	eeb0 0a48 	vmov.f32	s0, s16
 8005248:	eef0 0a68 	vmov.f32	s1, s17
 800524c:	ecbd 8b02 	vpop	{d8}
 8005250:	bd38      	pop	{r3, r4, r5, pc}
 8005252:	f7ff ffa5 	bl	80051a0 <__errno>
 8005256:	ecbd 8b02 	vpop	{d8}
 800525a:	4603      	mov	r3, r0
 800525c:	2221      	movs	r2, #33	@ 0x21
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	4805      	ldr	r0, [pc, #20]	@ (8005278 <log+0x80>)
 8005262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005266:	f000 b80b 	b.w	8005280 <nan>
 800526a:	bf00      	nop
 800526c:	f3af 8000 	nop.w
 8005270:	00000000 	.word	0x00000000
 8005274:	fff00000 	.word	0xfff00000
 8005278:	08005990 	.word	0x08005990
 800527c:	00000000 	.word	0x00000000

08005280 <nan>:
 8005280:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005288 <nan+0x8>
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	00000000 	.word	0x00000000
 800528c:	7ff80000 	.word	0x7ff80000

08005290 <__ieee754_log>:
 8005290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005294:	ec51 0b10 	vmov	r0, r1, d0
 8005298:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800529c:	b087      	sub	sp, #28
 800529e:	460d      	mov	r5, r1
 80052a0:	f280 8082 	bge.w	80053a8 <__ieee754_log+0x118>
 80052a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80052a8:	4303      	orrs	r3, r0
 80052aa:	4602      	mov	r2, r0
 80052ac:	f000 8122 	beq.w	80054f4 <__ieee754_log+0x264>
 80052b0:	2900      	cmp	r1, #0
 80052b2:	f2c0 8169 	blt.w	8005588 <__ieee754_log+0x2f8>
 80052b6:	4bda      	ldr	r3, [pc, #872]	@ (8005620 <__ieee754_log+0x390>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	f7fb f941 	bl	8000540 <__aeabi_dmul>
 80052be:	4bd9      	ldr	r3, [pc, #868]	@ (8005624 <__ieee754_log+0x394>)
 80052c0:	460d      	mov	r5, r1
 80052c2:	429d      	cmp	r5, r3
 80052c4:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 80052c8:	dc73      	bgt.n	80053b2 <__ieee754_log+0x122>
 80052ca:	152c      	asrs	r4, r5, #20
 80052cc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80052d0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 80052d4:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80052d8:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 80052dc:	4414      	add	r4, r2
 80052de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052e2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80052e6:	f083 537f 	eor.w	r3, r3, #1069547520	@ 0x3fc00000
 80052ea:	f483 1340 	eor.w	r3, r3, #3145728	@ 0x300000
 80052ee:	ea43 0105 	orr.w	r1, r3, r5
 80052f2:	2200      	movs	r2, #0
 80052f4:	4bcc      	ldr	r3, [pc, #816]	@ (8005628 <__ieee754_log+0x398>)
 80052f6:	f7fa ff6b 	bl	80001d0 <__aeabi_dsub>
 80052fa:	1cab      	adds	r3, r5, #2
 80052fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005300:	2b02      	cmp	r3, #2
 8005302:	4682      	mov	sl, r0
 8005304:	468b      	mov	fp, r1
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	dc5b      	bgt.n	80053c4 <__ieee754_log+0x134>
 800530c:	2300      	movs	r3, #0
 800530e:	f7fb fb7f 	bl	8000a10 <__aeabi_dcmpeq>
 8005312:	2800      	cmp	r0, #0
 8005314:	f040 80f9 	bne.w	800550a <__ieee754_log+0x27a>
 8005318:	a3ad      	add	r3, pc, #692	@ (adr r3, 80055d0 <__ieee754_log+0x340>)
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	4650      	mov	r0, sl
 8005320:	4659      	mov	r1, fp
 8005322:	f7fb f90d 	bl	8000540 <__aeabi_dmul>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	2000      	movs	r0, #0
 800532c:	49bf      	ldr	r1, [pc, #764]	@ (800562c <__ieee754_log+0x39c>)
 800532e:	f7fa ff4f 	bl	80001d0 <__aeabi_dsub>
 8005332:	4652      	mov	r2, sl
 8005334:	4606      	mov	r6, r0
 8005336:	460f      	mov	r7, r1
 8005338:	465b      	mov	r3, fp
 800533a:	4650      	mov	r0, sl
 800533c:	4659      	mov	r1, fp
 800533e:	f7fb f8ff 	bl	8000540 <__aeabi_dmul>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4630      	mov	r0, r6
 8005348:	4639      	mov	r1, r7
 800534a:	f7fb f8f9 	bl	8000540 <__aeabi_dmul>
 800534e:	4606      	mov	r6, r0
 8005350:	460f      	mov	r7, r1
 8005352:	2c00      	cmp	r4, #0
 8005354:	f000 810d 	beq.w	8005572 <__ieee754_log+0x2e2>
 8005358:	4620      	mov	r0, r4
 800535a:	f7fb f887 	bl	800046c <__aeabi_i2d>
 800535e:	a39e      	add	r3, pc, #632	@ (adr r3, 80055d8 <__ieee754_log+0x348>)
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	4680      	mov	r8, r0
 8005366:	4689      	mov	r9, r1
 8005368:	f7fb f8ea 	bl	8000540 <__aeabi_dmul>
 800536c:	a39c      	add	r3, pc, #624	@ (adr r3, 80055e0 <__ieee754_log+0x350>)
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	4604      	mov	r4, r0
 8005374:	460d      	mov	r5, r1
 8005376:	4640      	mov	r0, r8
 8005378:	4649      	mov	r1, r9
 800537a:	f7fb f8e1 	bl	8000540 <__aeabi_dmul>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4630      	mov	r0, r6
 8005384:	4639      	mov	r1, r7
 8005386:	f7fa ff23 	bl	80001d0 <__aeabi_dsub>
 800538a:	4652      	mov	r2, sl
 800538c:	465b      	mov	r3, fp
 800538e:	f7fa ff1f 	bl	80001d0 <__aeabi_dsub>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4620      	mov	r0, r4
 8005398:	4629      	mov	r1, r5
 800539a:	f7fa ff19 	bl	80001d0 <__aeabi_dsub>
 800539e:	ec41 0b10 	vmov	d0, r0, r1
 80053a2:	b007      	add	sp, #28
 80053a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a8:	4b9e      	ldr	r3, [pc, #632]	@ (8005624 <__ieee754_log+0x394>)
 80053aa:	429d      	cmp	r5, r3
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	dd8b      	ble.n	80052ca <__ieee754_log+0x3a>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	f7fa ff0d 	bl	80001d4 <__adddf3>
 80053ba:	ec41 0b10 	vmov	d0, r0, r1
 80053be:	b007      	add	sp, #28
 80053c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80053c8:	f7fa ff04 	bl	80001d4 <__adddf3>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4650      	mov	r0, sl
 80053d2:	4659      	mov	r1, fp
 80053d4:	f7fb f9de 	bl	8000794 <__aeabi_ddiv>
 80053d8:	4606      	mov	r6, r0
 80053da:	4620      	mov	r0, r4
 80053dc:	460f      	mov	r7, r1
 80053de:	f7fb f845 	bl	800046c <__aeabi_i2d>
 80053e2:	4632      	mov	r2, r6
 80053e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053e8:	463b      	mov	r3, r7
 80053ea:	4630      	mov	r0, r6
 80053ec:	4639      	mov	r1, r7
 80053ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80053f2:	f7fb f8a5 	bl	8000540 <__aeabi_dmul>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	e9cd 2300 	strd	r2, r3, [sp]
 80053fe:	f7fb f89f 	bl	8000540 <__aeabi_dmul>
 8005402:	a379      	add	r3, pc, #484	@ (adr r3, 80055e8 <__ieee754_log+0x358>)
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	4606      	mov	r6, r0
 800540a:	460f      	mov	r7, r1
 800540c:	f7fb f898 	bl	8000540 <__aeabi_dmul>
 8005410:	a377      	add	r3, pc, #476	@ (adr r3, 80055f0 <__ieee754_log+0x360>)
 8005412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005416:	f7fa fedd 	bl	80001d4 <__adddf3>
 800541a:	4632      	mov	r2, r6
 800541c:	463b      	mov	r3, r7
 800541e:	f7fb f88f 	bl	8000540 <__aeabi_dmul>
 8005422:	a375      	add	r3, pc, #468	@ (adr r3, 80055f8 <__ieee754_log+0x368>)
 8005424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005428:	f7fa fed4 	bl	80001d4 <__adddf3>
 800542c:	4632      	mov	r2, r6
 800542e:	463b      	mov	r3, r7
 8005430:	f7fb f886 	bl	8000540 <__aeabi_dmul>
 8005434:	a372      	add	r3, pc, #456	@ (adr r3, 8005600 <__ieee754_log+0x370>)
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	f7fa fecb 	bl	80001d4 <__adddf3>
 800543e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005442:	f7fb f87d 	bl	8000540 <__aeabi_dmul>
 8005446:	a370      	add	r3, pc, #448	@ (adr r3, 8005608 <__ieee754_log+0x378>)
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	e9cd 0100 	strd	r0, r1, [sp]
 8005450:	4630      	mov	r0, r6
 8005452:	4639      	mov	r1, r7
 8005454:	f7fb f874 	bl	8000540 <__aeabi_dmul>
 8005458:	a36d      	add	r3, pc, #436	@ (adr r3, 8005610 <__ieee754_log+0x380>)
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	f7fa feb9 	bl	80001d4 <__adddf3>
 8005462:	4632      	mov	r2, r6
 8005464:	463b      	mov	r3, r7
 8005466:	f7fb f86b 	bl	8000540 <__aeabi_dmul>
 800546a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005618 <__ieee754_log+0x388>)
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f7fa feb0 	bl	80001d4 <__adddf3>
 8005474:	4632      	mov	r2, r6
 8005476:	463b      	mov	r3, r7
 8005478:	f7fb f862 	bl	8000540 <__aeabi_dmul>
 800547c:	f5a5 28c2 	sub.w	r8, r5, #397312	@ 0x61000
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8005488:	e9dd 0100 	ldrd	r0, r1, [sp]
 800548c:	f7fa fea2 	bl	80001d4 <__adddf3>
 8005490:	f2a8 487a 	subw	r8, r8, #1146	@ 0x47a
 8005494:	3551      	adds	r5, #81	@ 0x51
 8005496:	ea45 0508 	orr.w	r5, r5, r8
 800549a:	2d00      	cmp	r5, #0
 800549c:	4606      	mov	r6, r0
 800549e:	460f      	mov	r7, r1
 80054a0:	dd52      	ble.n	8005548 <__ieee754_log+0x2b8>
 80054a2:	4b62      	ldr	r3, [pc, #392]	@ (800562c <__ieee754_log+0x39c>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	4650      	mov	r0, sl
 80054a8:	4659      	mov	r1, fp
 80054aa:	f7fb f849 	bl	8000540 <__aeabi_dmul>
 80054ae:	4652      	mov	r2, sl
 80054b0:	465b      	mov	r3, fp
 80054b2:	f7fb f845 	bl	8000540 <__aeabi_dmul>
 80054b6:	4680      	mov	r8, r0
 80054b8:	4689      	mov	r9, r1
 80054ba:	4630      	mov	r0, r6
 80054bc:	4639      	mov	r1, r7
 80054be:	4642      	mov	r2, r8
 80054c0:	464b      	mov	r3, r9
 80054c2:	f7fa fe87 	bl	80001d4 <__adddf3>
 80054c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054ca:	f7fb f839 	bl	8000540 <__aeabi_dmul>
 80054ce:	4606      	mov	r6, r0
 80054d0:	460f      	mov	r7, r1
 80054d2:	2c00      	cmp	r4, #0
 80054d4:	d162      	bne.n	800559c <__ieee754_log+0x30c>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4640      	mov	r0, r8
 80054dc:	4649      	mov	r1, r9
 80054de:	f7fa fe77 	bl	80001d0 <__aeabi_dsub>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4650      	mov	r0, sl
 80054e8:	4659      	mov	r1, fp
 80054ea:	f7fa fe71 	bl	80001d0 <__aeabi_dsub>
 80054ee:	ec41 0b10 	vmov	d0, r0, r1
 80054f2:	e764      	b.n	80053be <__ieee754_log+0x12e>
 80054f4:	2200      	movs	r2, #0
 80054f6:	2300      	movs	r3, #0
 80054f8:	494d      	ldr	r1, [pc, #308]	@ (8005630 <__ieee754_log+0x3a0>)
 80054fa:	2000      	movs	r0, #0
 80054fc:	f7fb f94a 	bl	8000794 <__aeabi_ddiv>
 8005500:	ec41 0b10 	vmov	d0, r0, r1
 8005504:	b007      	add	sp, #28
 8005506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550a:	2c00      	cmp	r4, #0
 800550c:	f000 8092 	beq.w	8005634 <__ieee754_log+0x3a4>
 8005510:	4620      	mov	r0, r4
 8005512:	f7fa ffab 	bl	800046c <__aeabi_i2d>
 8005516:	a330      	add	r3, pc, #192	@ (adr r3, 80055d8 <__ieee754_log+0x348>)
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	4606      	mov	r6, r0
 800551e:	460f      	mov	r7, r1
 8005520:	f7fb f80e 	bl	8000540 <__aeabi_dmul>
 8005524:	a32e      	add	r3, pc, #184	@ (adr r3, 80055e0 <__ieee754_log+0x350>)
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	4604      	mov	r4, r0
 800552c:	460d      	mov	r5, r1
 800552e:	4630      	mov	r0, r6
 8005530:	4639      	mov	r1, r7
 8005532:	f7fb f805 	bl	8000540 <__aeabi_dmul>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	4620      	mov	r0, r4
 800553c:	4629      	mov	r1, r5
 800553e:	f7fa fe49 	bl	80001d4 <__adddf3>
 8005542:	ec41 0b10 	vmov	d0, r0, r1
 8005546:	e73a      	b.n	80053be <__ieee754_log+0x12e>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4650      	mov	r0, sl
 800554e:	4659      	mov	r1, fp
 8005550:	f7fa fe3e 	bl	80001d0 <__aeabi_dsub>
 8005554:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005558:	f7fa fff2 	bl	8000540 <__aeabi_dmul>
 800555c:	4606      	mov	r6, r0
 800555e:	460f      	mov	r7, r1
 8005560:	b13c      	cbz	r4, 8005572 <__ieee754_log+0x2e2>
 8005562:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005566:	a31c      	add	r3, pc, #112	@ (adr r3, 80055d8 <__ieee754_log+0x348>)
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	4640      	mov	r0, r8
 800556e:	4649      	mov	r1, r9
 8005570:	e6fa      	b.n	8005368 <__ieee754_log+0xd8>
 8005572:	4632      	mov	r2, r6
 8005574:	463b      	mov	r3, r7
 8005576:	4650      	mov	r0, sl
 8005578:	4659      	mov	r1, fp
 800557a:	f7fa fe29 	bl	80001d0 <__aeabi_dsub>
 800557e:	ec41 0b10 	vmov	d0, r0, r1
 8005582:	b007      	add	sp, #28
 8005584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005588:	460b      	mov	r3, r1
 800558a:	f7fa fe21 	bl	80001d0 <__aeabi_dsub>
 800558e:	2200      	movs	r2, #0
 8005590:	2300      	movs	r3, #0
 8005592:	f7fb f8ff 	bl	8000794 <__aeabi_ddiv>
 8005596:	ec41 0b10 	vmov	d0, r0, r1
 800559a:	e710      	b.n	80053be <__ieee754_log+0x12e>
 800559c:	a30e      	add	r3, pc, #56	@ (adr r3, 80055d8 <__ieee754_log+0x348>)
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055a6:	f7fa ffcb 	bl	8000540 <__aeabi_dmul>
 80055aa:	a30d      	add	r3, pc, #52	@ (adr r3, 80055e0 <__ieee754_log+0x350>)
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	4604      	mov	r4, r0
 80055b2:	460d      	mov	r5, r1
 80055b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055b8:	f7fa ffc2 	bl	8000540 <__aeabi_dmul>
 80055bc:	4632      	mov	r2, r6
 80055be:	463b      	mov	r3, r7
 80055c0:	f7fa fe08 	bl	80001d4 <__adddf3>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4640      	mov	r0, r8
 80055ca:	4649      	mov	r1, r9
 80055cc:	e6db      	b.n	8005386 <__ieee754_log+0xf6>
 80055ce:	bf00      	nop
 80055d0:	55555555 	.word	0x55555555
 80055d4:	3fd55555 	.word	0x3fd55555
 80055d8:	fee00000 	.word	0xfee00000
 80055dc:	3fe62e42 	.word	0x3fe62e42
 80055e0:	35793c76 	.word	0x35793c76
 80055e4:	3dea39ef 	.word	0x3dea39ef
 80055e8:	df3e5244 	.word	0xdf3e5244
 80055ec:	3fc2f112 	.word	0x3fc2f112
 80055f0:	96cb03de 	.word	0x96cb03de
 80055f4:	3fc74664 	.word	0x3fc74664
 80055f8:	94229359 	.word	0x94229359
 80055fc:	3fd24924 	.word	0x3fd24924
 8005600:	55555593 	.word	0x55555593
 8005604:	3fe55555 	.word	0x3fe55555
 8005608:	d078c69f 	.word	0xd078c69f
 800560c:	3fc39a09 	.word	0x3fc39a09
 8005610:	1d8e78af 	.word	0x1d8e78af
 8005614:	3fcc71c5 	.word	0x3fcc71c5
 8005618:	9997fa04 	.word	0x9997fa04
 800561c:	3fd99999 	.word	0x3fd99999
 8005620:	43500000 	.word	0x43500000
 8005624:	7fefffff 	.word	0x7fefffff
 8005628:	3ff00000 	.word	0x3ff00000
 800562c:	3fe00000 	.word	0x3fe00000
 8005630:	c3500000 	.word	0xc3500000
 8005634:	ed9f 0b02 	vldr	d0, [pc, #8]	@ 8005640 <__ieee754_log+0x3b0>
 8005638:	e6c1      	b.n	80053be <__ieee754_log+0x12e>
 800563a:	bf00      	nop
 800563c:	f3af 8000 	nop.w
	...

08005648 <__udivmoddi4>:
 8005648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800564c:	9d08      	ldr	r5, [sp, #32]
 800564e:	460f      	mov	r7, r1
 8005650:	4604      	mov	r4, r0
 8005652:	468c      	mov	ip, r1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d148      	bne.n	80056ea <__udivmoddi4+0xa2>
 8005658:	428a      	cmp	r2, r1
 800565a:	4616      	mov	r6, r2
 800565c:	d961      	bls.n	8005722 <__udivmoddi4+0xda>
 800565e:	fab2 f382 	clz	r3, r2
 8005662:	b14b      	cbz	r3, 8005678 <__udivmoddi4+0x30>
 8005664:	f1c3 0220 	rsb	r2, r3, #32
 8005668:	fa01 fc03 	lsl.w	ip, r1, r3
 800566c:	fa20 f202 	lsr.w	r2, r0, r2
 8005670:	409e      	lsls	r6, r3
 8005672:	ea42 0c0c 	orr.w	ip, r2, ip
 8005676:	409c      	lsls	r4, r3
 8005678:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800567c:	b2b7      	uxth	r7, r6
 800567e:	fbbc f1fe 	udiv	r1, ip, lr
 8005682:	0c22      	lsrs	r2, r4, #16
 8005684:	fb0e cc11 	mls	ip, lr, r1, ip
 8005688:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800568c:	fb01 f007 	mul.w	r0, r1, r7
 8005690:	4290      	cmp	r0, r2
 8005692:	d909      	bls.n	80056a8 <__udivmoddi4+0x60>
 8005694:	18b2      	adds	r2, r6, r2
 8005696:	f101 3cff 	add.w	ip, r1, #4294967295
 800569a:	f080 80ee 	bcs.w	800587a <__udivmoddi4+0x232>
 800569e:	4290      	cmp	r0, r2
 80056a0:	f240 80eb 	bls.w	800587a <__udivmoddi4+0x232>
 80056a4:	3902      	subs	r1, #2
 80056a6:	4432      	add	r2, r6
 80056a8:	1a12      	subs	r2, r2, r0
 80056aa:	b2a4      	uxth	r4, r4
 80056ac:	fbb2 f0fe 	udiv	r0, r2, lr
 80056b0:	fb0e 2210 	mls	r2, lr, r0, r2
 80056b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80056b8:	fb00 f707 	mul.w	r7, r0, r7
 80056bc:	42a7      	cmp	r7, r4
 80056be:	d909      	bls.n	80056d4 <__udivmoddi4+0x8c>
 80056c0:	1934      	adds	r4, r6, r4
 80056c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80056c6:	f080 80da 	bcs.w	800587e <__udivmoddi4+0x236>
 80056ca:	42a7      	cmp	r7, r4
 80056cc:	f240 80d7 	bls.w	800587e <__udivmoddi4+0x236>
 80056d0:	4434      	add	r4, r6
 80056d2:	3802      	subs	r0, #2
 80056d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80056d8:	1be4      	subs	r4, r4, r7
 80056da:	2100      	movs	r1, #0
 80056dc:	b11d      	cbz	r5, 80056e6 <__udivmoddi4+0x9e>
 80056de:	40dc      	lsrs	r4, r3
 80056e0:	2300      	movs	r3, #0
 80056e2:	e9c5 4300 	strd	r4, r3, [r5]
 80056e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ea:	428b      	cmp	r3, r1
 80056ec:	d906      	bls.n	80056fc <__udivmoddi4+0xb4>
 80056ee:	b10d      	cbz	r5, 80056f4 <__udivmoddi4+0xac>
 80056f0:	e9c5 0100 	strd	r0, r1, [r5]
 80056f4:	2100      	movs	r1, #0
 80056f6:	4608      	mov	r0, r1
 80056f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fc:	fab3 f183 	clz	r1, r3
 8005700:	2900      	cmp	r1, #0
 8005702:	d148      	bne.n	8005796 <__udivmoddi4+0x14e>
 8005704:	42bb      	cmp	r3, r7
 8005706:	d302      	bcc.n	800570e <__udivmoddi4+0xc6>
 8005708:	4282      	cmp	r2, r0
 800570a:	f200 8107 	bhi.w	800591c <__udivmoddi4+0x2d4>
 800570e:	1a84      	subs	r4, r0, r2
 8005710:	eb67 0203 	sbc.w	r2, r7, r3
 8005714:	2001      	movs	r0, #1
 8005716:	4694      	mov	ip, r2
 8005718:	2d00      	cmp	r5, #0
 800571a:	d0e4      	beq.n	80056e6 <__udivmoddi4+0x9e>
 800571c:	e9c5 4c00 	strd	r4, ip, [r5]
 8005720:	e7e1      	b.n	80056e6 <__udivmoddi4+0x9e>
 8005722:	2a00      	cmp	r2, #0
 8005724:	f000 8092 	beq.w	800584c <__udivmoddi4+0x204>
 8005728:	fab2 f382 	clz	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	f040 80a8 	bne.w	8005882 <__udivmoddi4+0x23a>
 8005732:	1a8a      	subs	r2, r1, r2
 8005734:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8005738:	fa1f fc86 	uxth.w	ip, r6
 800573c:	2101      	movs	r1, #1
 800573e:	0c20      	lsrs	r0, r4, #16
 8005740:	fbb2 f7fe 	udiv	r7, r2, lr
 8005744:	fb0e 2217 	mls	r2, lr, r7, r2
 8005748:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800574c:	fb0c f007 	mul.w	r0, ip, r7
 8005750:	4290      	cmp	r0, r2
 8005752:	d907      	bls.n	8005764 <__udivmoddi4+0x11c>
 8005754:	18b2      	adds	r2, r6, r2
 8005756:	f107 38ff 	add.w	r8, r7, #4294967295
 800575a:	d202      	bcs.n	8005762 <__udivmoddi4+0x11a>
 800575c:	4290      	cmp	r0, r2
 800575e:	f200 80e2 	bhi.w	8005926 <__udivmoddi4+0x2de>
 8005762:	4647      	mov	r7, r8
 8005764:	1a12      	subs	r2, r2, r0
 8005766:	b2a4      	uxth	r4, r4
 8005768:	fbb2 f0fe 	udiv	r0, r2, lr
 800576c:	fb0e 2210 	mls	r2, lr, r0, r2
 8005770:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005774:	fb0c fc00 	mul.w	ip, ip, r0
 8005778:	45a4      	cmp	ip, r4
 800577a:	d907      	bls.n	800578c <__udivmoddi4+0x144>
 800577c:	1934      	adds	r4, r6, r4
 800577e:	f100 32ff 	add.w	r2, r0, #4294967295
 8005782:	d202      	bcs.n	800578a <__udivmoddi4+0x142>
 8005784:	45a4      	cmp	ip, r4
 8005786:	f200 80cb 	bhi.w	8005920 <__udivmoddi4+0x2d8>
 800578a:	4610      	mov	r0, r2
 800578c:	eba4 040c 	sub.w	r4, r4, ip
 8005790:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005794:	e7a2      	b.n	80056dc <__udivmoddi4+0x94>
 8005796:	f1c1 0620 	rsb	r6, r1, #32
 800579a:	408b      	lsls	r3, r1
 800579c:	fa22 fc06 	lsr.w	ip, r2, r6
 80057a0:	ea4c 0c03 	orr.w	ip, ip, r3
 80057a4:	fa07 f401 	lsl.w	r4, r7, r1
 80057a8:	fa20 f306 	lsr.w	r3, r0, r6
 80057ac:	40f7      	lsrs	r7, r6
 80057ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80057b2:	4323      	orrs	r3, r4
 80057b4:	fa00 f801 	lsl.w	r8, r0, r1
 80057b8:	fa1f fe8c 	uxth.w	lr, ip
 80057bc:	fbb7 f0f9 	udiv	r0, r7, r9
 80057c0:	0c1c      	lsrs	r4, r3, #16
 80057c2:	fb09 7710 	mls	r7, r9, r0, r7
 80057c6:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80057ca:	fb00 f70e 	mul.w	r7, r0, lr
 80057ce:	42a7      	cmp	r7, r4
 80057d0:	fa02 f201 	lsl.w	r2, r2, r1
 80057d4:	d90a      	bls.n	80057ec <__udivmoddi4+0x1a4>
 80057d6:	eb1c 0404 	adds.w	r4, ip, r4
 80057da:	f100 3aff 	add.w	sl, r0, #4294967295
 80057de:	f080 809b 	bcs.w	8005918 <__udivmoddi4+0x2d0>
 80057e2:	42a7      	cmp	r7, r4
 80057e4:	f240 8098 	bls.w	8005918 <__udivmoddi4+0x2d0>
 80057e8:	3802      	subs	r0, #2
 80057ea:	4464      	add	r4, ip
 80057ec:	1be4      	subs	r4, r4, r7
 80057ee:	b29f      	uxth	r7, r3
 80057f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80057f4:	fb09 4413 	mls	r4, r9, r3, r4
 80057f8:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 80057fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8005800:	45a6      	cmp	lr, r4
 8005802:	d909      	bls.n	8005818 <__udivmoddi4+0x1d0>
 8005804:	eb1c 0404 	adds.w	r4, ip, r4
 8005808:	f103 37ff 	add.w	r7, r3, #4294967295
 800580c:	f080 8082 	bcs.w	8005914 <__udivmoddi4+0x2cc>
 8005810:	45a6      	cmp	lr, r4
 8005812:	d97f      	bls.n	8005914 <__udivmoddi4+0x2cc>
 8005814:	3b02      	subs	r3, #2
 8005816:	4464      	add	r4, ip
 8005818:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800581c:	eba4 040e 	sub.w	r4, r4, lr
 8005820:	fba0 e702 	umull	lr, r7, r0, r2
 8005824:	42bc      	cmp	r4, r7
 8005826:	4673      	mov	r3, lr
 8005828:	46b9      	mov	r9, r7
 800582a:	d363      	bcc.n	80058f4 <__udivmoddi4+0x2ac>
 800582c:	d060      	beq.n	80058f0 <__udivmoddi4+0x2a8>
 800582e:	b15d      	cbz	r5, 8005848 <__udivmoddi4+0x200>
 8005830:	ebb8 0203 	subs.w	r2, r8, r3
 8005834:	eb64 0409 	sbc.w	r4, r4, r9
 8005838:	fa04 f606 	lsl.w	r6, r4, r6
 800583c:	fa22 f301 	lsr.w	r3, r2, r1
 8005840:	431e      	orrs	r6, r3
 8005842:	40cc      	lsrs	r4, r1
 8005844:	e9c5 6400 	strd	r6, r4, [r5]
 8005848:	2100      	movs	r1, #0
 800584a:	e74c      	b.n	80056e6 <__udivmoddi4+0x9e>
 800584c:	0862      	lsrs	r2, r4, #1
 800584e:	0848      	lsrs	r0, r1, #1
 8005850:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8005854:	0c0b      	lsrs	r3, r1, #16
 8005856:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800585a:	b28a      	uxth	r2, r1
 800585c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005860:	fbb3 f1f6 	udiv	r1, r3, r6
 8005864:	07e4      	lsls	r4, r4, #31
 8005866:	46b4      	mov	ip, r6
 8005868:	4637      	mov	r7, r6
 800586a:	46b6      	mov	lr, r6
 800586c:	231f      	movs	r3, #31
 800586e:	fbb0 f0f6 	udiv	r0, r0, r6
 8005872:	1bd2      	subs	r2, r2, r7
 8005874:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005878:	e761      	b.n	800573e <__udivmoddi4+0xf6>
 800587a:	4661      	mov	r1, ip
 800587c:	e714      	b.n	80056a8 <__udivmoddi4+0x60>
 800587e:	4610      	mov	r0, r2
 8005880:	e728      	b.n	80056d4 <__udivmoddi4+0x8c>
 8005882:	f1c3 0120 	rsb	r1, r3, #32
 8005886:	fa20 f201 	lsr.w	r2, r0, r1
 800588a:	409e      	lsls	r6, r3
 800588c:	fa27 f101 	lsr.w	r1, r7, r1
 8005890:	409f      	lsls	r7, r3
 8005892:	433a      	orrs	r2, r7
 8005894:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8005898:	fa1f fc86 	uxth.w	ip, r6
 800589c:	fbb1 f7fe 	udiv	r7, r1, lr
 80058a0:	fb0e 1017 	mls	r0, lr, r7, r1
 80058a4:	0c11      	lsrs	r1, r2, #16
 80058a6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80058aa:	fb07 f80c 	mul.w	r8, r7, ip
 80058ae:	4588      	cmp	r8, r1
 80058b0:	fa04 f403 	lsl.w	r4, r4, r3
 80058b4:	d93a      	bls.n	800592c <__udivmoddi4+0x2e4>
 80058b6:	1871      	adds	r1, r6, r1
 80058b8:	f107 30ff 	add.w	r0, r7, #4294967295
 80058bc:	d201      	bcs.n	80058c2 <__udivmoddi4+0x27a>
 80058be:	4588      	cmp	r8, r1
 80058c0:	d81f      	bhi.n	8005902 <__udivmoddi4+0x2ba>
 80058c2:	eba1 0108 	sub.w	r1, r1, r8
 80058c6:	fbb1 f8fe 	udiv	r8, r1, lr
 80058ca:	fb08 f70c 	mul.w	r7, r8, ip
 80058ce:	fb0e 1118 	mls	r1, lr, r8, r1
 80058d2:	b292      	uxth	r2, r2
 80058d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80058d8:	42ba      	cmp	r2, r7
 80058da:	d22f      	bcs.n	800593c <__udivmoddi4+0x2f4>
 80058dc:	18b2      	adds	r2, r6, r2
 80058de:	f108 31ff 	add.w	r1, r8, #4294967295
 80058e2:	d2c6      	bcs.n	8005872 <__udivmoddi4+0x22a>
 80058e4:	42ba      	cmp	r2, r7
 80058e6:	d2c4      	bcs.n	8005872 <__udivmoddi4+0x22a>
 80058e8:	f1a8 0102 	sub.w	r1, r8, #2
 80058ec:	4432      	add	r2, r6
 80058ee:	e7c0      	b.n	8005872 <__udivmoddi4+0x22a>
 80058f0:	45f0      	cmp	r8, lr
 80058f2:	d29c      	bcs.n	800582e <__udivmoddi4+0x1e6>
 80058f4:	ebbe 0302 	subs.w	r3, lr, r2
 80058f8:	eb67 070c 	sbc.w	r7, r7, ip
 80058fc:	3801      	subs	r0, #1
 80058fe:	46b9      	mov	r9, r7
 8005900:	e795      	b.n	800582e <__udivmoddi4+0x1e6>
 8005902:	eba6 0808 	sub.w	r8, r6, r8
 8005906:	4441      	add	r1, r8
 8005908:	1eb8      	subs	r0, r7, #2
 800590a:	fbb1 f8fe 	udiv	r8, r1, lr
 800590e:	fb08 f70c 	mul.w	r7, r8, ip
 8005912:	e7dc      	b.n	80058ce <__udivmoddi4+0x286>
 8005914:	463b      	mov	r3, r7
 8005916:	e77f      	b.n	8005818 <__udivmoddi4+0x1d0>
 8005918:	4650      	mov	r0, sl
 800591a:	e767      	b.n	80057ec <__udivmoddi4+0x1a4>
 800591c:	4608      	mov	r0, r1
 800591e:	e6fb      	b.n	8005718 <__udivmoddi4+0xd0>
 8005920:	4434      	add	r4, r6
 8005922:	3802      	subs	r0, #2
 8005924:	e732      	b.n	800578c <__udivmoddi4+0x144>
 8005926:	3f02      	subs	r7, #2
 8005928:	4432      	add	r2, r6
 800592a:	e71b      	b.n	8005764 <__udivmoddi4+0x11c>
 800592c:	eba1 0108 	sub.w	r1, r1, r8
 8005930:	4638      	mov	r0, r7
 8005932:	fbb1 f8fe 	udiv	r8, r1, lr
 8005936:	fb08 f70c 	mul.w	r7, r8, ip
 800593a:	e7c8      	b.n	80058ce <__udivmoddi4+0x286>
 800593c:	4641      	mov	r1, r8
 800593e:	e798      	b.n	8005872 <__udivmoddi4+0x22a>

08005940 <_init>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	bf00      	nop
 8005944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005946:	bc08      	pop	{r3}
 8005948:	469e      	mov	lr, r3
 800594a:	4770      	bx	lr

0800594c <_fini>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	bf00      	nop
 8005950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005952:	bc08      	pop	{r3}
 8005954:	469e      	mov	lr, r3
 8005956:	4770      	bx	lr
